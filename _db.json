{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/cactus-of/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-of/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/Using-httpBook-with-dataverse-to-test-the-web-api.md","hash":"9e7fa03d404c52a048290aca172517637d9f2702","modified":1642337508251},{"_id":"source/D365-Typescript/index.md","hash":"b17c489df640b7ba277c319bf62bee72729ad0ea","modified":1619825684002},{"_id":"source/CNAME","hash":"d0f0a3623e572abc5a910e26f500577094909f89","modified":1619825683999},{"_id":"source/Me/index.md","hash":"70e1be7f161592b00d0b44820a27eb9c1e900b67","modified":1619825684003},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4.md","hash":"0821234adf57f6d53eedf16d58a991c60bc578cc","modified":1619825684004},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1.md","hash":"8a95319f235b5aaa0ae37524e3ed493dee3eaa14","modified":1619825684017},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2.md","hash":"f0b468b5d142f86af9ce18cd70d5a7ce4352a04a","modified":1619825684023},{"_id":"source/_posts/D365-Typescript-Webresources-Part-3.md","hash":"af32bc3fa40134347a5d7893de658d06856ec405","modified":1619825684028},{"_id":"source/_posts/D365-Typescript-Webresources-Part-5.md","hash":"436e70973ac87e6c59db0bf6885d754c50291e73","modified":1619825684031},{"_id":"source/_posts/PCF-WebApi-execute.md","hash":"a315ea695aaaccd7964b8cb765b9803c0f131403","modified":1619825684041},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6.md","hash":"57804f5d3e62402dcf2422dc7ca10a851fd8d6bd","modified":1619825684034},{"_id":"source/_posts/PCF-and-Form-Communication.md","hash":"552fadc8317bcb336e5de54fcc6ac731976e017b","modified":1619825684043},{"_id":"source/_posts/PCF-primary-entity-info.md","hash":"7076452aa3cb9aeace2736f78e5c7dcd4db0b636","modified":1619825684045},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ChromeOpenFile.png","hash":"35bbc979bd4b6312d8979ed9449d078ac9f444f1","modified":1619825684010},{"_id":"source/categories/index.md","hash":"bff78bccfe7ca21c943d17f24e3613b609ba65a5","modified":1619825684047},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/files1.png","hash":"1473889010343b77d3ba704721ca99d9aa7df0ca","modified":1619825684020},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/form-event.png","hash":"36a8b5b8f24426b50d75050a48d282b46428372c","modified":1619825684021},{"_id":"source/_posts/Welcome.md","hash":"728d5f155062687849ee2a93d984e1054d8aa3d0","modified":1619825684046},{"_id":"source/_posts/D365-Typescript-Webresources-Part-3/build-output.png","hash":"bdd36bfdc0180972e4bdbc4d29a94ae7f7c04500","modified":1619825684029},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/d365ts-pt4.zip","hash":"5a205f9ff0f7c704bf947d062fe23bb45568e803","modified":1619825684015},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/d365ts-pt1.zip","hash":"de936fc415d8caad8b8cb6587b430326e0595202","modified":1619825684019},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/d365ts-pt2.zip","hash":"d81882c7eb5e7b41e19d70e1667e30286632a349","modified":1619825684023},{"_id":"source/_posts/PCF-WebApi-execute/pcf-webapi.png","hash":"d1b777af7053bf679b6d12a73099f1b203cda64a","modified":1619825684042},{"_id":"source/_posts/D365-Typescript-Webresources-Part-3/d365ts-pt3.zip","hash":"18e583ba96f0c57b406d1f0d6f100293c08e3186","modified":1619825684030},{"_id":"source/_posts/PCF-primary-entity-info/pcf-entityinfo.png","hash":"b8201b1545ae2be7be058b19697e26fab08e5beb","modified":1619825684046},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ChromeBreakpoint.png","hash":"ffae86e7044b51720ba4e6a46be20b9079218345","modified":1619825684009},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/DebugSampleModule.png","hash":"178c07df63f7fb65a3daea950af7655b318a6958","modified":1619825684011},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ReallyPointless.png","hash":"1708bea878851dd5d33968b61458c72e990d91d7","modified":1619825684013},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/StepInto.png","hash":"c496b6a8465d2b73a8e9abf50083755d8edf5b49","modified":1619825684014},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/AutoResponderTab.png","hash":"59878d2cea11de099710da0a2dc97f4c205e0fce","modified":1619825684008},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/formnotification.png","hash":"2d37b5fae5ebbe8045610bd5fe40cc256caaf511","modified":1619825684022},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/detail.png","hash":"fb704cd696697156eb60426fc228db521f3fb691","modified":1619825684038},{"_id":"source/_posts/D365-Typescript-Webresources-Part-5/d365ts-pt5.zip","hash":"030a10ff0a78cc9892bf81a2a6edec4997e8e852","modified":1619825684032},{"_id":"source/_posts/PCF-and-Form-Communication/custom-events.svg","hash":"1532dab10b8b6c19f6d932a42276965207ca81e5","modified":1619825684044},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/AutoResponderRule.png","hash":"30e356f27a0d2ac74098417ecfc2e3ad71d37f6a","modified":1619825684006},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/type-infer-2.png","hash":"b1bb91d965a0d590d162de862edcb411eed1b49d","modified":1619825684028},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/type-infer-1.png","hash":"5ff44cb51a641b845c0d1392698f7bdecdd1af54","modified":1619825684026},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/log.png","hash":"ec05d3b53e2d1e262762c4ab8de1b12fee26bb92","modified":1619825684040},{"_id":"source/_posts/PCF-and-Form-Communication/custom-events.yuml","hash":"dcf7b0bdd76a477e47736f1405287539ddb74d3f","modified":1619825684044},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/d365ts-pt6.zip","hash":"4ab1147f823b946eabf01d2480c6698502d80855","modified":1619825684037},{"_id":"themes/cactus-of/.jshintrc","hash":"d6ee46102ed2ff00acb555557f47241b701e99a4","modified":1619825684048},{"_id":"themes/cactus-of/.stylintrc","hash":"8bbbee5eae70fbe7dd53c9ce43d244b47d58385b","modified":1619825684049},{"_id":"themes/cactus-of/LICENSE","hash":"06806c75801c9ae870a1b47d588ef8e00d3c7c94","modified":1619825684049},{"_id":"themes/cactus-of/README.md","hash":"ac7b78fe4afba037b01fc96903ce4d984688fd61","modified":1619825684052},{"_id":"themes/cactus-of/languages/ca.yml","hash":"6f9897fe8c7b7bf23be7fa58c530602217aea898","modified":1619825684054},{"_id":"themes/cactus-of/package.json","hash":"c7492f4a9c118a066260ba1379064dc0a8ec6609","modified":1619825684081},{"_id":"themes/cactus-of/gulpfile.js","hash":"88fe082c143d8d27c6099cb791fefb6aeebe588f","modified":1619825684054},{"_id":"themes/cactus-of/_config.yml","hash":"30f162e337ce7dc471afe374fc57f6177afab1c5","modified":1619825684053},{"_id":"themes/cactus-of/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1619825684056},{"_id":"themes/cactus-of/languages/fa.yml","hash":"05fb8dad765af2b9eec32582f5d277eb2735ffc3","modified":1619825684057},{"_id":"themes/cactus-of/languages/it.yml","hash":"501bfc9aed86964ee75354a805378740a02af799","modified":1619825684059},{"_id":"themes/cactus-of/languages/es.yml","hash":"56ddfd9081641c45272bdc2df750e41ab8b600bf","modified":1619825684057},{"_id":"themes/cactus-of/languages/de.yml","hash":"0734bfc33861585a12327142bf52489c882ad34f","modified":1619825684055},{"_id":"themes/cactus-of/languages/fr.yml","hash":"4604fc8f94d98f6d53c80535fbae78814f88f32d","modified":1619825684058},{"_id":"themes/cactus-of/languages/kr.yml","hash":"ab5be04a1b4c4d87e164b1a045e220f855e85a38","modified":1619825684059},{"_id":"themes/cactus-of/languages/en.yml","hash":"0a4985438ac00ef9f20f8836ac356a3436ff7552","modified":1619825684056},{"_id":"themes/cactus-of/languages/nl.yml","hash":"4c36921322e782775ccff9aec78d4261153cf5e5","modified":1619825684060},{"_id":"themes/cactus-of/languages/pl.yml","hash":"3677b782edd98986bb82568c6ff6c8b77140b75a","modified":1619825684060},{"_id":"themes/cactus-of/languages/pt-br.yml","hash":"417d25e3dae260a2503ec6a8f1b590fa00534b14","modified":1619825684061},{"_id":"themes/cactus-of/languages/ru.yml","hash":"47fb1672f36d5adadf2f6c3a5c4d1714f5bd563b","modified":1619825684062},{"_id":"themes/cactus-of/languages/tr.yml","hash":"7971cbff7f90ffe1dc40402be6332890be1ed2c7","modified":1619825684062},{"_id":"themes/cactus-of/languages/zh-CN.yml","hash":"d4ee3ab34b7d34f51b81be813df92f123fafe39a","modified":1619825684063},{"_id":"themes/cactus-of/languages/vi.yml","hash":"1a1dfc60e952c3429c038f69a9e0ca2057784fca","modified":1619825684063},{"_id":"themes/cactus-of/languages/zh-TW.yml","hash":"d02ac645f87c5841ff35499818654df85bd872f5","modified":1619825684064},{"_id":"themes/cactus-of/layout/layout.ejs","hash":"e14f83a23128ce0d4208f04f419363fd7d0cab18","modified":1619825684079},{"_id":"themes/cactus-of/layout/archive.ejs","hash":"3009339c4258c63943a14a61481dcb358b63e98f","modified":1619825684078},{"_id":"themes/cactus-of/scripts/merge-configs.js","hash":"98b79403945fa7f8dc177e6da283681677d02567","modified":1619825684082},{"_id":"themes/cactus-of/scripts/meta.js","hash":"6b05bc75ab2478a1f01deab46919164895eb1f6d","modified":1619825684082},{"_id":"themes/cactus-of/scripts/page_title.js","hash":"03b5c8b6215f0b305327e8d9b5d49add83b4b95f","modified":1619825684083},{"_id":"themes/cactus-of/scripts/thumbnail.js","hash":"3d841aa267026703a5cc29f4ffbb613f0a2bbd45","modified":1619825684086},{"_id":"themes/cactus-of/layout/_partial/comments.ejs","hash":"fc4bc4421f2ed388b30fd3e63cba30f66c0df331","modified":1619825684065},{"_id":"themes/cactus-of/layout/page.ejs","hash":"1700d4f434170e1eeb0e2a9470fc3c0732b2ba7e","modified":1619825684080},{"_id":"themes/cactus-of/layout/post.ejs","hash":"48bf7c2ef2477dc58e49488d7612e88d8235bb48","modified":1619825684080},{"_id":"themes/cactus-of/layout/_partial/footer.ejs","hash":"a8ceda737398baa266cd4922a72a4c66a1751854","modified":1619825684066},{"_id":"themes/cactus-of/layout/index.ejs","hash":"71f69d2f389e88f89c4cbdc6c3d09bec819d60db","modified":1619825684078},{"_id":"themes/cactus-of/layout/_partial/header.ejs","hash":"d14fcd2002309c55e3d60c71699bd077a62809ba","modified":1619825684068},{"_id":"themes/cactus-of/layout/_partial/pagination.ejs","hash":"f561e68e9dd10ae1cf2e79e8425f7e9b86ed723e","modified":1619825684069},{"_id":"themes/cactus-of/layout/_partial/search.ejs","hash":"12dba799ae5736dfbf1548e1923bbb7447de8a6d","modified":1619825684077},{"_id":"themes/cactus-of/source/css/_extend.styl","hash":"1b9b2c69b894343068f3384000581a6092c4e868","modified":1619825684090},{"_id":"themes/cactus-of/layout/_partial/styles.ejs","hash":"b7cf29a0cbe44d93766f89113ba3cfd832e75dfb","modified":1619825684077},{"_id":"themes/cactus-of/layout/_partial/head.ejs","hash":"80ce6a686e39a107d486479fb3d40962317ce2b5","modified":1619825684066},{"_id":"themes/cactus-of/source/css/_util.styl","hash":"1c7bed7376f04d7b77d817e132aee08cf65e6395","modified":1619825684170},{"_id":"themes/cactus-of/source/css/_fonts.styl","hash":"5c1727836f5d6076a65cf91dbbeaba8d16b5132b","modified":1619825684091},{"_id":"themes/cactus-of/source/css/_mixins.styl","hash":"37093d2a554283ab652b59e5e0ff9b542edced0f","modified":1619825684156},{"_id":"themes/cactus-of/source/css/_variables.styl","hash":"5dcbf89bd23d9dd3c45d07049a1448b0ae95426b","modified":1619825684171},{"_id":"themes/cactus-of/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1619825684174},{"_id":"themes/cactus-of/source/images/favicon-192x192.png","hash":"61c293ce1fcd4bfeb03a2ecd7b575e684dd773ce","modified":1619825684175},{"_id":"themes/cactus-of/source/css/rtl.styl","hash":"105284f992de848968d818f6200d2ebbdd5342d0","modified":1619825684172},{"_id":"themes/cactus-of/source/css/style.styl","hash":"443a57ed26853291b827093780ffac3095e6ae1b","modified":1669156904434},{"_id":"themes/cactus-of/source/js/main.js","hash":"bad144490654ac2518d15e82f426ecbd66b22fd5","modified":1619825684179},{"_id":"themes/cactus-of/source/images/favicon.ico","hash":"560e3e2a6073bed4a0d35c647d8b3d5d1ec6fbd2","modified":1619825684176},{"_id":"themes/cactus-of/layout/_partial/post/actions_desktop.ejs","hash":"684ab77be954f73853ee9407567b4c5c0ef6af74","modified":1619825684070},{"_id":"themes/cactus-of/source/js/search.js","hash":"4eb1ffb352760a7fd3748e42846b5e726ae854f2","modified":1619825684180},{"_id":"themes/cactus-of/layout/_partial/post/actions_mobile.ejs","hash":"c8d06799755147a64cdd0cb2728d3ce46a044dae","modified":1619825684071},{"_id":"themes/cactus-of/layout/_partial/scripts.ejs","hash":"3fa0f784f6a9d8d23f1fd85a98b6a5977754b7b2","modified":1619825684076},{"_id":"themes/cactus-of/layout/_partial/post/excerpt.ejs","hash":"3b8c90803c1c65ca067b39ade5a4fcc1a451207c","modified":1619825684073},{"_id":"themes/cactus-of/layout/_partial/post/category.ejs","hash":"75567a2de037857cb3e4c9fc5fc87094a23fb119","modified":1619825684072},{"_id":"themes/cactus-of/layout/_partial/post/gallery.ejs","hash":"725ab823c2fb4a5e444eca3afa617d88f305ef71","modified":1619825684074},{"_id":"themes/cactus-of/layout/_partial/post/share.ejs","hash":"9c8eb57164e63d8563966ab901957c095ea60038","modified":1619825684074},{"_id":"themes/cactus-of/layout/_partial/post/title.ejs","hash":"67da1757316408a72393e6d2aab4ec635e1d30c1","modified":1619825684075},{"_id":"themes/cactus-of/layout/_partial/post/date.ejs","hash":"bb624f77d29594b8d3a7dd82f1aee6eead6b9b61","modified":1619825684072},{"_id":"themes/cactus-of/layout/_partial/post/tag.ejs","hash":"98fe03d5a8835dbc22869d519cc5b5f48808b1e5","modified":1619825684075},{"_id":"themes/cactus-of/source/css/_colors/classic.styl","hash":"750cae11fd67684c0b9f73892e9b4dc0b18e6e59","modified":1619825684087},{"_id":"themes/cactus-of/source/css/_colors/dark.styl","hash":"2c949ae926ae73ef5e5e7b7ebe8ba173d6afd234","modified":1619825684088},{"_id":"themes/cactus-of/source/css/_colors/light.styl","hash":"9d6e813e1612dd51f9e41038376348c561bd33bd","modified":1619825684089},{"_id":"themes/cactus-of/source/css/_colors/white.styl","hash":"6aef2765112d3daa32fb770dc7c5ea478c7baf3d","modified":1619825684090},{"_id":"themes/cactus-of/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1619825684092},{"_id":"themes/cactus-of/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1619825684093},{"_id":"themes/cactus-of/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1619825684093},{"_id":"themes/cactus-of/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1619825684095},{"_id":"themes/cactus-of/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1619825684095},{"_id":"themes/cactus-of/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1619825684096},{"_id":"themes/cactus-of/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1619825684094},{"_id":"themes/cactus-of/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1619825684096},{"_id":"themes/cactus-of/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1619825684098},{"_id":"themes/cactus-of/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1619825684097},{"_id":"themes/cactus-of/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1619825684099},{"_id":"themes/cactus-of/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1619825684098},{"_id":"themes/cactus-of/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1619825684102},{"_id":"themes/cactus-of/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1619825684099},{"_id":"themes/cactus-of/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1619825684104},{"_id":"themes/cactus-of/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1619825684103},{"_id":"themes/cactus-of/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1619825684104},{"_id":"themes/cactus-of/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1619825684105},{"_id":"themes/cactus-of/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1619825684106},{"_id":"themes/cactus-of/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1619825684106},{"_id":"themes/cactus-of/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1619825684107},{"_id":"themes/cactus-of/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1619825684107},{"_id":"themes/cactus-of/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1619825684108},{"_id":"themes/cactus-of/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1619825684109},{"_id":"themes/cactus-of/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1619825684111},{"_id":"themes/cactus-of/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1619825684110},{"_id":"themes/cactus-of/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1619825684113},{"_id":"themes/cactus-of/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1619825684109},{"_id":"themes/cactus-of/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1619825684112},{"_id":"themes/cactus-of/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1619825684114},{"_id":"themes/cactus-of/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1619825684114},{"_id":"themes/cactus-of/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1619825684115},{"_id":"themes/cactus-of/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1619825684116},{"_id":"themes/cactus-of/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1619825684117},{"_id":"themes/cactus-of/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1619825684119},{"_id":"themes/cactus-of/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1619825684120},{"_id":"themes/cactus-of/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1619825684120},{"_id":"themes/cactus-of/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1619825684122},{"_id":"themes/cactus-of/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1619825684123},{"_id":"themes/cactus-of/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1619825684123},{"_id":"themes/cactus-of/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1619825684124},{"_id":"themes/cactus-of/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1619825684125},{"_id":"themes/cactus-of/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1619825684126},{"_id":"themes/cactus-of/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1619825684127},{"_id":"themes/cactus-of/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1619825684127},{"_id":"themes/cactus-of/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1619825684128},{"_id":"themes/cactus-of/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1619825684129},{"_id":"themes/cactus-of/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1619825684130},{"_id":"themes/cactus-of/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1619825684121},{"_id":"themes/cactus-of/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1619825684131},{"_id":"themes/cactus-of/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1619825684132},{"_id":"themes/cactus-of/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1619825684133},{"_id":"themes/cactus-of/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1619825684137},{"_id":"themes/cactus-of/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1619825684136},{"_id":"themes/cactus-of/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1619825684139},{"_id":"themes/cactus-of/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1619825684137},{"_id":"themes/cactus-of/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1619825684138},{"_id":"themes/cactus-of/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1619825684142},{"_id":"themes/cactus-of/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1619825684140},{"_id":"themes/cactus-of/source/css/_highlight/pojoaque.styl","hash":"4d4a9360c35f3c5a0c5b9b49a1f2284e7e21317b","modified":1619825684140},{"_id":"themes/cactus-of/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1619825684143},{"_id":"themes/cactus-of/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1619825684141},{"_id":"themes/cactus-of/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1619825684145},{"_id":"themes/cactus-of/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1619825684144},{"_id":"themes/cactus-of/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1619825684146},{"_id":"themes/cactus-of/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1619825684147},{"_id":"themes/cactus-of/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1619825684148},{"_id":"themes/cactus-of/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1619825684149},{"_id":"themes/cactus-of/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1619825684151},{"_id":"themes/cactus-of/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1619825684153},{"_id":"themes/cactus-of/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1619825684154},{"_id":"themes/cactus-of/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1619825684154},{"_id":"themes/cactus-of/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1619825684155},{"_id":"themes/cactus-of/source/css/_partial/archive.styl","hash":"c89529b82ff8bd059384aedf36e7690a9a67da7a","modified":1619825684157},{"_id":"themes/cactus-of/source/css/_partial/article.styl","hash":"1101e1dd5a763bc415b60fa66471a913f6ebfa40","modified":1619825684157},{"_id":"themes/cactus-of/source/css/_partial/comments.styl","hash":"6e839bae0ddc11447579c34541e79b50d3670bbd","modified":1619825684159},{"_id":"themes/cactus-of/source/css/_partial/footer.styl","hash":"2bfb5dded634deaa4837c2e6f18ea14a1b86ec7d","modified":1619825684160},{"_id":"themes/cactus-of/source/css/_partial/categories.styl","hash":"92fffe2baacb9d19021b3d120d2038417ca466df","modified":1619825684158},{"_id":"themes/cactus-of/source/css/_partial/header.styl","hash":"25538f8114e3b31d885bc6421451fdeee3f038b1","modified":1619825684161},{"_id":"themes/cactus-of/source/css/_partial/index.styl","hash":"9e2d38baa0181be97fd6bcde335ba58393dd9d99","modified":1619825684162},{"_id":"themes/cactus-of/source/css/_partial/search.styl","hash":"680ea535e5a20c01a31bee4d3eb680b86267a281","modified":1619825684166},{"_id":"themes/cactus-of/source/css/_partial/pagination.styl","hash":"4ff9755163aae6039bb72eac8360bc1c50fa26b6","modified":1619825684163},{"_id":"themes/cactus-of/source/css/_partial/tags.styl","hash":"7a2f9051b21bce525ecb71799d37c4b65a4f9171","modified":1619825684168},{"_id":"themes/cactus-of/source/css/_partial/tooltip.styl","hash":"6cb13a9f4a7c01aa7ab8f73739a7d385377c5465","modified":1619825684170},{"_id":"themes/cactus-of/source/lib/clipboard/clipboard.min.js","hash":"dc144353ec85169bb3c5f3c6d68b4e75f9bf28ea","modified":1619825684183},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1619825684314},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1619825684313},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1619825684319},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1619825684320},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1619825684325},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1619825684326},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1619825684331},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1619825684332},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1619825684338},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1619825684339},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1619825684345},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1619825684344},{"_id":"themes/cactus-of/source/lib/vazir-font/font-face.css","hash":"719198d581ee5fadac8787011298e100eda4c5ad","modified":1619825684346},{"_id":"themes/cactus-of/source/css/_partial/post/actions_mobile.styl","hash":"b06410ed34b5ecbcac11357aa359149e1f827aa6","modified":1619825684165},{"_id":"themes/cactus-of/source/css/_partial/post/actions_desktop.styl","hash":"b5b249c25c7eb598a9974eb2a27b7be8e04990d8","modified":1619825684164},{"_id":"themes/cactus-of/source/lib/font-awesome/css/all.min.css","hash":"123ced2b72d2a4f49f93fcbf6b858a449edec74b","modified":1619825684188},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1619825684215},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1619825684221},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1619825684222},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1619825684223},{"_id":"themes/cactus-of/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"a21698ea1b6caf22116d82e27c81115b8d5e9dcc","modified":1619825684253},{"_id":"themes/cactus-of/source/images/logo.png","hash":"e78dc8a8437da6425e8877d30aa558a07b6e7d91","modified":1619825684177},{"_id":"themes/cactus-of/source/lib/jquery/jquery.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1619825684251},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1619825684310},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1619825684311},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1619825684315},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1619825684318},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1619825684322},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1619825684324},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1619825684328},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1619825684330},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1619825684334},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1619825684337},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1619825684341},{"_id":"themes/cactus-of/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1619825684343},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1619825684212},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1619825684213},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1619825684248},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1619825684247},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1619825684191},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"c850047f1833b5a03b44ab47cb630fc39fa6bc45","modified":1619825684219},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1619825684211},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1619825684229},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1619825684245},{"_id":"themes/cactus-of/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1619825684254},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1619825684266},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1619825684285},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1619825684299},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1619825684273},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1619825684289},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1619825684304},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1619825684262},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1619825684276},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1619825684279},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1619825684293},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1619825684297},{"_id":"themes/cactus-of/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1619825684308},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"201f1f1e7e22aacadcf8050816a15a584fc9d135","modified":1619825684204},{"_id":"themes/cactus-of/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"e9f30a24d1ccf44af5ba29a7c26e41af6dc92e9d","modified":1619825684241},{"_id":"source/_drafts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories.md","hash":"349e42e59f2b070dda0c4ae644286b65654f4237","modified":1668818470033},{"_id":"source/_drafts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image001.png","hash":"62e2ded12e14d9f0a67ac092473bb8abf8d38e48","modified":1668816966260},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image001.png","hash":"225a113a2556cca86c8fa7b79189089e92184e0b","modified":1669151487205},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories.md","hash":"f0db31408567accf61515cbbb026dea973c85a57","modified":1670370565365},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image002.png","hash":"f7f85226982f1a463d6a15f4de6a34c050fc5fe6","modified":1669155928529},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image003.png","hash":"3fc76320051b8fe5adced092d0aacde233ab16fc","modified":1669323322311},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image004.png","hash":"3d5e84c4bcbc936b767ea72f4b7117ceccc850c2","modified":1669327181425},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image005.png","hash":"47db72c815594b9c5a9c53c82a2d223a87b3d765","modified":1669327940807},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006a.png","hash":"ca6965ab1e474438ba2bca591404355dff7145e7","modified":1670021767480},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006b.png","hash":"5a55d81dd18c81bef20e940ca44c07285d4214b0","modified":1670021778258},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image007.png","hash":"7ce5df7ef19a177e6c47bbf6455da511569c1d19","modified":1670024177420},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image011.png","hash":"29a8bd7bbf84693bfdc19e7a2fd5026345dcd278","modified":1670367336702},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image012.png","hash":"39def25a23eb8e9037c8471226b94de7eb563655","modified":1670367780167},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image008.png","hash":"01c508c5b2e810ad1db49137b3a27bca423531b6","modified":1670026417614},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image009.png","hash":"db5c2c8aa29fc7e83bf28a2fbe6fb865de2e091d","modified":1670354154202},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image010.png","hash":"475843223bad70dfd12e8862f198f0e845a789d0","modified":1670354928173},{"_id":"public/rss.xml","hash":"b9fc7016245735e061ea2e5548bc0c821541ad69","modified":1670370577787},{"_id":"public/sitemap.xml","hash":"3809449c350bf84edae0d978409f994e79a37690","modified":1670370577787},{"_id":"public/D365-Typescript/index.html","hash":"713a01da823fb9e6ae262f7724a6823ca64bf4ef","modified":1670369680731},{"_id":"public/Me/index.html","hash":"297243d1995ef8d8ef07f3ff4c03500647a92db9","modified":1670369680731},{"_id":"public/categories/index.html","hash":"2a5e08fa8ed98c31860c08bfc6fd39718aa15f81","modified":1670369680731},{"_id":"public/2020/03/06/Welcome/index.html","hash":"8be3322506bc3f5d43f122ad16a4abaf06ffbd94","modified":1670369680731},{"_id":"public/archives/index.html","hash":"ca52aabd5cda11aa5d5a83f4f09ce5e92786d760","modified":1670370577787},{"_id":"public/archives/page/2/index.html","hash":"326d4aa336b44c9a1aaa12577124c6f899ead66b","modified":1670369680731},{"_id":"public/archives/2020/index.html","hash":"9306366c8eb69595dea7fe3f7498df342c621cd4","modified":1670369680731},{"_id":"public/archives/2020/03/index.html","hash":"fbe8c52097e186dbac1ac69240d6470c7d168f07","modified":1670369680731},{"_id":"public/archives/2020/04/index.html","hash":"d08ebd11dad491e6363e83d558097afea9503d6f","modified":1670369680731},{"_id":"public/archives/2020/06/index.html","hash":"a0b9accbab6f0ed101a3d6099bf71622a73c21b9","modified":1670369680731},{"_id":"public/archives/2021/index.html","hash":"cd18358c3b49c7e6fab26b3d2d5982b8c6252bde","modified":1670369680731},{"_id":"public/archives/2021/01/index.html","hash":"65e7b079f6ccb531bb35993ec31e5caf052c5559","modified":1670369680731},{"_id":"public/archives/2021/04/index.html","hash":"63ce8133d8950a1480b893c1c6fe60202fe1ee9b","modified":1670369680731},{"_id":"public/archives/2022/index.html","hash":"d9342f8d83c3192bd1d3e06e065db9365b9aa06e","modified":1670370577787},{"_id":"public/archives/2022/11/index.html","hash":"324b7078f61bd6bc81ac30d9755e45ffc609faa3","modified":1670369680731},{"_id":"public/categories/D365-TypeScript/index.html","hash":"4be207142744604877ff4c355a98d31320ef0f0e","modified":1670369680731},{"_id":"public/categories/Power-Apps-Component-Framework/index.html","hash":"c96ba4393f3f0ba6747b6b4c0a9c1285259aa1c9","modified":1670369680731},{"_id":"public/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/index.html","hash":"5ec8564e1931f2e5223711fd7bb4d1effb1d9d99","modified":1670369680731},{"_id":"public/categories/Azure/index.html","hash":"cf5f35218bf97f38ce105f9195b0998e92a6ad69","modified":1670370577787},{"_id":"public/categories/Azure/DevOps/index.html","hash":"ed576b6646791fe201d9ef0d075383cfe6620b5b","modified":1670370577787},{"_id":"public/index.html","hash":"228885890e912576b9453b464a5216c50d203d13","modified":1670370577787},{"_id":"public/page/2/index.html","hash":"959d9fdef6da69d76fab70bc05cd05a99f52969e","modified":1670370577787},{"_id":"public/tags/D365/index.html","hash":"36fa86addad30c8f83d227147f03333185924b13","modified":1670369680731},{"_id":"public/tags/Web-Resources/index.html","hash":"7683a2e5ee3260b703b3ad833327f35121a9f40c","modified":1670369680731},{"_id":"public/tags/TypeScript/index.html","hash":"77b61e3c375ff880ff8536f8741171a605ab81ad","modified":1670369680731},{"_id":"public/tags/JavaScript/index.html","hash":"e2da26f6135373156bc5d2052c0d84b5a04d922f","modified":1670369680731},{"_id":"public/tags/Webpack/index.html","hash":"7819edaf753497fc4d3bcb5c68d9683e5404bf71","modified":1670369680731},{"_id":"public/tags/Babel/index.html","hash":"39510505b54974686583a6204ac4a689b0367b9b","modified":1670369680731},{"_id":"public/tags/ES-Modules/index.html","hash":"615c27c336a90eaa160f365fbd0468c381433344","modified":1670369680731},{"_id":"public/tags/Debugging/index.html","hash":"e20cdd62be2f02b815ee22421ab42b6572d9e760","modified":1670369680731},{"_id":"public/tags/XrmDefinitelyTyped/index.html","hash":"f9ecb234081cb73376023377bd4ba28b2bfb1472","modified":1670369680731},{"_id":"public/tags/Unit-Testing/index.html","hash":"ab94f4f3b9d5e8ba0d36ea09ce430db55b52e3ba","modified":1670369680731},{"_id":"public/tags/Jest/index.html","hash":"01c8067b0029ecde424369976e0ba179959bfa9c","modified":1670369680731},{"_id":"public/tags/XrmMock/index.html","hash":"5f44f53aed6be332054aac56d4b654330fe35a06","modified":1670369680731},{"_id":"public/tags/PCF/index.html","hash":"6d93bb7fd73f4756b25b66df7d2e365178a0ec32","modified":1670369680731},{"_id":"public/tags/Power-Apps/index.html","hash":"8251a0d1a408d9421b86f9774e5077b3b3da0ff4","modified":1670369680731},{"_id":"public/tags/Power-Apps-Component-Framework/index.html","hash":"de0bf1419f5803f960c67ebc5d1993b196316c0c","modified":1670369680731},{"_id":"public/tags/welcome/index.html","hash":"cc86098881caacf4b9e3a5ed76cc4bf388f67ed6","modified":1670369680731},{"_id":"public/tags/oliver-flint/index.html","hash":"2a2ae4c553438239f1ca08fb2dbc797855388818","modified":1670369680731},{"_id":"public/tags/Azure/index.html","hash":"54cb53b73956bf9957bca57db4b54ad1fc11e8a9","modified":1670370577787},{"_id":"public/tags/DevOps/index.html","hash":"cfab76071710e89aee869b64d122842179b02ddf","modified":1670370577787},{"_id":"public/tags/Stale/index.html","hash":"8b0fd9134eb369013e9791c0b5d9d684c3f11f46","modified":1670370577787},{"_id":"public/tags/Branches/index.html","hash":"c1b625a4ea5b421b77e371cf25071d0bef70db74","modified":1670370577787},{"_id":"public/tags/Power-Automate/index.html","hash":"4249ff25f1eb5abc148c3f515ee94fd3581b574e","modified":1670370577787},{"_id":"public/tags/Flow/index.html","hash":"f98f31dd145047b830a905fd587a5fc20e790a05","modified":1670370577787},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/index.html","hash":"52b0764dc8b50f229bc94f89cf576b02a2dd90f2","modified":1670370515423},{"_id":"public/2021/04/30/D365-Typescript-Webresources-Part-6/index.html","hash":"513325f6b74672d840f6d7d9fac6a40da31baf74","modified":1670370577787},{"_id":"public/2021/01/22/D365-Typescript-Webresources-Part-5/index.html","hash":"12223f19a6a3b8e4c78243516d66999cb185237e","modified":1670369680731},{"_id":"public/2020/06/11/PCF-WebApi-execute/index.html","hash":"521df7e815cf6cfd20a856cd7d8c497040a4e5bd","modified":1670369680731},{"_id":"public/2020/06/10/PCF-primary-entity-info/index.html","hash":"98416ef8018ec09234a98cc69583689693652fbb","modified":1670369680731},{"_id":"public/2020/06/06/PCF-and-Form-Communication/index.html","hash":"090eb3de025cd414578b09737d491c2d5df55ac3","modified":1670369680731},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/index.html","hash":"34aa36f0d70dbe990c651da3e8ce6d8c64a97e33","modified":1670369680731},{"_id":"public/2020/04/04/D365-Typescript-Webresources-Part-3/index.html","hash":"99477da235b87d4b78e565a341ccff8a5e9cf4a3","modified":1670369680731},{"_id":"public/2020/03/08/D365-Typescript-Webresources-Part-2/index.html","hash":"cd5cc2d47ce6f9beb956e67d550eaf102593ca41","modified":1670369680731},{"_id":"public/2020/03/07/D365-Typescript-Webresources-Part-1/index.html","hash":"8a4495cdb8e71ecd8a9c539c3b8ab5ca40acdee7","modified":1670369680731},{"_id":"public/images/favicon.ico","hash":"560e3e2a6073bed4a0d35c647d8b3d5d1ec6fbd2","modified":1670368782317},{"_id":"public/CNAME","hash":"d0f0a3623e572abc5a910e26f500577094909f89","modified":1670368782317},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1670368782317},{"_id":"public/images/favicon-192x192.png","hash":"61c293ce1fcd4bfeb03a2ecd7b575e684dd773ce","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/ChromeOpenFile.png","hash":"35bbc979bd4b6312d8979ed9449d078ac9f444f1","modified":1670368782317},{"_id":"public/2020/03/07/D365-Typescript-Webresources-Part-1/files1.png","hash":"1473889010343b77d3ba704721ca99d9aa7df0ca","modified":1670368782317},{"_id":"public/2020/03/07/D365-Typescript-Webresources-Part-1/d365ts-pt1.zip","hash":"de936fc415d8caad8b8cb6587b430326e0595202","modified":1670368782317},{"_id":"public/2020/03/07/D365-Typescript-Webresources-Part-1/form-event.png","hash":"36a8b5b8f24426b50d75050a48d282b46428372c","modified":1670368782317},{"_id":"public/2020/04/04/D365-Typescript-Webresources-Part-3/build-output.png","hash":"bdd36bfdc0180972e4bdbc4d29a94ae7f7c04500","modified":1670368782317},{"_id":"public/2020/04/04/D365-Typescript-Webresources-Part-3/d365ts-pt3.zip","hash":"18e583ba96f0c57b406d1f0d6f100293c08e3186","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/d365ts-pt4.zip","hash":"5a205f9ff0f7c704bf947d062fe23bb45568e803","modified":1670368782317},{"_id":"public/2020/03/08/D365-Typescript-Webresources-Part-2/d365ts-pt2.zip","hash":"d81882c7eb5e7b41e19d70e1667e30286632a349","modified":1670368782317},{"_id":"public/2020/06/11/PCF-WebApi-execute/pcf-webapi.png","hash":"d1b777af7053bf679b6d12a73099f1b203cda64a","modified":1670368782317},{"_id":"public/2020/06/10/PCF-primary-entity-info/pcf-entityinfo.png","hash":"b8201b1545ae2be7be058b19697e26fab08e5beb","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image002.png","hash":"f7f85226982f1a463d6a15f4de6a34c050fc5fe6","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image003.png","hash":"3fc76320051b8fe5adced092d0aacde233ab16fc","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image004.png","hash":"3d5e84c4bcbc936b767ea72f4b7117ceccc850c2","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image005.png","hash":"47db72c815594b9c5a9c53c82a2d223a87b3d765","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006a.png","hash":"ca6965ab1e474438ba2bca591404355dff7145e7","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006b.png","hash":"5a55d81dd18c81bef20e940ca44c07285d4214b0","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image007.png","hash":"7ce5df7ef19a177e6c47bbf6455da511569c1d19","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image011.png","hash":"29a8bd7bbf84693bfdc19e7a2fd5026345dcd278","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image012.png","hash":"39def25a23eb8e9037c8471226b94de7eb563655","modified":1670368782317},{"_id":"public/2020/06/06/PCF-and-Form-Communication/custom-events.svg","hash":"1532dab10b8b6c19f6d932a42276965207ca81e5","modified":1670368782317},{"_id":"public/2020/06/06/PCF-and-Form-Communication/custom-events.yuml","hash":"dcf7b0bdd76a477e47736f1405287539ddb74d3f","modified":1670368782317},{"_id":"public/images/logo.png","hash":"e78dc8a8437da6425e8877d30aa558a07b6e7d91","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1670368782317},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/ChromeBreakpoint.png","hash":"ffae86e7044b51720ba4e6a46be20b9079218345","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/ReallyPointless.png","hash":"1708bea878851dd5d33968b61458c72e990d91d7","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/StepInto.png","hash":"c496b6a8465d2b73a8e9abf50083755d8edf5b49","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/DebugSampleModule.png","hash":"178c07df63f7fb65a3daea950af7655b318a6958","modified":1670368782317},{"_id":"public/2020/03/07/D365-Typescript-Webresources-Part-1/formnotification.png","hash":"2d37b5fae5ebbe8045610bd5fe40cc256caaf511","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/AutoResponderTab.png","hash":"59878d2cea11de099710da0a2dc97f4c205e0fce","modified":1670368782317},{"_id":"public/2021/04/30/D365-Typescript-Webresources-Part-6/detail.png","hash":"fb704cd696697156eb60426fc228db521f3fb691","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image001.png","hash":"225a113a2556cca86c8fa7b79189089e92184e0b","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image008.png","hash":"01c508c5b2e810ad1db49137b3a27bca423531b6","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image009.png","hash":"db5c2c8aa29fc7e83bf28a2fbe6fb865de2e091d","modified":1670368782317},{"_id":"public/2022/11/24/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image010.png","hash":"475843223bad70dfd12e8862f198f0e845a789d0","modified":1670368782317},{"_id":"public/2021/01/22/D365-Typescript-Webresources-Part-5/d365ts-pt5.zip","hash":"030a10ff0a78cc9892bf81a2a6edec4997e8e852","modified":1670368782317},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1670368782317},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1670368782317},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1670368782317},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1670368782317},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1670368782317},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1670368782317},{"_id":"public/css/style.css","hash":"a0677ca95c064e6011a274c3a854fe8cc68eafcf","modified":1670368782317},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1670368782317},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1670368782317},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"c850047f1833b5a03b44ab47cb630fc39fa6bc45","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1670368782317},{"_id":"public/2020/04/11/D365-Typescript-WebResources-Part-4/AutoResponderRule.png","hash":"30e356f27a0d2ac74098417ecfc2e3ad71d37f6a","modified":1670368782317},{"_id":"public/2020/03/08/D365-Typescript-Webresources-Part-2/type-infer-1.png","hash":"5ff44cb51a641b845c0d1392698f7bdecdd1af54","modified":1670368782317},{"_id":"public/2020/03/08/D365-Typescript-Webresources-Part-2/type-infer-2.png","hash":"b1bb91d965a0d590d162de862edcb411eed1b49d","modified":1670368782317},{"_id":"public/2021/04/30/D365-Typescript-Webresources-Part-6/log.png","hash":"ec05d3b53e2d1e262762c4ab8de1b12fee26bb92","modified":1670368782317},{"_id":"public/2021/04/30/D365-Typescript-Webresources-Part-6/d365ts-pt6.zip","hash":"4ab1147f823b946eabf01d2480c6698502d80855","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1670368782317},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"201f1f1e7e22aacadcf8050816a15a584fc9d135","modified":1670368782317},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"e9f30a24d1ccf44af5ba29a7c26e41af6dc92e9d","modified":1670368782317},{"_id":"public/tags/Logic-Apps/index.html","hash":"fce1d3fc3c30d87326f3750bdd212567bdfa492d","modified":1670370577787},{"_id":"public/archives/2022/12/index.html","hash":"af282b8d9ac8e95509c69eab4241727d19f35fc8","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/index.html","hash":"d1bfd782bc1505a0d7a26b4735889e3f4a797626","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image002.png","hash":"f7f85226982f1a463d6a15f4de6a34c050fc5fe6","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image003.png","hash":"3fc76320051b8fe5adced092d0aacde233ab16fc","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image004.png","hash":"3d5e84c4bcbc936b767ea72f4b7117ceccc850c2","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006a.png","hash":"ca6965ab1e474438ba2bca591404355dff7145e7","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image005.png","hash":"47db72c815594b9c5a9c53c82a2d223a87b3d765","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006b.png","hash":"5a55d81dd18c81bef20e940ca44c07285d4214b0","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image007.png","hash":"7ce5df7ef19a177e6c47bbf6455da511569c1d19","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image011.png","hash":"29a8bd7bbf84693bfdc19e7a2fd5026345dcd278","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image012.png","hash":"39def25a23eb8e9037c8471226b94de7eb563655","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image001.png","hash":"225a113a2556cca86c8fa7b79189089e92184e0b","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image008.png","hash":"01c508c5b2e810ad1db49137b3a27bca423531b6","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image009.png","hash":"db5c2c8aa29fc7e83bf28a2fbe6fb865de2e091d","modified":1670370577787},{"_id":"public/2022/12/06/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image010.png","hash":"475843223bad70dfd12e8862f198f0e845a789d0","modified":1670370577787}],"Category":[{"name":"D365 TypeScript","_id":"ckyhky4co0007xsum3am5ahq9"},{"name":"Power Apps Component Framework","_id":"ckyhky4d8000nxsumhnyy8fn1"},{"name":"PCF Tips 'n' Tricks","parent":"ckyhky4d8000nxsumhnyy8fn1","_id":"ckyhky4de0010xsum70y27ty9"},{"name":"Azure","_id":"clan3oevt0001f8umg990f9wj"},{"name":"DevOps","parent":"clan3oevt0001f8umg990f9wj","_id":"clan3oew80004f8umf5xl2vvx"}],"Data":[],"Page":[{"title":"D365 Typescript","date":"2020-04-05T16:26:56.000Z","_content":"# D365 Typescript\n\nIn this series I'll try to cover the basics of using Typescript to develop Web Resources for Dynamics 365. The opinions within this series are my own and at no point do I claim to be a master. Lots of what I'll talk about is based on my own experience and learning. I may have done some things badly and if so I'm all ears!\n\nMy reasons for writing this series are based on past experience where projects have been plagued with badly written JavaScript. Typescript goes some of the way to helping developers write well structured syntactically correct JavaScript. Add to that Unit Testing, Automated Deployment, Telemetry and Logging, and you have yourself a much more robust, maintainable and supportable set of JavaScript web resources.\n\nThe series will cover the following:\n- A basic config for Typescript development\n- Type declarations for D365\n- Use of Webpack and Babel\n- Using ES Modules\n- Debugging and Source Maps\n- Unit Testing\n- ESLint\n- TypeDoc\n- Integrating Azure App Insights\n- Automating deployment\n- Some methods and patterns of my own\n- and maybe more...\n\nHopefully it will provide the knowledge for others to adopt similar approaches to developing and maintaining JavaScript web resources within D365.\n\nAnyway, enough of my waffle! Go and check out the series [here](/categories/D365-Typescript/).","source":"D365-Typescript/index.md","raw":"---\ntitle: D365 Typescript\ndate: 2020-04-05 16:26:56\n---\n# D365 Typescript\n\nIn this series I'll try to cover the basics of using Typescript to develop Web Resources for Dynamics 365. The opinions within this series are my own and at no point do I claim to be a master. Lots of what I'll talk about is based on my own experience and learning. I may have done some things badly and if so I'm all ears!\n\nMy reasons for writing this series are based on past experience where projects have been plagued with badly written JavaScript. Typescript goes some of the way to helping developers write well structured syntactically correct JavaScript. Add to that Unit Testing, Automated Deployment, Telemetry and Logging, and you have yourself a much more robust, maintainable and supportable set of JavaScript web resources.\n\nThe series will cover the following:\n- A basic config for Typescript development\n- Type declarations for D365\n- Use of Webpack and Babel\n- Using ES Modules\n- Debugging and Source Maps\n- Unit Testing\n- ESLint\n- TypeDoc\n- Integrating Azure App Insights\n- Automating deployment\n- Some methods and patterns of my own\n- and maybe more...\n\nHopefully it will provide the knowledge for others to adopt similar approaches to developing and maintaining JavaScript web resources within D365.\n\nAnyway, enough of my waffle! Go and check out the series [here](/categories/D365-Typescript/).","updated":"2021-04-30T23:34:44.002Z","path":"D365-Typescript/index.html","comments":1,"layout":"page","_id":"ckyhky4c30000xsum84al64rs","content":"<h1 id=\"D365-Typescript\"><a href=\"#D365-Typescript\" class=\"headerlink\" title=\"D365 Typescript\"></a>D365 Typescript</h1><p>In this series I’ll try to cover the basics of using Typescript to develop Web Resources for Dynamics 365. The opinions within this series are my own and at no point do I claim to be a master. Lots of what I’ll talk about is based on my own experience and learning. I may have done some things badly and if so I’m all ears!</p>\n<p>My reasons for writing this series are based on past experience where projects have been plagued with badly written JavaScript. Typescript goes some of the way to helping developers write well structured syntactically correct JavaScript. Add to that Unit Testing, Automated Deployment, Telemetry and Logging, and you have yourself a much more robust, maintainable and supportable set of JavaScript web resources.</p>\n<p>The series will cover the following:</p>\n<ul>\n<li>A basic config for Typescript development</li>\n<li>Type declarations for D365</li>\n<li>Use of Webpack and Babel</li>\n<li>Using ES Modules</li>\n<li>Debugging and Source Maps</li>\n<li>Unit Testing</li>\n<li>ESLint</li>\n<li>TypeDoc</li>\n<li>Integrating Azure App Insights</li>\n<li>Automating deployment</li>\n<li>Some methods and patterns of my own</li>\n<li>and maybe more…</li>\n</ul>\n<p>Hopefully it will provide the knowledge for others to adopt similar approaches to developing and maintaining JavaScript web resources within D365.</p>\n<p>Anyway, enough of my waffle! Go and check out the series <a href=\"/categories/D365-Typescript/\">here</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"D365-Typescript\"><a href=\"#D365-Typescript\" class=\"headerlink\" title=\"D365 Typescript\"></a>D365 Typescript</h1><p>In this series I’ll try to cover the basics of using Typescript to develop Web Resources for Dynamics 365. The opinions within this series are my own and at no point do I claim to be a master. Lots of what I’ll talk about is based on my own experience and learning. I may have done some things badly and if so I’m all ears!</p>\n<p>My reasons for writing this series are based on past experience where projects have been plagued with badly written JavaScript. Typescript goes some of the way to helping developers write well structured syntactically correct JavaScript. Add to that Unit Testing, Automated Deployment, Telemetry and Logging, and you have yourself a much more robust, maintainable and supportable set of JavaScript web resources.</p>\n<p>The series will cover the following:</p>\n<ul>\n<li>A basic config for Typescript development</li>\n<li>Type declarations for D365</li>\n<li>Use of Webpack and Babel</li>\n<li>Using ES Modules</li>\n<li>Debugging and Source Maps</li>\n<li>Unit Testing</li>\n<li>ESLint</li>\n<li>TypeDoc</li>\n<li>Integrating Azure App Insights</li>\n<li>Automating deployment</li>\n<li>Some methods and patterns of my own</li>\n<li>and maybe more…</li>\n</ul>\n<p>Hopefully it will provide the knowledge for others to adopt similar approaches to developing and maintaining JavaScript web resources within D365.</p>\n<p>Anyway, enough of my waffle! Go and check out the series <a href=\"/categories/D365-Typescript/\">here</a>.</p>\n"},{"_content":"# Welcome to my blog\n\n## Here's some info about me\n\n- Name: Oliver Flint\n- Occupation: Tech Nerd, MS Dynamics 365 Solution Architect\n- Hobbies: Tech, Family, Rugby\n- Social:\n- Twitter: [@oliver_flint](https://www.twitter.com/oliver_flint)\n- Github: [@oliverflint](http://github.com/oliverflint)\n- Linkedin: [@oliverflint](https://www.linkedin.com/in/oliverflint)\n\nNow go and read my [blog](/index.html)\n\nMy Blog Series:\n\n- [D365 Typescript](/D365-Typescript/)\n- [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/)\n","source":"Me/index.md","raw":"# Welcome to my blog\n\n## Here's some info about me\n\n- Name: Oliver Flint\n- Occupation: Tech Nerd, MS Dynamics 365 Solution Architect\n- Hobbies: Tech, Family, Rugby\n- Social:\n- Twitter: [@oliver_flint](https://www.twitter.com/oliver_flint)\n- Github: [@oliverflint](http://github.com/oliverflint)\n- Linkedin: [@oliverflint](https://www.linkedin.com/in/oliverflint)\n\nNow go and read my [blog](/index.html)\n\nMy Blog Series:\n\n- [D365 Typescript](/D365-Typescript/)\n- [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/)\n","date":"2021-04-30T23:34:44.003Z","updated":"2021-04-30T23:34:44.003Z","path":"Me/index.html","title":"","comments":1,"layout":"page","_id":"ckyhky4ce0002xsum6b576g7l","content":"<h1 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog\"></a>Welcome to my blog</h1><h2 id=\"Here’s-some-info-about-me\"><a href=\"#Here’s-some-info-about-me\" class=\"headerlink\" title=\"Here’s some info about me\"></a>Here’s some info about me</h2><ul>\n<li>Name: Oliver Flint</li>\n<li>Occupation: Tech Nerd, MS Dynamics 365 Solution Architect</li>\n<li>Hobbies: Tech, Family, Rugby</li>\n<li>Social:</li>\n<li>Twitter: <a href=\"https://www.twitter.com/oliver_flint\">@oliver_flint</a></li>\n<li>Github: <a href=\"http://github.com/oliverflint\">@oliverflint</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/oliverflint\">@oliverflint</a></li>\n</ul>\n<p>Now go and read my <a href=\"/index.html\">blog</a></p>\n<p>My Blog Series:</p>\n<ul>\n<li><a href=\"/D365-Typescript/\">D365 Typescript</a></li>\n<li><a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog\"></a>Welcome to my blog</h1><h2 id=\"Here’s-some-info-about-me\"><a href=\"#Here’s-some-info-about-me\" class=\"headerlink\" title=\"Here’s some info about me\"></a>Here’s some info about me</h2><ul>\n<li>Name: Oliver Flint</li>\n<li>Occupation: Tech Nerd, MS Dynamics 365 Solution Architect</li>\n<li>Hobbies: Tech, Family, Rugby</li>\n<li>Social:</li>\n<li>Twitter: <a href=\"https://www.twitter.com/oliver_flint\">@oliver_flint</a></li>\n<li>Github: <a href=\"http://github.com/oliverflint\">@oliverflint</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/oliverflint\">@oliverflint</a></li>\n</ul>\n<p>Now go and read my <a href=\"/index.html\">blog</a></p>\n<p>My Blog Series:</p>\n<ul>\n<li><a href=\"/D365-Typescript/\">D365 Typescript</a></li>\n<li><a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a></li>\n</ul>\n"},{"title":"categories","type":"categories","date":"2021-01-23T22:25:43.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2021-01-23 22:25:43\n---\n","updated":"2021-04-30T23:34:44.047Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckyhky4ck0005xsumaqk5epbx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Using httpBook with Dataverse to test the web api","description":"Testing the Dataverse WebApi can sometime be a little tedious...","excerpt":"Testing the Dataverse WebApi can sometime be a little tedious...","_content":"\n## Problem\n\nWe all test our code and usage of api's, that's a given. But when writing code to consume the Dataverse WebApi and Custom Dataverse Api's, being able to run quick tests to validate our syntax and usage can sometimes be a little painful and time consuming. There are plenty of options to overcome this and help us, here I am going to talk about one that is becoming my preferred solution to this problem.\n\n## Solution (well, my solution)\n\nOver the years I've used Postman, SoupUI, Insomnia, plus many different VSCode extensions to test api's but the one tool that is ticking most boxes for me at the moment is [httpBook](https://marketplace.visualstudio.com/items?itemName=anweber.httpbook). httpBook is a VSCode extension built on [httpYac](https://httpyac.github.io/) and provides a [Notebook](https://code.visualstudio.com/api/extension-guides/notebook) interface for us to create, execute, test and document code snippets.\n\nSo, lets get started!\n\n### First you'll need to install the VSCode extension\n\nYou'll find the extension [here](https://marketplace.visualstudio.com/items?itemName=anweber.httpbook) or by searching for \"httpBook\" in the VSCode Extension Marketplace (in VSCode or on the web).\n\n### A basic api call\n\nLet's start with something basic to prove the extension works...\n\nCreate a new `.http` file in VSCode and enter the below GET request in a new Code cell.\n\n```http\nGET https://httpbin.org/get\n```\n\nExecute the request by pressing the Play button adjacent to the Code cell or at the top of the file tab. You should be presented with a response from the api that will look something similar to:\n\n```\nGET https://httpbin.org/get\nuser-agent: httpyac\naccept: */*\naccept-encoding: gzip, deflate, br\n\nHTTP/1.1 200 OK\ndate: Tue, 11 Jan 2022 20:54:23 GMT\ncontent-type: application/json\ncontent-length: 297\nconnection: close\nserver: gunicorn/19.9.0\naccess-control-allow-origin: *\naccess-control-allow-credentials: true\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"httpyac\",\n    \"X-Amzn-Trace-Id\": \"Root=1-61ddee7f-279ada9f0f046f7d18cb5665\"\n  },\n  \"origin\": \"xxx.xxx.xxx.xxx\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n### Adding documentation\n\nYou may have already noticed that apart from adding Code cells to your notebook you can add Markdown cells. in my opinion Markdown is by far the best tool for documenting as a developer. In fact I'd happily do all my writing in Markdown.\n\nI'll let you play with that. Let get back to some api requests!\n\n### CRM WebApi\n\n#### Authentication\n","source":"_drafts/Using-httpBook-with-dataverse-to-test-the-web-api.md","raw":"---\ntitle: Using httpBook with Dataverse to test the web api\ntags:\n  - D365\n  - Dataverse\n  - WebApi\ncategories:\ndescription: Testing the Dataverse WebApi can sometime be a little tedious...\nexcerpt: Testing the Dataverse WebApi can sometime be a little tedious...\n---\n\n## Problem\n\nWe all test our code and usage of api's, that's a given. But when writing code to consume the Dataverse WebApi and Custom Dataverse Api's, being able to run quick tests to validate our syntax and usage can sometimes be a little painful and time consuming. There are plenty of options to overcome this and help us, here I am going to talk about one that is becoming my preferred solution to this problem.\n\n## Solution (well, my solution)\n\nOver the years I've used Postman, SoupUI, Insomnia, plus many different VSCode extensions to test api's but the one tool that is ticking most boxes for me at the moment is [httpBook](https://marketplace.visualstudio.com/items?itemName=anweber.httpbook). httpBook is a VSCode extension built on [httpYac](https://httpyac.github.io/) and provides a [Notebook](https://code.visualstudio.com/api/extension-guides/notebook) interface for us to create, execute, test and document code snippets.\n\nSo, lets get started!\n\n### First you'll need to install the VSCode extension\n\nYou'll find the extension [here](https://marketplace.visualstudio.com/items?itemName=anweber.httpbook) or by searching for \"httpBook\" in the VSCode Extension Marketplace (in VSCode or on the web).\n\n### A basic api call\n\nLet's start with something basic to prove the extension works...\n\nCreate a new `.http` file in VSCode and enter the below GET request in a new Code cell.\n\n```http\nGET https://httpbin.org/get\n```\n\nExecute the request by pressing the Play button adjacent to the Code cell or at the top of the file tab. You should be presented with a response from the api that will look something similar to:\n\n```\nGET https://httpbin.org/get\nuser-agent: httpyac\naccept: */*\naccept-encoding: gzip, deflate, br\n\nHTTP/1.1 200 OK\ndate: Tue, 11 Jan 2022 20:54:23 GMT\ncontent-type: application/json\ncontent-length: 297\nconnection: close\nserver: gunicorn/19.9.0\naccess-control-allow-origin: *\naccess-control-allow-credentials: true\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"httpyac\",\n    \"X-Amzn-Trace-Id\": \"Root=1-61ddee7f-279ada9f0f046f7d18cb5665\"\n  },\n  \"origin\": \"xxx.xxx.xxx.xxx\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n### Adding documentation\n\nYou may have already noticed that apart from adding Code cells to your notebook you can add Markdown cells. in my opinion Markdown is by far the best tool for documenting as a developer. In fact I'd happily do all my writing in Markdown.\n\nI'll let you play with that. Let get back to some api requests!\n\n### CRM WebApi\n\n#### Authentication\n","slug":"Using-httpBook-with-dataverse-to-test-the-web-api","published":0,"date":"2022-01-16T12:51:48.251Z","updated":"2022-01-16T12:51:48.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4c90001xsumdenm299c","content":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>We all test our code and usage of api’s, that’s a given. But when writing code to consume the Dataverse WebApi and Custom Dataverse Api’s, being able to run quick tests to validate our syntax and usage can sometimes be a little painful and time consuming. There are plenty of options to overcome this and help us, here I am going to talk about one that is becoming my preferred solution to this problem.</p>\n<h2 id=\"Solution-well-my-solution\"><a href=\"#Solution-well-my-solution\" class=\"headerlink\" title=\"Solution (well, my solution)\"></a>Solution (well, my solution)</h2><p>Over the years I’ve used Postman, SoupUI, Insomnia, plus many different VSCode extensions to test api’s but the one tool that is ticking most boxes for me at the moment is <a href=\"https://marketplace.visualstudio.com/items?itemName=anweber.httpbook\">httpBook</a>. httpBook is a VSCode extension built on <a href=\"https://httpyac.github.io/\">httpYac</a> and provides a <a href=\"https://code.visualstudio.com/api/extension-guides/notebook\">Notebook</a> interface for us to create, execute, test and document code snippets.</p>\n<p>So, lets get started!</p>\n<h3 id=\"First-you’ll-need-to-install-the-VSCode-extension\"><a href=\"#First-you’ll-need-to-install-the-VSCode-extension\" class=\"headerlink\" title=\"First you’ll need to install the VSCode extension\"></a>First you’ll need to install the VSCode extension</h3><p>You’ll find the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=anweber.httpbook\">here</a> or by searching for “httpBook” in the VSCode Extension Marketplace (in VSCode or on the web).</p>\n<h3 id=\"A-basic-api-call\"><a href=\"#A-basic-api-call\" class=\"headerlink\" title=\"A basic api call\"></a>A basic api call</h3><p>Let’s start with something basic to prove the extension works…</p>\n<p>Create a new <code>.http</code> file in VSCode and enter the below GET request in a new Code cell.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://httpbin.org/get</span><br></pre></td></tr></table></figure>\n\n<p>Execute the request by pressing the Play button adjacent to the Code cell or at the top of the file tab. You should be presented with a response from the api that will look something similar to:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https:&#x2F;&#x2F;httpbin.org&#x2F;get</span><br><span class=\"line\">user-agent: httpyac</span><br><span class=\"line\">accept: *&#x2F;*</span><br><span class=\"line\">accept-encoding: gzip, deflate, br</span><br><span class=\"line\"></span><br><span class=\"line\">HTTP&#x2F;1.1 200 OK</span><br><span class=\"line\">date: Tue, 11 Jan 2022 20:54:23 GMT</span><br><span class=\"line\">content-type: application&#x2F;json</span><br><span class=\"line\">content-length: 297</span><br><span class=\"line\">connection: close</span><br><span class=\"line\">server: gunicorn&#x2F;19.9.0</span><br><span class=\"line\">access-control-allow-origin: *</span><br><span class=\"line\">access-control-allow-credentials: true</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;,</span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,</span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;httpyac&quot;,</span><br><span class=\"line\">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-61ddee7f-279ada9f0f046f7d18cb5665&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;origin&quot;: &quot;xxx.xxx.xxx.xxx&quot;,</span><br><span class=\"line\">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-documentation\"><a href=\"#Adding-documentation\" class=\"headerlink\" title=\"Adding documentation\"></a>Adding documentation</h3><p>You may have already noticed that apart from adding Code cells to your notebook you can add Markdown cells. in my opinion Markdown is by far the best tool for documenting as a developer. In fact I’d happily do all my writing in Markdown.</p>\n<p>I’ll let you play with that. Let get back to some api requests!</p>\n<h3 id=\"CRM-WebApi\"><a href=\"#CRM-WebApi\" class=\"headerlink\" title=\"CRM WebApi\"></a>CRM WebApi</h3><h4 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h4>","site":{"data":{}},"more":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>We all test our code and usage of api’s, that’s a given. But when writing code to consume the Dataverse WebApi and Custom Dataverse Api’s, being able to run quick tests to validate our syntax and usage can sometimes be a little painful and time consuming. There are plenty of options to overcome this and help us, here I am going to talk about one that is becoming my preferred solution to this problem.</p>\n<h2 id=\"Solution-well-my-solution\"><a href=\"#Solution-well-my-solution\" class=\"headerlink\" title=\"Solution (well, my solution)\"></a>Solution (well, my solution)</h2><p>Over the years I’ve used Postman, SoupUI, Insomnia, plus many different VSCode extensions to test api’s but the one tool that is ticking most boxes for me at the moment is <a href=\"https://marketplace.visualstudio.com/items?itemName=anweber.httpbook\">httpBook</a>. httpBook is a VSCode extension built on <a href=\"https://httpyac.github.io/\">httpYac</a> and provides a <a href=\"https://code.visualstudio.com/api/extension-guides/notebook\">Notebook</a> interface for us to create, execute, test and document code snippets.</p>\n<p>So, lets get started!</p>\n<h3 id=\"First-you’ll-need-to-install-the-VSCode-extension\"><a href=\"#First-you’ll-need-to-install-the-VSCode-extension\" class=\"headerlink\" title=\"First you’ll need to install the VSCode extension\"></a>First you’ll need to install the VSCode extension</h3><p>You’ll find the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=anweber.httpbook\">here</a> or by searching for “httpBook” in the VSCode Extension Marketplace (in VSCode or on the web).</p>\n<h3 id=\"A-basic-api-call\"><a href=\"#A-basic-api-call\" class=\"headerlink\" title=\"A basic api call\"></a>A basic api call</h3><p>Let’s start with something basic to prove the extension works…</p>\n<p>Create a new <code>.http</code> file in VSCode and enter the below GET request in a new Code cell.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https://httpbin.org/get</span><br></pre></td></tr></table></figure>\n\n<p>Execute the request by pressing the Play button adjacent to the Code cell or at the top of the file tab. You should be presented with a response from the api that will look something similar to:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET https:&#x2F;&#x2F;httpbin.org&#x2F;get</span><br><span class=\"line\">user-agent: httpyac</span><br><span class=\"line\">accept: *&#x2F;*</span><br><span class=\"line\">accept-encoding: gzip, deflate, br</span><br><span class=\"line\"></span><br><span class=\"line\">HTTP&#x2F;1.1 200 OK</span><br><span class=\"line\">date: Tue, 11 Jan 2022 20:54:23 GMT</span><br><span class=\"line\">content-type: application&#x2F;json</span><br><span class=\"line\">content-length: 297</span><br><span class=\"line\">connection: close</span><br><span class=\"line\">server: gunicorn&#x2F;19.9.0</span><br><span class=\"line\">access-control-allow-origin: *</span><br><span class=\"line\">access-control-allow-credentials: true</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;args&quot;: &#123;&#125;,</span><br><span class=\"line\">  &quot;headers&quot;: &#123;</span><br><span class=\"line\">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;,</span><br><span class=\"line\">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class=\"line\">    &quot;User-Agent&quot;: &quot;httpyac&quot;,</span><br><span class=\"line\">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-61ddee7f-279ada9f0f046f7d18cb5665&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;origin&quot;: &quot;xxx.xxx.xxx.xxx&quot;,</span><br><span class=\"line\">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-documentation\"><a href=\"#Adding-documentation\" class=\"headerlink\" title=\"Adding documentation\"></a>Adding documentation</h3><p>You may have already noticed that apart from adding Code cells to your notebook you can add Markdown cells. in my opinion Markdown is by far the best tool for documenting as a developer. In fact I’d happily do all my writing in Markdown.</p>\n<p>I’ll let you play with that. Let get back to some api requests!</p>\n<h3 id=\"CRM-WebApi\"><a href=\"#CRM-WebApi\" class=\"headerlink\" title=\"CRM WebApi\"></a>CRM WebApi</h3><h4 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h4>"},{"title":"D365 TypeScript Web Resources - Part 4 - Modules & Debugging","date":"2020-04-11T00:07:42.000Z","description":"Lets take a look at how we can make use of ES Modules in our TypeScript webresources and how this help us achieve clean code! Then we'll quickly look at how we can then debug without the extra step of deploying each time we make a change.","excerpt":"Lets take a look at how we can make use of ES Modules in our TypeScript webresources and how this help us achieve clean code! Then we'll quickly look at how we can then debug without the extra step of deploying each time we make a change.","_content":"\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## ES Modules\n\n### What are ES Modules?\n\n_ES Modules is the ECMAScript standard for working with modules._\nRather then repeat or quote others here are a couple of great articles about ES Modules:\n\n- [ES modules: A cartoon deep-dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n- [A Practical guide to ES6 modules](https://www.freecodecamp.org/news/how-to-use-es6-modules-and-why-theyre-important-a9b20b480773/)\n\n### A Sample Module\n\nOK, so I expect the above articles have explained more that enough about es modules. Lets create a sample (because we can).\nFirst create a new file in the `src` directory called `sample.ts`, paste the following into the file and save.\n\n```TypeScript\nexport function Pointless(message: string): void {\n  Xrm.Navigation.openAlertDialog({\n    text: message,\n    title: \"A Pointless Message\",\n  });\n}\n\nexport class Stuff {\n  public foo(): void {\n    this.bar();\n  }\n\n  private bar(): void {\n    Xrm.Navigation.openAlertDialog({\n      text: \"foo bar\",\n      title: \"A foo bar message\",\n    });\n  }\n}\n```\n\nOur sample module exports a function called `Pointless` that displays a pointless message and a class called `Stuff` with `foo` and `bar` functions. Notice `foo` is public and `bar` private. `foo` calls `bar` which displays a foo bar message.\n\nLets now consume this module in our `ContactMainForm` class. First we need to import our function and class. Add the following at the top of `contact-main-form.ts`:\n\n```TypeScript\nimport { Pointless, Stuff } from \"./sample\";\n```\n\nNow we have imported these from our module we can make use of them. Add the following to our `ContactMainForm.OnLoad` function (form load event handler):\n\n```TypeScript\nPointless(\"This is a pointless message.\");\nconst stuff = new Stuff();\nstuff.foo();\n```\n\nThe complete `contact-main-form.ts` should now look like this:\n\n```TypeScript\nimport { Pointless, Stuff } from \"./sample\";\n\nclass ContactMainForm {\n  public OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n    const parentCustomerAttribute = formContext.getAttribute(\n      \"parentcustomerid\"\n    );\n    const parentCustomerValue = parentCustomerAttribute.getValue();\n    Pointless(\"This is a pointless message.\");\n    const stuff = new Stuff();\n    stuff.foo();\n  }\n}\n(window as any).ContactMainForm = new ContactMainForm();\n```\n\nLet's build our code with the following command and take a look what happens...\n\n```\nnpx webpack\n```\n\nYou guessed it! The compiled `.js` now contains our `ContactManForm` and the imports from our module `sample.ts`. Webpack has bundled `contact-main-form.ts` and all its dependencies into single `.js` files! :-D\n\nNow you can deploy and test the new script to ensure it all still works.\n\nThat is a very basic example but it should set you on the way to creating a better more maintainable structure to your code. Remember the [SOLID](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod) principles!\n\n## Debugging\n\nSo, we've got all these lovely tools, patterns and methodologies but how can we debug our code?\nWell, you can of course just load up your browsers developer tools and debug the `.js` files deployed to D365, but these are not a line by line representation of our TypeScript source files and the optimized version is practically unreadable!\n\n### webpack-dev-server & fiddler to the rescue!\n\n### Fiddler\n\nI expect most will have used or heard of Fiddler. If you don't have it installed go grab it [here](https://www.telerik.com/fiddler).\nWe'll be using the Auto Responder functionality to redirect requests for our `.js` to a locally served file.\n\n### webpack-dev-server\n\nWebpacks DevServer is essentially a http(s) file server.\nLets go an install the npm package...\n\n```\nnpm install webpack-dev-server --save-dev\n```\n\nNext we need to add some stuff to our `webpack.config.js`\nFist of all we need to add the following at the top of the file:\n\n```javascript\nvar path = require(\"path\");\n```\n\nthen wee need to add the following to the development mode section/config:\n\n```javascript\ndevServer: {\n  contentBase: path.join(__dirname, 'dist'),\n  compress: true,\n  port: 9000\n}\n```\n\nYour `webpack.config.js` should now look something like this:\n\n```javascript\nvar path = require(\"path\");\n\nmodule.exports = [\n  {\n    mode: \"development\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\", \".js\"],\n      modules: [\"src\", \"node_modules\"],\n    },\n    devtool: \"source-map\",\n    devServer: {\n      contentBase: path.join(__dirname, \"dist\"),\n      compress: true,\n      port: 9000,\n    },\n  },\n  {\n    mode: \"production\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].min.js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\", \".js\"],\n      modules: [\"src\", \"node_modules\"],\n    },\n    devtool: \"source-map\",\n  },\n];\n```\n\nNow lets start up Webpacks DevServer via the following command\n\n```\nnpx webpack-dev-server\n```\n\nOnce running you should be able to browse to [http://localhost:9000/](http://localhost:9000/) and the built `.js` and `.map` files should be served.\n\nWhat's the benefit of this I hear you ask! Well, we get a few benefits...\n\n1. we don't have to deploy the file every time we make a change.\n2. Chrome/Edge (no one uses IE any more right!) will be able to load our source maps.\n3. The source maps will enable us to debug the TypeScript in Chrome/Edge Dev tools. Magic! ;-)\n\n### Auto Responder\n\nLets setup the Fiddler Auto Responder. This is the component that will redirect request for our `.js` in D365 to our locally served files.\n\nLoad up Fiddler and select the Auto Responder tab on the right hand pane.\n![Fiddler Auto Responder Tab](AutoResponderTab.png)\nNext click _Add Rule_ and enter the following in the _Rule Editor_\n`regex:(?inx)^.*\\/webresources\\/(((new_)+(?'jsname1'[a-z_\\-\\.]*\\.js))|(?'jsname2'[a-z_\\-\\.]*\\.js\\.map))$`\nand\n`http://localhost:9000/${jsname1}${jsname2}`\nThen click _Save_\n\nIt should look like this...\n![Fiddler Auto Responder Rule](AutoResponderRule.png)\n\nThats Fiddler setup, lets get debugging!\n\n### Debugging in Chrome Dev Tools\n\nOK, so we have built and deployed our `contact-main-form` script (Assuming you followed from [part 1](/2020/03/07/D365-TypeScript-Webresources-Part-1/)). We also have Fiddler set up to redirect requests for our `.js` to local files and Webpack Dev Server serving up our files locally.\n\nNow lets load up Chrome, browse to our D365 instance and open up a contact. Hopefully you'll get the notification and alerts from our script!\n\nHit _F12_ to load the Developer Tools.\n\nNext select the _Source_ tab\n\nThen hit _Ctrl + P_ to open a file and type `contact-main-form`. You should see the `.ts` file in the list, click on it to open it.\n![Chrome Open File](ChromeOpenFile.png)\n\nLets add a breakpoint on line 5 (click on the left margin near the number 5)\n![Breakpoint](ChromeBreakpoint.png)\n\nWe are now ready! Hit _F5_ (refresh) in the browser and Chrome Dev Tools should pause on our breakpoint. Now hit _F10_ (Step Over) until we are paused on line 9. Feel free to inspect some of the objects and variables along the way.\n![Step Into](StepInto.png)\n\nWe are now going to step into our `Pointless` function so go ahead and hit _F11_ (you may have to hit it 2 or 3 times to get there). But eventually you should get to line 2 of our sample module `sample.ts`.\n![Debug Sample Module](DebugSampleModule.png)\n\nBrilliant isn't it!\n\n### No need to deploy\n\nRight, One last thing to show you...\nLets make some changes to our `ContactMainForm` and test/debug without the hassle of having to deploy/upload the file to D365. Obviously once you've finished your development you'll need to deploy the file to D365, but this method speeds up your dev/test process.\n\nFirst lets make a change.\nI'm going to change the pointless message...\n\n```TypeScript\nPointless(\"This REALLY is a pointless message.\");\n```\n\nSave the file and the build via the following command\n\n```\nnpx webpack\n```\n\nRefesh the browser and in Dev Tools you should see our changes and be able to debug.\n![Really Pointless](ReallyPointless.png)\n\n## That's all folks!\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt4.zip)\n\nIn the next part we'll take a look at unit testing and few useful tweaks to help some of the processes covered so far.\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-WebResources-Part-4.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 4 - Modules & Debugging\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\n  - Webpack\n  - Babel\n  - ES Modules\n  - Debugging\ncategories:\n  - D365 TypeScript\ndate: 2020-04-11 00:07:42\ndescription: Lets take a look at how we can make use of ES Modules in our TypeScript webresources and how this help us achieve clean code! Then we'll quickly look at how we can then debug without the extra step of deploying each time we make a change.\nexcerpt: Lets take a look at how we can make use of ES Modules in our TypeScript webresources and how this help us achieve clean code! Then we'll quickly look at how we can then debug without the extra step of deploying each time we make a change.\n---\n\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## ES Modules\n\n### What are ES Modules?\n\n_ES Modules is the ECMAScript standard for working with modules._\nRather then repeat or quote others here are a couple of great articles about ES Modules:\n\n- [ES modules: A cartoon deep-dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n- [A Practical guide to ES6 modules](https://www.freecodecamp.org/news/how-to-use-es6-modules-and-why-theyre-important-a9b20b480773/)\n\n### A Sample Module\n\nOK, so I expect the above articles have explained more that enough about es modules. Lets create a sample (because we can).\nFirst create a new file in the `src` directory called `sample.ts`, paste the following into the file and save.\n\n```TypeScript\nexport function Pointless(message: string): void {\n  Xrm.Navigation.openAlertDialog({\n    text: message,\n    title: \"A Pointless Message\",\n  });\n}\n\nexport class Stuff {\n  public foo(): void {\n    this.bar();\n  }\n\n  private bar(): void {\n    Xrm.Navigation.openAlertDialog({\n      text: \"foo bar\",\n      title: \"A foo bar message\",\n    });\n  }\n}\n```\n\nOur sample module exports a function called `Pointless` that displays a pointless message and a class called `Stuff` with `foo` and `bar` functions. Notice `foo` is public and `bar` private. `foo` calls `bar` which displays a foo bar message.\n\nLets now consume this module in our `ContactMainForm` class. First we need to import our function and class. Add the following at the top of `contact-main-form.ts`:\n\n```TypeScript\nimport { Pointless, Stuff } from \"./sample\";\n```\n\nNow we have imported these from our module we can make use of them. Add the following to our `ContactMainForm.OnLoad` function (form load event handler):\n\n```TypeScript\nPointless(\"This is a pointless message.\");\nconst stuff = new Stuff();\nstuff.foo();\n```\n\nThe complete `contact-main-form.ts` should now look like this:\n\n```TypeScript\nimport { Pointless, Stuff } from \"./sample\";\n\nclass ContactMainForm {\n  public OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n    const parentCustomerAttribute = formContext.getAttribute(\n      \"parentcustomerid\"\n    );\n    const parentCustomerValue = parentCustomerAttribute.getValue();\n    Pointless(\"This is a pointless message.\");\n    const stuff = new Stuff();\n    stuff.foo();\n  }\n}\n(window as any).ContactMainForm = new ContactMainForm();\n```\n\nLet's build our code with the following command and take a look what happens...\n\n```\nnpx webpack\n```\n\nYou guessed it! The compiled `.js` now contains our `ContactManForm` and the imports from our module `sample.ts`. Webpack has bundled `contact-main-form.ts` and all its dependencies into single `.js` files! :-D\n\nNow you can deploy and test the new script to ensure it all still works.\n\nThat is a very basic example but it should set you on the way to creating a better more maintainable structure to your code. Remember the [SOLID](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod) principles!\n\n## Debugging\n\nSo, we've got all these lovely tools, patterns and methodologies but how can we debug our code?\nWell, you can of course just load up your browsers developer tools and debug the `.js` files deployed to D365, but these are not a line by line representation of our TypeScript source files and the optimized version is practically unreadable!\n\n### webpack-dev-server & fiddler to the rescue!\n\n### Fiddler\n\nI expect most will have used or heard of Fiddler. If you don't have it installed go grab it [here](https://www.telerik.com/fiddler).\nWe'll be using the Auto Responder functionality to redirect requests for our `.js` to a locally served file.\n\n### webpack-dev-server\n\nWebpacks DevServer is essentially a http(s) file server.\nLets go an install the npm package...\n\n```\nnpm install webpack-dev-server --save-dev\n```\n\nNext we need to add some stuff to our `webpack.config.js`\nFist of all we need to add the following at the top of the file:\n\n```javascript\nvar path = require(\"path\");\n```\n\nthen wee need to add the following to the development mode section/config:\n\n```javascript\ndevServer: {\n  contentBase: path.join(__dirname, 'dist'),\n  compress: true,\n  port: 9000\n}\n```\n\nYour `webpack.config.js` should now look something like this:\n\n```javascript\nvar path = require(\"path\");\n\nmodule.exports = [\n  {\n    mode: \"development\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\", \".js\"],\n      modules: [\"src\", \"node_modules\"],\n    },\n    devtool: \"source-map\",\n    devServer: {\n      contentBase: path.join(__dirname, \"dist\"),\n      compress: true,\n      port: 9000,\n    },\n  },\n  {\n    mode: \"production\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].min.js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\", \".js\"],\n      modules: [\"src\", \"node_modules\"],\n    },\n    devtool: \"source-map\",\n  },\n];\n```\n\nNow lets start up Webpacks DevServer via the following command\n\n```\nnpx webpack-dev-server\n```\n\nOnce running you should be able to browse to [http://localhost:9000/](http://localhost:9000/) and the built `.js` and `.map` files should be served.\n\nWhat's the benefit of this I hear you ask! Well, we get a few benefits...\n\n1. we don't have to deploy the file every time we make a change.\n2. Chrome/Edge (no one uses IE any more right!) will be able to load our source maps.\n3. The source maps will enable us to debug the TypeScript in Chrome/Edge Dev tools. Magic! ;-)\n\n### Auto Responder\n\nLets setup the Fiddler Auto Responder. This is the component that will redirect request for our `.js` in D365 to our locally served files.\n\nLoad up Fiddler and select the Auto Responder tab on the right hand pane.\n![Fiddler Auto Responder Tab](AutoResponderTab.png)\nNext click _Add Rule_ and enter the following in the _Rule Editor_\n`regex:(?inx)^.*\\/webresources\\/(((new_)+(?'jsname1'[a-z_\\-\\.]*\\.js))|(?'jsname2'[a-z_\\-\\.]*\\.js\\.map))$`\nand\n`http://localhost:9000/${jsname1}${jsname2}`\nThen click _Save_\n\nIt should look like this...\n![Fiddler Auto Responder Rule](AutoResponderRule.png)\n\nThats Fiddler setup, lets get debugging!\n\n### Debugging in Chrome Dev Tools\n\nOK, so we have built and deployed our `contact-main-form` script (Assuming you followed from [part 1](/2020/03/07/D365-TypeScript-Webresources-Part-1/)). We also have Fiddler set up to redirect requests for our `.js` to local files and Webpack Dev Server serving up our files locally.\n\nNow lets load up Chrome, browse to our D365 instance and open up a contact. Hopefully you'll get the notification and alerts from our script!\n\nHit _F12_ to load the Developer Tools.\n\nNext select the _Source_ tab\n\nThen hit _Ctrl + P_ to open a file and type `contact-main-form`. You should see the `.ts` file in the list, click on it to open it.\n![Chrome Open File](ChromeOpenFile.png)\n\nLets add a breakpoint on line 5 (click on the left margin near the number 5)\n![Breakpoint](ChromeBreakpoint.png)\n\nWe are now ready! Hit _F5_ (refresh) in the browser and Chrome Dev Tools should pause on our breakpoint. Now hit _F10_ (Step Over) until we are paused on line 9. Feel free to inspect some of the objects and variables along the way.\n![Step Into](StepInto.png)\n\nWe are now going to step into our `Pointless` function so go ahead and hit _F11_ (you may have to hit it 2 or 3 times to get there). But eventually you should get to line 2 of our sample module `sample.ts`.\n![Debug Sample Module](DebugSampleModule.png)\n\nBrilliant isn't it!\n\n### No need to deploy\n\nRight, One last thing to show you...\nLets make some changes to our `ContactMainForm` and test/debug without the hassle of having to deploy/upload the file to D365. Obviously once you've finished your development you'll need to deploy the file to D365, but this method speeds up your dev/test process.\n\nFirst lets make a change.\nI'm going to change the pointless message...\n\n```TypeScript\nPointless(\"This REALLY is a pointless message.\");\n```\n\nSave the file and the build via the following command\n\n```\nnpx webpack\n```\n\nRefesh the browser and in Dev Tools you should see our changes and be able to debug.\n![Really Pointless](ReallyPointless.png)\n\n## That's all folks!\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt4.zip)\n\nIn the next part we'll take a look at unit testing and few useful tweaks to help some of the processes covered so far.\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-WebResources-Part-4","published":1,"updated":"2021-04-30T23:34:44.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cf0003xsumg1czhhon","content":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"ES-Modules\"><a href=\"#ES-Modules\" class=\"headerlink\" title=\"ES Modules\"></a>ES Modules</h2><h3 id=\"What-are-ES-Modules\"><a href=\"#What-are-ES-Modules\" class=\"headerlink\" title=\"What are ES Modules?\"></a>What are ES Modules?</h3><p><em>ES Modules is the ECMAScript standard for working with modules.</em><br>Rather then repeat or quote others here are a couple of great articles about ES Modules:</p>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES modules: A cartoon deep-dive</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-use-es6-modules-and-why-theyre-important-a9b20b480773/\">A Practical guide to ES6 modules</a></li>\n</ul>\n<h3 id=\"A-Sample-Module\"><a href=\"#A-Sample-Module\" class=\"headerlink\" title=\"A Sample Module\"></a>A Sample Module</h3><p>OK, so I expect the above articles have explained more that enough about es modules. Lets create a sample (because we can).<br>First create a new file in the <code>src</code> directory called <code>sample.ts</code>, paste the following into the file and save.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pointless</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  Xrm.Navigation.openAlertDialog(&#123;</span><br><span class=\"line\">    text: message,</span><br><span class=\"line\">    title: <span class=\"string\">&quot;A Pointless Message&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stuff</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> foo(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.bar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> bar(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    Xrm.Navigation.openAlertDialog(&#123;</span><br><span class=\"line\">      text: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">      title: <span class=\"string\">&quot;A foo bar message&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Our sample module exports a function called <code>Pointless</code> that displays a pointless message and a class called <code>Stuff</code> with <code>foo</code> and <code>bar</code> functions. Notice <code>foo</code> is public and <code>bar</code> private. <code>foo</code> calls <code>bar</code> which displays a foo bar message.</p>\n<p>Lets now consume this module in our <code>ContactMainForm</code> class. First we need to import our function and class. Add the following at the top of <code>contact-main-form.ts</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless, Stuff &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./sample&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now we have imported these from our module we can make use of them. Add the following to our <code>ContactMainForm.OnLoad</code> function (form load event handler):</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pointless(<span class=\"string\">&quot;This is a pointless message.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> stuff = <span class=\"keyword\">new</span> Stuff();</span><br><span class=\"line\">stuff.foo();</span><br></pre></td></tr></table></figure>\n\n<p>The complete <code>contact-main-form.ts</code> should now look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless, Stuff &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./sample&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerAttribute = formContext.getAttribute(</span><br><span class=\"line\">      <span class=\"string\">&quot;parentcustomerid&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerValue = parentCustomerAttribute.getValue();</span><br><span class=\"line\">    Pointless(<span class=\"string\">&quot;This is a pointless message.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stuff = <span class=\"keyword\">new</span> Stuff();</span><br><span class=\"line\">    stuff.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).ContactMainForm = <span class=\"keyword\">new</span> ContactMainForm();</span><br></pre></td></tr></table></figure>\n\n<p>Let’s build our code with the following command and take a look what happens…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>You guessed it! The compiled <code>.js</code> now contains our <code>ContactManForm</code> and the imports from our module <code>sample.ts</code>. Webpack has bundled <code>contact-main-form.ts</code> and all its dependencies into single <code>.js</code> files! :-D</p>\n<p>Now you can deploy and test the new script to ensure it all still works.</p>\n<p>That is a very basic example but it should set you on the way to creating a better more maintainable structure to your code. Remember the <a href=\"http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod\">SOLID</a> principles!</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>So, we’ve got all these lovely tools, patterns and methodologies but how can we debug our code?<br>Well, you can of course just load up your browsers developer tools and debug the <code>.js</code> files deployed to D365, but these are not a line by line representation of our TypeScript source files and the optimized version is practically unreadable!</p>\n<h3 id=\"webpack-dev-server-amp-fiddler-to-the-rescue\"><a href=\"#webpack-dev-server-amp-fiddler-to-the-rescue\" class=\"headerlink\" title=\"webpack-dev-server &amp; fiddler to the rescue!\"></a>webpack-dev-server &amp; fiddler to the rescue!</h3><h3 id=\"Fiddler\"><a href=\"#Fiddler\" class=\"headerlink\" title=\"Fiddler\"></a>Fiddler</h3><p>I expect most will have used or heard of Fiddler. If you don’t have it installed go grab it <a href=\"https://www.telerik.com/fiddler\">here</a>.<br>We’ll be using the Auto Responder functionality to redirect requests for our <code>.js</code> to a locally served file.</p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>Webpacks DevServer is essentially a http(s) file server.<br>Lets go an install the npm package…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Next we need to add some stuff to our <code>webpack.config.js</code><br>Fist of all we need to add the following at the top of the file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>then wee need to add the following to the development mode section/config:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  port: <span class=\"number\">9000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your <code>webpack.config.js</code> should now look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>],</span><br><span class=\"line\">      modules: [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">      contentBase: path.join(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">      compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].min.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>],</span><br><span class=\"line\">      modules: [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Now lets start up Webpacks DevServer via the following command</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<p>Once running you should be able to browse to <a href=\"http://localhost:9000/\">http://localhost:9000/</a> and the built <code>.js</code> and <code>.map</code> files should be served.</p>\n<p>What’s the benefit of this I hear you ask! Well, we get a few benefits…</p>\n<ol>\n<li>we don’t have to deploy the file every time we make a change.</li>\n<li>Chrome/Edge (no one uses IE any more right!) will be able to load our source maps.</li>\n<li>The source maps will enable us to debug the TypeScript in Chrome/Edge Dev tools. Magic! ;-)</li>\n</ol>\n<h3 id=\"Auto-Responder\"><a href=\"#Auto-Responder\" class=\"headerlink\" title=\"Auto Responder\"></a>Auto Responder</h3><p>Lets setup the Fiddler Auto Responder. This is the component that will redirect request for our <code>.js</code> in D365 to our locally served files.</p>\n<p>Load up Fiddler and select the Auto Responder tab on the right hand pane.<br><img src=\"AutoResponderTab.png\" alt=\"Fiddler Auto Responder Tab\"><br>Next click <em>Add Rule</em> and enter the following in the <em>Rule Editor</em><br><code>regex:(?inx)^.*\\/webresources\\/(((new_)+(?&#39;jsname1&#39;[a-z_\\-\\.]*\\.js))|(?&#39;jsname2&#39;[a-z_\\-\\.]*\\.js\\.map))$</code><br>and<br><code>http://localhost:9000/$&#123;jsname1&#125;$&#123;jsname2&#125;</code><br>Then click <em>Save</em></p>\n<p>It should look like this…<br><img src=\"AutoResponderRule.png\" alt=\"Fiddler Auto Responder Rule\"></p>\n<p>Thats Fiddler setup, lets get debugging!</p>\n<h3 id=\"Debugging-in-Chrome-Dev-Tools\"><a href=\"#Debugging-in-Chrome-Dev-Tools\" class=\"headerlink\" title=\"Debugging in Chrome Dev Tools\"></a>Debugging in Chrome Dev Tools</h3><p>OK, so we have built and deployed our <code>contact-main-form</code> script (Assuming you followed from <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1/\">part 1</a>). We also have Fiddler set up to redirect requests for our <code>.js</code> to local files and Webpack Dev Server serving up our files locally.</p>\n<p>Now lets load up Chrome, browse to our D365 instance and open up a contact. Hopefully you’ll get the notification and alerts from our script!</p>\n<p>Hit <em>F12</em> to load the Developer Tools.</p>\n<p>Next select the <em>Source</em> tab</p>\n<p>Then hit <em>Ctrl + P</em> to open a file and type <code>contact-main-form</code>. You should see the <code>.ts</code> file in the list, click on it to open it.<br><img src=\"ChromeOpenFile.png\" alt=\"Chrome Open File\"></p>\n<p>Lets add a breakpoint on line 5 (click on the left margin near the number 5)<br><img src=\"ChromeBreakpoint.png\" alt=\"Breakpoint\"></p>\n<p>We are now ready! Hit <em>F5</em> (refresh) in the browser and Chrome Dev Tools should pause on our breakpoint. Now hit <em>F10</em> (Step Over) until we are paused on line 9. Feel free to inspect some of the objects and variables along the way.<br><img src=\"StepInto.png\" alt=\"Step Into\"></p>\n<p>We are now going to step into our <code>Pointless</code> function so go ahead and hit <em>F11</em> (you may have to hit it 2 or 3 times to get there). But eventually you should get to line 2 of our sample module <code>sample.ts</code>.<br><img src=\"DebugSampleModule.png\" alt=\"Debug Sample Module\"></p>\n<p>Brilliant isn’t it!</p>\n<h3 id=\"No-need-to-deploy\"><a href=\"#No-need-to-deploy\" class=\"headerlink\" title=\"No need to deploy\"></a>No need to deploy</h3><p>Right, One last thing to show you…<br>Lets make some changes to our <code>ContactMainForm</code> and test/debug without the hassle of having to deploy/upload the file to D365. Obviously once you’ve finished your development you’ll need to deploy the file to D365, but this method speeds up your dev/test process.</p>\n<p>First lets make a change.<br>I’m going to change the pointless message…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pointless(<span class=\"string\">&quot;This REALLY is a pointless message.&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Save the file and the build via the following command</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>Refesh the browser and in Dev Tools you should see our changes and be able to debug.<br><img src=\"ReallyPointless.png\" alt=\"Really Pointless\"></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt4.zip\">here</a></p>\n<p>In the next part we’ll take a look at unit testing and few useful tweaks to help some of the processes covered so far.</p>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"ES-Modules\"><a href=\"#ES-Modules\" class=\"headerlink\" title=\"ES Modules\"></a>ES Modules</h2><h3 id=\"What-are-ES-Modules\"><a href=\"#What-are-ES-Modules\" class=\"headerlink\" title=\"What are ES Modules?\"></a>What are ES Modules?</h3><p><em>ES Modules is the ECMAScript standard for working with modules.</em><br>Rather then repeat or quote others here are a couple of great articles about ES Modules:</p>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES modules: A cartoon deep-dive</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-use-es6-modules-and-why-theyre-important-a9b20b480773/\">A Practical guide to ES6 modules</a></li>\n</ul>\n<h3 id=\"A-Sample-Module\"><a href=\"#A-Sample-Module\" class=\"headerlink\" title=\"A Sample Module\"></a>A Sample Module</h3><p>OK, so I expect the above articles have explained more that enough about es modules. Lets create a sample (because we can).<br>First create a new file in the <code>src</code> directory called <code>sample.ts</code>, paste the following into the file and save.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pointless</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  Xrm.Navigation.openAlertDialog(&#123;</span><br><span class=\"line\">    text: message,</span><br><span class=\"line\">    title: <span class=\"string\">&quot;A Pointless Message&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stuff</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> foo(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.bar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> bar(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    Xrm.Navigation.openAlertDialog(&#123;</span><br><span class=\"line\">      text: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">      title: <span class=\"string\">&quot;A foo bar message&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Our sample module exports a function called <code>Pointless</code> that displays a pointless message and a class called <code>Stuff</code> with <code>foo</code> and <code>bar</code> functions. Notice <code>foo</code> is public and <code>bar</code> private. <code>foo</code> calls <code>bar</code> which displays a foo bar message.</p>\n<p>Lets now consume this module in our <code>ContactMainForm</code> class. First we need to import our function and class. Add the following at the top of <code>contact-main-form.ts</code>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless, Stuff &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./sample&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now we have imported these from our module we can make use of them. Add the following to our <code>ContactMainForm.OnLoad</code> function (form load event handler):</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pointless(<span class=\"string\">&quot;This is a pointless message.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> stuff = <span class=\"keyword\">new</span> Stuff();</span><br><span class=\"line\">stuff.foo();</span><br></pre></td></tr></table></figure>\n\n<p>The complete <code>contact-main-form.ts</code> should now look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless, Stuff &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./sample&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerAttribute = formContext.getAttribute(</span><br><span class=\"line\">      <span class=\"string\">&quot;parentcustomerid&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerValue = parentCustomerAttribute.getValue();</span><br><span class=\"line\">    Pointless(<span class=\"string\">&quot;This is a pointless message.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stuff = <span class=\"keyword\">new</span> Stuff();</span><br><span class=\"line\">    stuff.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).ContactMainForm = <span class=\"keyword\">new</span> ContactMainForm();</span><br></pre></td></tr></table></figure>\n\n<p>Let’s build our code with the following command and take a look what happens…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>You guessed it! The compiled <code>.js</code> now contains our <code>ContactManForm</code> and the imports from our module <code>sample.ts</code>. Webpack has bundled <code>contact-main-form.ts</code> and all its dependencies into single <code>.js</code> files! :-D</p>\n<p>Now you can deploy and test the new script to ensure it all still works.</p>\n<p>That is a very basic example but it should set you on the way to creating a better more maintainable structure to your code. Remember the <a href=\"http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod\">SOLID</a> principles!</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>So, we’ve got all these lovely tools, patterns and methodologies but how can we debug our code?<br>Well, you can of course just load up your browsers developer tools and debug the <code>.js</code> files deployed to D365, but these are not a line by line representation of our TypeScript source files and the optimized version is practically unreadable!</p>\n<h3 id=\"webpack-dev-server-amp-fiddler-to-the-rescue\"><a href=\"#webpack-dev-server-amp-fiddler-to-the-rescue\" class=\"headerlink\" title=\"webpack-dev-server &amp; fiddler to the rescue!\"></a>webpack-dev-server &amp; fiddler to the rescue!</h3><h3 id=\"Fiddler\"><a href=\"#Fiddler\" class=\"headerlink\" title=\"Fiddler\"></a>Fiddler</h3><p>I expect most will have used or heard of Fiddler. If you don’t have it installed go grab it <a href=\"https://www.telerik.com/fiddler\">here</a>.<br>We’ll be using the Auto Responder functionality to redirect requests for our <code>.js</code> to a locally served file.</p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>Webpacks DevServer is essentially a http(s) file server.<br>Lets go an install the npm package…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Next we need to add some stuff to our <code>webpack.config.js</code><br>Fist of all we need to add the following at the top of the file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>then wee need to add the following to the development mode section/config:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: path.join(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">  compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  port: <span class=\"number\">9000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your <code>webpack.config.js</code> should now look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>],</span><br><span class=\"line\">      modules: [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">      contentBase: path.join(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">      compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].min.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.js&quot;</span>],</span><br><span class=\"line\">      modules: [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>Now lets start up Webpacks DevServer via the following command</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<p>Once running you should be able to browse to <a href=\"http://localhost:9000/\">http://localhost:9000/</a> and the built <code>.js</code> and <code>.map</code> files should be served.</p>\n<p>What’s the benefit of this I hear you ask! Well, we get a few benefits…</p>\n<ol>\n<li>we don’t have to deploy the file every time we make a change.</li>\n<li>Chrome/Edge (no one uses IE any more right!) will be able to load our source maps.</li>\n<li>The source maps will enable us to debug the TypeScript in Chrome/Edge Dev tools. Magic! ;-)</li>\n</ol>\n<h3 id=\"Auto-Responder\"><a href=\"#Auto-Responder\" class=\"headerlink\" title=\"Auto Responder\"></a>Auto Responder</h3><p>Lets setup the Fiddler Auto Responder. This is the component that will redirect request for our <code>.js</code> in D365 to our locally served files.</p>\n<p>Load up Fiddler and select the Auto Responder tab on the right hand pane.<br><img src=\"AutoResponderTab.png\" alt=\"Fiddler Auto Responder Tab\"><br>Next click <em>Add Rule</em> and enter the following in the <em>Rule Editor</em><br><code>regex:(?inx)^.*\\/webresources\\/(((new_)+(?&#39;jsname1&#39;[a-z_\\-\\.]*\\.js))|(?&#39;jsname2&#39;[a-z_\\-\\.]*\\.js\\.map))$</code><br>and<br><code>http://localhost:9000/$&#123;jsname1&#125;$&#123;jsname2&#125;</code><br>Then click <em>Save</em></p>\n<p>It should look like this…<br><img src=\"AutoResponderRule.png\" alt=\"Fiddler Auto Responder Rule\"></p>\n<p>Thats Fiddler setup, lets get debugging!</p>\n<h3 id=\"Debugging-in-Chrome-Dev-Tools\"><a href=\"#Debugging-in-Chrome-Dev-Tools\" class=\"headerlink\" title=\"Debugging in Chrome Dev Tools\"></a>Debugging in Chrome Dev Tools</h3><p>OK, so we have built and deployed our <code>contact-main-form</code> script (Assuming you followed from <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1/\">part 1</a>). We also have Fiddler set up to redirect requests for our <code>.js</code> to local files and Webpack Dev Server serving up our files locally.</p>\n<p>Now lets load up Chrome, browse to our D365 instance and open up a contact. Hopefully you’ll get the notification and alerts from our script!</p>\n<p>Hit <em>F12</em> to load the Developer Tools.</p>\n<p>Next select the <em>Source</em> tab</p>\n<p>Then hit <em>Ctrl + P</em> to open a file and type <code>contact-main-form</code>. You should see the <code>.ts</code> file in the list, click on it to open it.<br><img src=\"ChromeOpenFile.png\" alt=\"Chrome Open File\"></p>\n<p>Lets add a breakpoint on line 5 (click on the left margin near the number 5)<br><img src=\"ChromeBreakpoint.png\" alt=\"Breakpoint\"></p>\n<p>We are now ready! Hit <em>F5</em> (refresh) in the browser and Chrome Dev Tools should pause on our breakpoint. Now hit <em>F10</em> (Step Over) until we are paused on line 9. Feel free to inspect some of the objects and variables along the way.<br><img src=\"StepInto.png\" alt=\"Step Into\"></p>\n<p>We are now going to step into our <code>Pointless</code> function so go ahead and hit <em>F11</em> (you may have to hit it 2 or 3 times to get there). But eventually you should get to line 2 of our sample module <code>sample.ts</code>.<br><img src=\"DebugSampleModule.png\" alt=\"Debug Sample Module\"></p>\n<p>Brilliant isn’t it!</p>\n<h3 id=\"No-need-to-deploy\"><a href=\"#No-need-to-deploy\" class=\"headerlink\" title=\"No need to deploy\"></a>No need to deploy</h3><p>Right, One last thing to show you…<br>Lets make some changes to our <code>ContactMainForm</code> and test/debug without the hassle of having to deploy/upload the file to D365. Obviously once you’ve finished your development you’ll need to deploy the file to D365, but this method speeds up your dev/test process.</p>\n<p>First lets make a change.<br>I’m going to change the pointless message…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pointless(<span class=\"string\">&quot;This REALLY is a pointless message.&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Save the file and the build via the following command</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>Refesh the browser and in Dev Tools you should see our changes and be able to debug.<br><img src=\"ReallyPointless.png\" alt=\"Really Pointless\"></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt4.zip\">here</a></p>\n<p>In the next part we’ll take a look at unit testing and few useful tweaks to help some of the processes covered so far.</p>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"D365 TypeScript Web Resources - Part 1 - Basics","date":"2020-03-07T00:00:00.000Z","updated":"2020-03-08T00:00:00.000Z","description":"In this series (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The series will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.","excerpt":"In this series (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The series will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.","_content":"\n## Developing JavaScript Web Resources with TypeScript\n\nIn this [series](/categories/D365-TypeScript/) (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The [series](/categories/D365-TypeScript/) will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.\n\nAnyway! Let get started!\n\n## Why did I choose TypeScript\n\nSo the why is potentially quite subjective and we all have our own opinions, this is mine and I don't expect you to agree but hopefully it will help you form your own opinion and maybe win you over to the idea...\n\nFirstly the obvious, TypeScript is essentially JavaScript with the addition of being able to (optionally) apply static types to your objects. This allows for more readable, cleaner, and more maintainable code. It also helps identify errors sooner, fits the mindset of C# developers, and has some great tooling to support the end to end development life cycle.\n\nThen we have the endless options and tools for compiling/transpiling. For example, defining the browser(s) you wish to support so you have to worry less about the target browser(s) while writing your code. Also, using tools such a webpack to bundle you code into single files and compressing the output for better performance.\n\nFinally we have unit testing and debugging where you can debug the TypeScript directly via source maps.\n\nPersonally, I will never go back to writing raw JavaScript unless it's the only option!\n\n## A Basic Setup\n\nOk, So lets take a look at what we need for the basic setup when working with D365 Web Resources.  \n_Note: I'll be using [Visual Studio Code](https://code.visualstudio.com/) as my preferred IDE. However, all of this can be done in other IDE's and terminals etc._\n\n### Node and NPM\n\nIf you don't have it installed already go and grab the latest version of [Node](https://nodejs.org/)\n\n### Init\n\nInitialise a workspace/project.\n\n- Lets create a directory for our project and change to that directory (via Terminal)\n\n```\nmd c:\\d365ts-pt1\ncd c:\\d365ts-pt1\n```\n\n- Open the project directory with VS Code (via Terminal)\n\n```\ncode .\n```\n\n- Init a new project (just go with all the defaults) (via Terminal)\n\n```\nnpm init\n```\n\n- install the TypeScript module (via Terminal)\n\n```\nnpm install TypeScript --save-dev\n```\n\n- create directories for the source code and the transpiled output (via Terminal)\n\n```\nmd src\nmd dist\n```\n\n### TypeScript config\n\n- create a TypeScript configuration `tsconfig.json` in the root of the workspace...\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"ES6\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\", \"dist\"]\n}\n```\n\nFull details on TypeScript configuration can be found [here](https://www.TypeScriptlang.org/docs/handbook/tsconfig-json.html)\n\n### Our first TS file\n\n- create a new TS file in the `source` directory. We'll create the file `contact-main-form.ts` for the purpose of the demo paste the below into the file and save.\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(executionContext: any) {\n    const formContext = executionContext.getFormContext();\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\n_A basic onload event that should add a notification to the form once it's loaded_\n\n- compile/transpile the source (via Terminal)\n\n```\ntsc\n```\n\nYou should now see your new transpiled `.js` and `.js.map` ([source map](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map)) files in the `dist` directory...  \n![](files1.png)\n\nYou can now update the `.js` file and wire it up to the Onload event like so...\n\n![](form-event.png)\n\nThen when opening or creating a contact via the main contact form you'll see our form notification :-)\n\n![](formnotification.png)\n\n## That's all folks!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt1.zip)\n\n### Coming up in the [series](/categories/D365-TypeScript/)\n\nIn the next part of the [series](/categories/D365-TypeScript/) we'll look at type declarations including XrmDefinitelyTyped. Until then feel free to comment below. All feedback is greatly appreciated.\n\nIn the future I'll also be covering the following within this [series](/categories/D365-TypeScript/):\n\n- Type declarations\n- Debugging and Source maps\n- ES6 Modules\n- Babel and Webpack\n- Unit Testing\n- Automated Deployment\n- Lint rules for deprecated client API\n- and more\n  So keep checking back for updates\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-Webresources-Part-1.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 1 - Basics\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\ndate: 2020-03-07\nupdated: 2020-03-08\ncategories:\n  - D365 TypeScript\ndescription: In this series (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The series will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.\nexcerpt: In this series (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The series will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.\n---\n\n## Developing JavaScript Web Resources with TypeScript\n\nIn this [series](/categories/D365-TypeScript/) (my first) of posts i'll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The [series](/categories/D365-TypeScript/) will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.\n\nAnyway! Let get started!\n\n## Why did I choose TypeScript\n\nSo the why is potentially quite subjective and we all have our own opinions, this is mine and I don't expect you to agree but hopefully it will help you form your own opinion and maybe win you over to the idea...\n\nFirstly the obvious, TypeScript is essentially JavaScript with the addition of being able to (optionally) apply static types to your objects. This allows for more readable, cleaner, and more maintainable code. It also helps identify errors sooner, fits the mindset of C# developers, and has some great tooling to support the end to end development life cycle.\n\nThen we have the endless options and tools for compiling/transpiling. For example, defining the browser(s) you wish to support so you have to worry less about the target browser(s) while writing your code. Also, using tools such a webpack to bundle you code into single files and compressing the output for better performance.\n\nFinally we have unit testing and debugging where you can debug the TypeScript directly via source maps.\n\nPersonally, I will never go back to writing raw JavaScript unless it's the only option!\n\n## A Basic Setup\n\nOk, So lets take a look at what we need for the basic setup when working with D365 Web Resources.  \n_Note: I'll be using [Visual Studio Code](https://code.visualstudio.com/) as my preferred IDE. However, all of this can be done in other IDE's and terminals etc._\n\n### Node and NPM\n\nIf you don't have it installed already go and grab the latest version of [Node](https://nodejs.org/)\n\n### Init\n\nInitialise a workspace/project.\n\n- Lets create a directory for our project and change to that directory (via Terminal)\n\n```\nmd c:\\d365ts-pt1\ncd c:\\d365ts-pt1\n```\n\n- Open the project directory with VS Code (via Terminal)\n\n```\ncode .\n```\n\n- Init a new project (just go with all the defaults) (via Terminal)\n\n```\nnpm init\n```\n\n- install the TypeScript module (via Terminal)\n\n```\nnpm install TypeScript --save-dev\n```\n\n- create directories for the source code and the transpiled output (via Terminal)\n\n```\nmd src\nmd dist\n```\n\n### TypeScript config\n\n- create a TypeScript configuration `tsconfig.json` in the root of the workspace...\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"ES6\",\n    \"noImplicitAny\": true,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\", \"dist\"]\n}\n```\n\nFull details on TypeScript configuration can be found [here](https://www.TypeScriptlang.org/docs/handbook/tsconfig-json.html)\n\n### Our first TS file\n\n- create a new TS file in the `source` directory. We'll create the file `contact-main-form.ts` for the purpose of the demo paste the below into the file and save.\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(executionContext: any) {\n    const formContext = executionContext.getFormContext();\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\n_A basic onload event that should add a notification to the form once it's loaded_\n\n- compile/transpile the source (via Terminal)\n\n```\ntsc\n```\n\nYou should now see your new transpiled `.js` and `.js.map` ([source map](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map)) files in the `dist` directory...  \n![](files1.png)\n\nYou can now update the `.js` file and wire it up to the Onload event like so...\n\n![](form-event.png)\n\nThen when opening or creating a contact via the main contact form you'll see our form notification :-)\n\n![](formnotification.png)\n\n## That's all folks!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt1.zip)\n\n### Coming up in the [series](/categories/D365-TypeScript/)\n\nIn the next part of the [series](/categories/D365-TypeScript/) we'll look at type declarations including XrmDefinitelyTyped. Until then feel free to comment below. All feedback is greatly appreciated.\n\nIn the future I'll also be covering the following within this [series](/categories/D365-TypeScript/):\n\n- Type declarations\n- Debugging and Source maps\n- ES6 Modules\n- Babel and Webpack\n- Unit Testing\n- Automated Deployment\n- Lint rules for deprecated client API\n- and more\n  So keep checking back for updates\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-Webresources-Part-1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cl0006xsumd9z9buri","content":"<h2 id=\"Developing-JavaScript-Web-Resources-with-TypeScript\"><a href=\"#Developing-JavaScript-Web-Resources-with-TypeScript\" class=\"headerlink\" title=\"Developing JavaScript Web Resources with TypeScript\"></a>Developing JavaScript Web Resources with TypeScript</h2><p>In this <a href=\"/categories/D365-TypeScript/\">series</a> (my first) of posts i’ll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The <a href=\"/categories/D365-TypeScript/\">series</a> will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.</p>\n<p>Anyway! Let get started!</p>\n<h2 id=\"Why-did-I-choose-TypeScript\"><a href=\"#Why-did-I-choose-TypeScript\" class=\"headerlink\" title=\"Why did I choose TypeScript\"></a>Why did I choose TypeScript</h2><p>So the why is potentially quite subjective and we all have our own opinions, this is mine and I don’t expect you to agree but hopefully it will help you form your own opinion and maybe win you over to the idea…</p>\n<p>Firstly the obvious, TypeScript is essentially JavaScript with the addition of being able to (optionally) apply static types to your objects. This allows for more readable, cleaner, and more maintainable code. It also helps identify errors sooner, fits the mindset of C# developers, and has some great tooling to support the end to end development life cycle.</p>\n<p>Then we have the endless options and tools for compiling/transpiling. For example, defining the browser(s) you wish to support so you have to worry less about the target browser(s) while writing your code. Also, using tools such a webpack to bundle you code into single files and compressing the output for better performance.</p>\n<p>Finally we have unit testing and debugging where you can debug the TypeScript directly via source maps.</p>\n<p>Personally, I will never go back to writing raw JavaScript unless it’s the only option!</p>\n<h2 id=\"A-Basic-Setup\"><a href=\"#A-Basic-Setup\" class=\"headerlink\" title=\"A Basic Setup\"></a>A Basic Setup</h2><p>Ok, So lets take a look at what we need for the basic setup when working with D365 Web Resources.<br><em>Note: I’ll be using <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> as my preferred IDE. However, all of this can be done in other IDE’s and terminals etc.</em></p>\n<h3 id=\"Node-and-NPM\"><a href=\"#Node-and-NPM\" class=\"headerlink\" title=\"Node and NPM\"></a>Node and NPM</h3><p>If you don’t have it installed already go and grab the latest version of <a href=\"https://nodejs.org/\">Node</a></p>\n<h3 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h3><p>Initialise a workspace/project.</p>\n<ul>\n<li>Lets create a directory for our project and change to that directory (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md c:\\d365ts-pt1</span><br><span class=\"line\">cd c:\\d365ts-pt1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Open the project directory with VS Code (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Init a new project (just go with all the defaults) (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>install the TypeScript module (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install TypeScript --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>create directories for the source code and the transpiled output (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md src</span><br><span class=\"line\">md dist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TypeScript-config\"><a href=\"#TypeScript-config\" class=\"headerlink\" title=\"TypeScript config\"></a>TypeScript config</h3><ul>\n<li>create a TypeScript configuration <code>tsconfig.json</code> in the root of the workspace…</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;ES6&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;preserveConstEnums&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;**/*.spec.ts&quot;</span>, <span class=\"string\">&quot;dist&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Full details on TypeScript configuration can be found <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">here</a></p>\n<h3 id=\"Our-first-TS-file\"><a href=\"#Our-first-TS-file\" class=\"headerlink\" title=\"Our first TS file\"></a>Our first TS file</h3><ul>\n<li>create a new TS file in the <code>source</code> directory. We’ll create the file <code>contact-main-form.ts</code> for the purpose of the demo paste the below into the file and save.</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">OnLoad</span>(<span class=\"params\">executionContext: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext();</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>A basic onload event that should add a notification to the form once it’s loaded</em></p>\n<ul>\n<li>compile/transpile the source (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc</span><br></pre></td></tr></table></figure>\n\n<p>You should now see your new transpiled <code>.js</code> and <code>.js.map</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map\">source map</a>) files in the <code>dist</code> directory…<br><img src=\"files1.png\"></p>\n<p>You can now update the <code>.js</code> file and wire it up to the Onload event like so…</p>\n<p><img src=\"form-event.png\"></p>\n<p>Then when opening or creating a contact via the main contact form you’ll see our form notification :-)</p>\n<p><img src=\"formnotification.png\"></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt1.zip\">here</a></p>\n<h3 id=\"Coming-up-in-the-series\"><a href=\"#Coming-up-in-the-series\" class=\"headerlink\" title=\"Coming up in the series\"></a>Coming up in the <a href=\"/categories/D365-TypeScript/\">series</a></h3><p>In the next part of the <a href=\"/categories/D365-TypeScript/\">series</a> we’ll look at type declarations including XrmDefinitelyTyped. Until then feel free to comment below. All feedback is greatly appreciated.</p>\n<p>In the future I’ll also be covering the following within this <a href=\"/categories/D365-TypeScript/\">series</a>:</p>\n<ul>\n<li>Type declarations</li>\n<li>Debugging and Source maps</li>\n<li>ES6 Modules</li>\n<li>Babel and Webpack</li>\n<li>Unit Testing</li>\n<li>Automated Deployment</li>\n<li>Lint rules for deprecated client API</li>\n<li>and more<br>So keep checking back for updates</li>\n</ul>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<h2 id=\"Developing-JavaScript-Web-Resources-with-TypeScript\"><a href=\"#Developing-JavaScript-Web-Resources-with-TypeScript\" class=\"headerlink\" title=\"Developing JavaScript Web Resources with TypeScript\"></a>Developing JavaScript Web Resources with TypeScript</h2><p>In this <a href=\"/categories/D365-TypeScript/\">series</a> (my first) of posts i’ll share my experiences when authoring and maintaining JavaScript Web Resources with TypeScript. The <a href=\"/categories/D365-TypeScript/\">series</a> will cover the basics and then more advanced options including ES Modules, webpack, babel, unit testing, deployment, etc.</p>\n<p>Anyway! Let get started!</p>\n<h2 id=\"Why-did-I-choose-TypeScript\"><a href=\"#Why-did-I-choose-TypeScript\" class=\"headerlink\" title=\"Why did I choose TypeScript\"></a>Why did I choose TypeScript</h2><p>So the why is potentially quite subjective and we all have our own opinions, this is mine and I don’t expect you to agree but hopefully it will help you form your own opinion and maybe win you over to the idea…</p>\n<p>Firstly the obvious, TypeScript is essentially JavaScript with the addition of being able to (optionally) apply static types to your objects. This allows for more readable, cleaner, and more maintainable code. It also helps identify errors sooner, fits the mindset of C# developers, and has some great tooling to support the end to end development life cycle.</p>\n<p>Then we have the endless options and tools for compiling/transpiling. For example, defining the browser(s) you wish to support so you have to worry less about the target browser(s) while writing your code. Also, using tools such a webpack to bundle you code into single files and compressing the output for better performance.</p>\n<p>Finally we have unit testing and debugging where you can debug the TypeScript directly via source maps.</p>\n<p>Personally, I will never go back to writing raw JavaScript unless it’s the only option!</p>\n<h2 id=\"A-Basic-Setup\"><a href=\"#A-Basic-Setup\" class=\"headerlink\" title=\"A Basic Setup\"></a>A Basic Setup</h2><p>Ok, So lets take a look at what we need for the basic setup when working with D365 Web Resources.<br><em>Note: I’ll be using <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> as my preferred IDE. However, all of this can be done in other IDE’s and terminals etc.</em></p>\n<h3 id=\"Node-and-NPM\"><a href=\"#Node-and-NPM\" class=\"headerlink\" title=\"Node and NPM\"></a>Node and NPM</h3><p>If you don’t have it installed already go and grab the latest version of <a href=\"https://nodejs.org/\">Node</a></p>\n<h3 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h3><p>Initialise a workspace/project.</p>\n<ul>\n<li>Lets create a directory for our project and change to that directory (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md c:\\d365ts-pt1</span><br><span class=\"line\">cd c:\\d365ts-pt1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Open the project directory with VS Code (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Init a new project (just go with all the defaults) (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>install the TypeScript module (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install TypeScript --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>create directories for the source code and the transpiled output (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md src</span><br><span class=\"line\">md dist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TypeScript-config\"><a href=\"#TypeScript-config\" class=\"headerlink\" title=\"TypeScript config\"></a>TypeScript config</h3><ul>\n<li>create a TypeScript configuration <code>tsconfig.json</code> in the root of the workspace…</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;ES6&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;preserveConstEnums&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;**/*.spec.ts&quot;</span>, <span class=\"string\">&quot;dist&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Full details on TypeScript configuration can be found <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">here</a></p>\n<h3 id=\"Our-first-TS-file\"><a href=\"#Our-first-TS-file\" class=\"headerlink\" title=\"Our first TS file\"></a>Our first TS file</h3><ul>\n<li>create a new TS file in the <code>source</code> directory. We’ll create the file <code>contact-main-form.ts</code> for the purpose of the demo paste the below into the file and save.</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">OnLoad</span>(<span class=\"params\">executionContext: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext();</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>A basic onload event that should add a notification to the form once it’s loaded</em></p>\n<ul>\n<li>compile/transpile the source (via Terminal)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc</span><br></pre></td></tr></table></figure>\n\n<p>You should now see your new transpiled <code>.js</code> and <code>.js.map</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map\">source map</a>) files in the <code>dist</code> directory…<br><img src=\"files1.png\"></p>\n<p>You can now update the <code>.js</code> file and wire it up to the Onload event like so…</p>\n<p><img src=\"form-event.png\"></p>\n<p>Then when opening or creating a contact via the main contact form you’ll see our form notification :-)</p>\n<p><img src=\"formnotification.png\"></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt1.zip\">here</a></p>\n<h3 id=\"Coming-up-in-the-series\"><a href=\"#Coming-up-in-the-series\" class=\"headerlink\" title=\"Coming up in the series\"></a>Coming up in the <a href=\"/categories/D365-TypeScript/\">series</a></h3><p>In the next part of the <a href=\"/categories/D365-TypeScript/\">series</a> we’ll look at type declarations including XrmDefinitelyTyped. Until then feel free to comment below. All feedback is greatly appreciated.</p>\n<p>In the future I’ll also be covering the following within this <a href=\"/categories/D365-TypeScript/\">series</a>:</p>\n<ul>\n<li>Type declarations</li>\n<li>Debugging and Source maps</li>\n<li>ES6 Modules</li>\n<li>Babel and Webpack</li>\n<li>Unit Testing</li>\n<li>Automated Deployment</li>\n<li>Lint rules for deprecated client API</li>\n<li>and more<br>So keep checking back for updates</li>\n</ul>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"D365 TypeScript Web Resources - Part 2 - Type Declarations","date":"2020-03-08T00:00:00.000Z","description":"Type Declaration files provide a way to declare the existence of some types or values without actually providing implementations for those values. They improve readability and also quality. They are integral to the use of TypeScript.","excerpt":"Type Declaration files provide a way to declare the existence of some types or values without actually providing implementations for those values. They improve readability and also quality. They are integral to the use of TypeScript.","_content":"\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## Type Declarations for the D365/XRM Client API\n\n### What are they?\n\n_A declaration file provides a way to declare the existence of some types or values without actually providing implementations for those values._\n\nRead more about them [here](https://www.TypeScriptlang.org/docs/handbook/declaration-files/introduction.html) and [here](https://microsoft.github.io/TypeScript-New-Handbook/chapters/type-declarations/)\n\n### Do we need to construct our own?\n\nShort answer: No\n\nLong answer: No, but you may want to extend either of the two I'll mention below.\n\nLonger answer: No, but you may want to extend either of the two I'll mention below, and you may even want to author you own.\n\n### So what do we have available?\n\nPersonally I have had a play with both [@types/xrm](https://www.npmjs.com/package/@types/xrm) and [delegateas/XrmDefinitelyTyped](https://github.com/delegateas/XrmDefinitelyTyped)\n\nOf the two I prefer XrmDefinitelyTyped as it extends on @types/xrm by providing CrmSvcUtil like functionality to build TypeScript interfaces that represent the entities and forms within your D365CE environment.\n\nFor the purpose of this post we'll take a look at XrmDefinitelyTyped :-)\n\n### Install XrmDefinitelyTyped\n\nXrmDefinitelyTyped is packaged via Nuget so you'll need to ensure you have Nuget [installed](https://www.nuget.org/downloads). Just download the latest nuget.exe into the root of you workspace.\n\nOh, you can download a starter workspace based on part 1 of this series from [here](/2020/03/07/D365-TypeScript-Webresources-Part-1/d365ts-pt1.zip)\n\n- Once you've installed Nuget run the following from the root of the workspace...\n\n```\nnuget.exe install Delegate.XrmDefinitelyTyped -OutputDirectory .\\\n```\n\n- Next we need to configure XrmDefinitelyTyped. Within the XrmDefinitelyTyped directory you should find `XrmDefinitelyTyped.exe.config`. We are going to need provide some values for the settings in here.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <appSettings>\n    <add key=\"out\" value=\"./typings/XRM\" />\n    <add key=\"solutions\" value=\"\" />\n    <add key=\"entities\" value=\"account, contact\" />\n    <add key=\"web\" value=\"WebApiEntities\" />\n    <add key=\"jsLib\" value=\"./src/lib\" />\n    <add key=\"mfaAppId\" value=\"\" />\n    <add key=\"mfaReturnUrl\" value=\"\"/>\n  </appSettings>\n</configuration>\n```\n\nAlternatively you can use command line switches. I tend to use a combination of the two. Providing a list of the `entities` in the config file but the connection settings via the command line.\n\n```\nXrmDefinitelyTyped.exe /url:https://<organizationName>.crm<regionNumber>.dynamics.com/XRMServices/2011/Organization.svc /username:<username> /password:<password> /useconfig:.\\Delegate.XrmDefinitelyTyped.5.1.6\\content\\XrmDefinitelyTyped\\XrmDefinitelyTyped.exe.config\n```\n\n_make sure to check the version number of XrmDefinitelyTyped used in the `/useconfig:` command line switch_\n\n- Update the `tsconfig.json` with a reference to our new declarations by adding the `typings` to the `include`.\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"ES6\",\n    \"noImplicitAny\": false,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\", \"typings/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\", \"dist\"]\n}\n```\n\n_Note we also have to turn [noImplicitAny](https://www.TypeScriptlang.org/tsconfig#noImplicitAny) off_\n\nAnd that's it. XDT (XrmDefinitelyTyped) should now be installed and ready to reference within your TypeScript. As with CrmSvcUtil you will need to run `XrmDefinitelyTyped.exe` each time you need to update your typings with any customisation changes you have made to your entities, forms, etc.\n\n### Typing your types in your TypeScript ;-)\n\nEasy, and C# devs will love it!  \nRemember our first ts file we created in [part 1](/2020/03/07/D365-TypeScript-Webresources-Part-1)...\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(executionContext: any) {\n    const formContext = executionContext.getFormContext();\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\nLets apply some typings to our objects...\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\nNow, what I love about XDT is the type inference, for example getting an attribute infers the type depending on the logical name and you get something a little like this when writing your code:\n![](type-infer-1.png)\n\nFor example the `parentcustomerid` attribute type is `Xrm.LookupAttribute<\"account\" | \"contact\">` and the `getValue()` function returns a `EntityReference<\"account\" | \"contact\">[]`. Anyway I think you get the point.\n![](type-infer-2.png)  \n_Remember F12 in your IDE will link you to the definition in the TypeScript declaration :-)_\n\n## That's all folks!\n\nI hope that helps you get XDT working in your project. Please use the comments below, i'm more than happy to take questions and extend this post with any suggestions I feel would be of value.\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt2.zip)\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-Webresources-Part-2.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 2 - Type Declarations\ndate: 2020-03-08\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\n  - XrmDefinitelyTyped\ncategories:\n  - D365 TypeScript\ndescription: Type Declaration files provide a way to declare the existence of some types or values without actually providing implementations for those values. They improve readability and also quality. They are integral to the use of TypeScript.\nexcerpt: Type Declaration files provide a way to declare the existence of some types or values without actually providing implementations for those values. They improve readability and also quality. They are integral to the use of TypeScript.\n---\n\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## Type Declarations for the D365/XRM Client API\n\n### What are they?\n\n_A declaration file provides a way to declare the existence of some types or values without actually providing implementations for those values._\n\nRead more about them [here](https://www.TypeScriptlang.org/docs/handbook/declaration-files/introduction.html) and [here](https://microsoft.github.io/TypeScript-New-Handbook/chapters/type-declarations/)\n\n### Do we need to construct our own?\n\nShort answer: No\n\nLong answer: No, but you may want to extend either of the two I'll mention below.\n\nLonger answer: No, but you may want to extend either of the two I'll mention below, and you may even want to author you own.\n\n### So what do we have available?\n\nPersonally I have had a play with both [@types/xrm](https://www.npmjs.com/package/@types/xrm) and [delegateas/XrmDefinitelyTyped](https://github.com/delegateas/XrmDefinitelyTyped)\n\nOf the two I prefer XrmDefinitelyTyped as it extends on @types/xrm by providing CrmSvcUtil like functionality to build TypeScript interfaces that represent the entities and forms within your D365CE environment.\n\nFor the purpose of this post we'll take a look at XrmDefinitelyTyped :-)\n\n### Install XrmDefinitelyTyped\n\nXrmDefinitelyTyped is packaged via Nuget so you'll need to ensure you have Nuget [installed](https://www.nuget.org/downloads). Just download the latest nuget.exe into the root of you workspace.\n\nOh, you can download a starter workspace based on part 1 of this series from [here](/2020/03/07/D365-TypeScript-Webresources-Part-1/d365ts-pt1.zip)\n\n- Once you've installed Nuget run the following from the root of the workspace...\n\n```\nnuget.exe install Delegate.XrmDefinitelyTyped -OutputDirectory .\\\n```\n\n- Next we need to configure XrmDefinitelyTyped. Within the XrmDefinitelyTyped directory you should find `XrmDefinitelyTyped.exe.config`. We are going to need provide some values for the settings in here.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <appSettings>\n    <add key=\"out\" value=\"./typings/XRM\" />\n    <add key=\"solutions\" value=\"\" />\n    <add key=\"entities\" value=\"account, contact\" />\n    <add key=\"web\" value=\"WebApiEntities\" />\n    <add key=\"jsLib\" value=\"./src/lib\" />\n    <add key=\"mfaAppId\" value=\"\" />\n    <add key=\"mfaReturnUrl\" value=\"\"/>\n  </appSettings>\n</configuration>\n```\n\nAlternatively you can use command line switches. I tend to use a combination of the two. Providing a list of the `entities` in the config file but the connection settings via the command line.\n\n```\nXrmDefinitelyTyped.exe /url:https://<organizationName>.crm<regionNumber>.dynamics.com/XRMServices/2011/Organization.svc /username:<username> /password:<password> /useconfig:.\\Delegate.XrmDefinitelyTyped.5.1.6\\content\\XrmDefinitelyTyped\\XrmDefinitelyTyped.exe.config\n```\n\n_make sure to check the version number of XrmDefinitelyTyped used in the `/useconfig:` command line switch_\n\n- Update the `tsconfig.json` with a reference to our new declarations by adding the `typings` to the `include`.\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"ES6\",\n    \"noImplicitAny\": false,\n    \"removeComments\": true,\n    \"preserveConstEnums\": true,\n    \"outDir\": \"dist\",\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\", \"typings/**/*\"],\n  \"exclude\": [\"node_modules\", \"**/*.spec.ts\", \"dist\"]\n}\n```\n\n_Note we also have to turn [noImplicitAny](https://www.TypeScriptlang.org/tsconfig#noImplicitAny) off_\n\nAnd that's it. XDT (XrmDefinitelyTyped) should now be installed and ready to reference within your TypeScript. As with CrmSvcUtil you will need to run `XrmDefinitelyTyped.exe` each time you need to update your typings with any customisation changes you have made to your entities, forms, etc.\n\n### Typing your types in your TypeScript ;-)\n\nEasy, and C# devs will love it!  \nRemember our first ts file we created in [part 1](/2020/03/07/D365-TypeScript-Webresources-Part-1)...\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(executionContext: any) {\n    const formContext = executionContext.getFormContext();\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\nLets apply some typings to our objects...\n\n```TypeScript\nclass ContactMainForm {\n  static OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n  }\n}\n```\n\nNow, what I love about XDT is the type inference, for example getting an attribute infers the type depending on the logical name and you get something a little like this when writing your code:\n![](type-infer-1.png)\n\nFor example the `parentcustomerid` attribute type is `Xrm.LookupAttribute<\"account\" | \"contact\">` and the `getValue()` function returns a `EntityReference<\"account\" | \"contact\">[]`. Anyway I think you get the point.\n![](type-infer-2.png)  \n_Remember F12 in your IDE will link you to the definition in the TypeScript declaration :-)_\n\n## That's all folks!\n\nI hope that helps you get XDT working in your project. Please use the comments below, i'm more than happy to take questions and extend this post with any suggestions I feel would be of value.\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt2.zip)\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-Webresources-Part-2","published":1,"updated":"2021-04-30T23:34:44.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cp0008xsum90dx0xvt","content":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"Type-Declarations-for-the-D365-XRM-Client-API\"><a href=\"#Type-Declarations-for-the-D365-XRM-Client-API\" class=\"headerlink\" title=\"Type Declarations for the D365/XRM Client API\"></a>Type Declarations for the D365/XRM Client API</h2><h3 id=\"What-are-they\"><a href=\"#What-are-they\" class=\"headerlink\" title=\"What are they?\"></a>What are they?</h3><p><em>A declaration file provides a way to declare the existence of some types or values without actually providing implementations for those values.</em></p>\n<p>Read more about them <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html\">here</a> and <a href=\"https://microsoft.github.io/TypeScript-New-Handbook/chapters/type-declarations/\">here</a></p>\n<h3 id=\"Do-we-need-to-construct-our-own\"><a href=\"#Do-we-need-to-construct-our-own\" class=\"headerlink\" title=\"Do we need to construct our own?\"></a>Do we need to construct our own?</h3><p>Short answer: No</p>\n<p>Long answer: No, but you may want to extend either of the two I’ll mention below.</p>\n<p>Longer answer: No, but you may want to extend either of the two I’ll mention below, and you may even want to author you own.</p>\n<h3 id=\"So-what-do-we-have-available\"><a href=\"#So-what-do-we-have-available\" class=\"headerlink\" title=\"So what do we have available?\"></a>So what do we have available?</h3><p>Personally I have had a play with both <a href=\"https://www.npmjs.com/package/@types/xrm\">@types/xrm</a> and <a href=\"https://github.com/delegateas/XrmDefinitelyTyped\">delegateas/XrmDefinitelyTyped</a></p>\n<p>Of the two I prefer XrmDefinitelyTyped as it extends on @types/xrm by providing CrmSvcUtil like functionality to build TypeScript interfaces that represent the entities and forms within your D365CE environment.</p>\n<p>For the purpose of this post we’ll take a look at XrmDefinitelyTyped :-)</p>\n<h3 id=\"Install-XrmDefinitelyTyped\"><a href=\"#Install-XrmDefinitelyTyped\" class=\"headerlink\" title=\"Install XrmDefinitelyTyped\"></a>Install XrmDefinitelyTyped</h3><p>XrmDefinitelyTyped is packaged via Nuget so you’ll need to ensure you have Nuget <a href=\"https://www.nuget.org/downloads\">installed</a>. Just download the latest nuget.exe into the root of you workspace.</p>\n<p>Oh, you can download a starter workspace based on part 1 of this series from <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1/d365ts-pt1.zip\">here</a></p>\n<ul>\n<li>Once you’ve installed Nuget run the following from the root of the workspace…</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nuget.exe install Delegate.XrmDefinitelyTyped -OutputDirectory .\\</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Next we need to configure XrmDefinitelyTyped. Within the XrmDefinitelyTyped directory you should find <code>XrmDefinitelyTyped.exe.config</code>. We are going to need provide some values for the settings in here.</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;out&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;./typings/XRM&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;solutions&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;entities&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;account, contact&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;web&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;WebApiEntities&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;jsLib&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;./src/lib&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;mfaAppId&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;mfaReturnUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Alternatively you can use command line switches. I tend to use a combination of the two. Providing a list of the <code>entities</code> in the config file but the connection settings via the command line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XrmDefinitelyTyped.exe &#x2F;url:https:&#x2F;&#x2F;&lt;organizationName&gt;.crm&lt;regionNumber&gt;.dynamics.com&#x2F;XRMServices&#x2F;2011&#x2F;Organization.svc &#x2F;username:&lt;username&gt; &#x2F;password:&lt;password&gt; &#x2F;useconfig:.\\Delegate.XrmDefinitelyTyped.5.1.6\\content\\XrmDefinitelyTyped\\XrmDefinitelyTyped.exe.config</span><br></pre></td></tr></table></figure>\n\n<p><em>make sure to check the version number of XrmDefinitelyTyped used in the <code>/useconfig:</code> command line switch</em></p>\n<ul>\n<li>Update the <code>tsconfig.json</code> with a reference to our new declarations by adding the <code>typings</code> to the <code>include</code>.</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;ES6&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;preserveConstEnums&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*&quot;</span>, <span class=\"string\">&quot;typings/**/*&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;**/*.spec.ts&quot;</span>, <span class=\"string\">&quot;dist&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Note we also have to turn <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a> off</em></p>\n<p>And that’s it. XDT (XrmDefinitelyTyped) should now be installed and ready to reference within your TypeScript. As with CrmSvcUtil you will need to run <code>XrmDefinitelyTyped.exe</code> each time you need to update your typings with any customisation changes you have made to your entities, forms, etc.</p>\n<h3 id=\"Typing-your-types-in-your-TypeScript\"><a href=\"#Typing-your-types-in-your-TypeScript\" class=\"headerlink\" title=\"Typing your types in your TypeScript ;-)\"></a>Typing your types in your TypeScript ;-)</h3><p>Easy, and C# devs will love it!<br>Remember our first ts file we created in <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1\">part 1</a>…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">OnLoad</span>(<span class=\"params\">executionContext: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext();</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets apply some typings to our objects…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, what I love about XDT is the type inference, for example getting an attribute infers the type depending on the logical name and you get something a little like this when writing your code:<br><img src=\"type-infer-1.png\"></p>\n<p>For example the <code>parentcustomerid</code> attribute type is <code>Xrm.LookupAttribute&lt;&quot;account&quot; | &quot;contact&quot;&gt;</code> and the <code>getValue()</code> function returns a <code>EntityReference&lt;&quot;account&quot; | &quot;contact&quot;&gt;[]</code>. Anyway I think you get the point.<br><img src=\"type-infer-2.png\"><br><em>Remember F12 in your IDE will link you to the definition in the TypeScript declaration :-)</em></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that helps you get XDT working in your project. Please use the comments below, i’m more than happy to take questions and extend this post with any suggestions I feel would be of value.</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt2.zip\">here</a></p>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"Type-Declarations-for-the-D365-XRM-Client-API\"><a href=\"#Type-Declarations-for-the-D365-XRM-Client-API\" class=\"headerlink\" title=\"Type Declarations for the D365/XRM Client API\"></a>Type Declarations for the D365/XRM Client API</h2><h3 id=\"What-are-they\"><a href=\"#What-are-they\" class=\"headerlink\" title=\"What are they?\"></a>What are they?</h3><p><em>A declaration file provides a way to declare the existence of some types or values without actually providing implementations for those values.</em></p>\n<p>Read more about them <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html\">here</a> and <a href=\"https://microsoft.github.io/TypeScript-New-Handbook/chapters/type-declarations/\">here</a></p>\n<h3 id=\"Do-we-need-to-construct-our-own\"><a href=\"#Do-we-need-to-construct-our-own\" class=\"headerlink\" title=\"Do we need to construct our own?\"></a>Do we need to construct our own?</h3><p>Short answer: No</p>\n<p>Long answer: No, but you may want to extend either of the two I’ll mention below.</p>\n<p>Longer answer: No, but you may want to extend either of the two I’ll mention below, and you may even want to author you own.</p>\n<h3 id=\"So-what-do-we-have-available\"><a href=\"#So-what-do-we-have-available\" class=\"headerlink\" title=\"So what do we have available?\"></a>So what do we have available?</h3><p>Personally I have had a play with both <a href=\"https://www.npmjs.com/package/@types/xrm\">@types/xrm</a> and <a href=\"https://github.com/delegateas/XrmDefinitelyTyped\">delegateas/XrmDefinitelyTyped</a></p>\n<p>Of the two I prefer XrmDefinitelyTyped as it extends on @types/xrm by providing CrmSvcUtil like functionality to build TypeScript interfaces that represent the entities and forms within your D365CE environment.</p>\n<p>For the purpose of this post we’ll take a look at XrmDefinitelyTyped :-)</p>\n<h3 id=\"Install-XrmDefinitelyTyped\"><a href=\"#Install-XrmDefinitelyTyped\" class=\"headerlink\" title=\"Install XrmDefinitelyTyped\"></a>Install XrmDefinitelyTyped</h3><p>XrmDefinitelyTyped is packaged via Nuget so you’ll need to ensure you have Nuget <a href=\"https://www.nuget.org/downloads\">installed</a>. Just download the latest nuget.exe into the root of you workspace.</p>\n<p>Oh, you can download a starter workspace based on part 1 of this series from <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1/d365ts-pt1.zip\">here</a></p>\n<ul>\n<li>Once you’ve installed Nuget run the following from the root of the workspace…</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nuget.exe install Delegate.XrmDefinitelyTyped -OutputDirectory .\\</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Next we need to configure XrmDefinitelyTyped. Within the XrmDefinitelyTyped directory you should find <code>XrmDefinitelyTyped.exe.config</code>. We are going to need provide some values for the settings in here.</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;out&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;./typings/XRM&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;solutions&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;entities&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;account, contact&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;web&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;WebApiEntities&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;jsLib&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;./src/lib&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;mfaAppId&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;mfaReturnUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Alternatively you can use command line switches. I tend to use a combination of the two. Providing a list of the <code>entities</code> in the config file but the connection settings via the command line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XrmDefinitelyTyped.exe &#x2F;url:https:&#x2F;&#x2F;&lt;organizationName&gt;.crm&lt;regionNumber&gt;.dynamics.com&#x2F;XRMServices&#x2F;2011&#x2F;Organization.svc &#x2F;username:&lt;username&gt; &#x2F;password:&lt;password&gt; &#x2F;useconfig:.\\Delegate.XrmDefinitelyTyped.5.1.6\\content\\XrmDefinitelyTyped\\XrmDefinitelyTyped.exe.config</span><br></pre></td></tr></table></figure>\n\n<p><em>make sure to check the version number of XrmDefinitelyTyped used in the <code>/useconfig:</code> command line switch</em></p>\n<ul>\n<li>Update the <code>tsconfig.json</code> with a reference to our new declarations by adding the <code>typings</code> to the <code>include</code>.</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;ES6&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;removeComments&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;preserveConstEnums&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;outDir&quot;</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*&quot;</span>, <span class=\"string\">&quot;typings/**/*&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>, <span class=\"string\">&quot;**/*.spec.ts&quot;</span>, <span class=\"string\">&quot;dist&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Note we also have to turn <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a> off</em></p>\n<p>And that’s it. XDT (XrmDefinitelyTyped) should now be installed and ready to reference within your TypeScript. As with CrmSvcUtil you will need to run <code>XrmDefinitelyTyped.exe</code> each time you need to update your typings with any customisation changes you have made to your entities, forms, etc.</p>\n<h3 id=\"Typing-your-types-in-your-TypeScript\"><a href=\"#Typing-your-types-in-your-TypeScript\" class=\"headerlink\" title=\"Typing your types in your TypeScript ;-)\"></a>Typing your types in your TypeScript ;-)</h3><p>Easy, and C# devs will love it!<br>Remember our first ts file we created in <a href=\"/2020/03/07/D365-TypeScript-Webresources-Part-1\">part 1</a>…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">OnLoad</span>(<span class=\"params\">executionContext: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext();</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets apply some typings to our objects…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, what I love about XDT is the type inference, for example getting an attribute infers the type depending on the logical name and you get something a little like this when writing your code:<br><img src=\"type-infer-1.png\"></p>\n<p>For example the <code>parentcustomerid</code> attribute type is <code>Xrm.LookupAttribute&lt;&quot;account&quot; | &quot;contact&quot;&gt;</code> and the <code>getValue()</code> function returns a <code>EntityReference&lt;&quot;account&quot; | &quot;contact&quot;&gt;[]</code>. Anyway I think you get the point.<br><img src=\"type-infer-2.png\"><br><em>Remember F12 in your IDE will link you to the definition in the TypeScript declaration :-)</em></p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that helps you get XDT working in your project. Please use the comments below, i’m more than happy to take questions and extend this post with any suggestions I feel would be of value.</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt2.zip\">here</a></p>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"D365 TypeScript Web Resources - Part 3 - Webpack & Babel","date":"2020-04-04T22:00:00.000Z","description":"Ok, so, err, where do we start! Webpack and Babel are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!","excerpt":"Ok, so, err, where do we start! Webpack and Babel are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!","_content":"\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## What the \\*&^%\n\nOk, so, err, where do we start! [Webpack](https://webpack.js.org/) and [Babel](https://babeljs.io/) are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!\n\n### Webpack\n\n[Webpack](https://webpack.js.org/) is a \"bundler\". In basic terms it bundles/merges source files together into a single source file. Additionally it can do things like [optimize](https://webpack.js.org/configuration/optimization/) and [tree shake](https://webpack.js.org/guides/tree-shaking/#root) your source code.\n\n### Babel\n\n[Babel](https://babeljs.io/) is a JavaScript Compiler (or Transpiler). With a little configuration it can turn your source code into code that is compatible with your target browser(s) and alleviate the headache of having to write code that targets specific browsers.\n\n## Install\n\nFirstly lets install Webpack:\n\n```\nnpm install webpack webpack-cli --save-dev\n```\n\n_This installs the webpack module and it's command line interface_\n\nNext we'll install Babel:\n\n```\nnpm install @babel/core @babel/preset-env --save-dev\n```\n\n_This installs babel and a package of [presets](https://babeljs.io/docs/en/babel-preset-env) for the compiler._\n\nFinally we'll install the Babel Loader for Webpack and a TypeScript plugin for Babel:\n\n```\nnpm install babel-loader @babel/preset-TypeScript --save-dev\n```\n\n_babel-loader is used by webpack to preprocess (via babel) our source code before bundling and @babel/preset-TypeScript is a TypeScript compiler plugin for babel_\n\n## Config\n\nWe now need to configure both webpack and babel...\n\n### Webpack config\n\nCreate a file in the root folder called `webpack.config.js` and open the file, paste the following contents and save.\n\n```javascript\nmodule.exports = [\n  {\n    mode: \"development\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\"],\n    },\n    devtool: \"source-map\",\n  },\n  {\n    mode: \"production\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].min.js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\"],\n    },\n    devtool: \"source-map\",\n  },\n];\n```\n\nThe above sets up two configurations, one for development and one for production. The difference between the two is essentially the file name (production names files \\*.min.js) as by default the production mode optimizes the output.\n\n_Further reading on [webpack configuration](https://webpack.js.org/configuration/)_\n\n### Babel config\n\nCreate a file in the root folder called `babel.config.json` and open the file, paste the following contents and save.\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"ie\": \"11\"\n        }\n      }\n    ],\n    \"@babel/preset-TypeScript\"\n  ]\n}\n```\n\nThe above loads two babel presets. `preset-env` will ensure the outputted JavaScript is compatible with your target browser(s) via polyfills etc. `preset-TypeScript` will enable babel to compile our TypeScript into JavaScript.\n\n_Now we have switched to webpack and babel we aren't using the original TypeScript compiler `tsc` to compile our TypeScript into JavaScript. I'd advise reading the [following caveats](https://babeljs.io/docs/en/babel-plugin-transform-TypeScript#caveats) to help understand the differences._\n\n_Further reading on [babel configuration](https://babeljs.io/docs/en/configuration)_\n\n## Lets build!\n\nOpen a fresh terminal (`Ctrl+Shift+'`) in VS Code and run the following command to build the code:\n\n```\nnpx webpack\n```\n\nYou should now have 4 files in your `dist` folder. 2 JavaScript (1 optimized) and a source map for each.\n\n![](build-output.png)\n\nIf you take a look at the JavaScript you'll notice the non optimized version is bloated with some webpack bootstrap stuff (ES module loading, etc.), and the optimized version is broken because it has omitted (via tree shaking) our class `ContactMainForm`.\n\nWe just need to make a couple of simple changes to ensure it's included in the optimized code. Update the `contact-main-form.ts` as below:\n\n```TypeScript\nclass ContactMainForm {\n  public OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n    const parentCustomerAttribute = formContext.getAttribute(\n      \"parentcustomerid\"\n    );\n    const parentCustomerValue = parentCustomerAttribute.getValue();\n  }\n}\n(window as any).ContactMainForm = new ContactMainForm();\n```\n\nNow rebuild with `npx webpack` and our optimized code can be deployed and tested!\n\n## That's all folks!\n\nSo, hopefully this has helped kick start your use of TypeScript, Webpack and Babel to develop Web Resources.\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt3.zip)\n\nIn the next part we'll take a look at modules and debugging.\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-Webresources-Part-3.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 3 - Webpack & Babel\ndate: 2020-04-04 22:00:00\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\n  - Webpack\n  - Babel\ncategories:\n  - D365 TypeScript\ndescription: Ok, so, err, where do we start! Webpack and Babel are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!\nexcerpt: Ok, so, err, where do we start! Webpack and Babel are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!\n---\n\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## What the \\*&^%\n\nOk, so, err, where do we start! [Webpack](https://webpack.js.org/) and [Babel](https://babeljs.io/) are big. Too big for me to cover in one post. To be honest I don't know everything about them and have only scratched the surface myself, so I'll only cover a minimal config to get people started. I'll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!\n\n### Webpack\n\n[Webpack](https://webpack.js.org/) is a \"bundler\". In basic terms it bundles/merges source files together into a single source file. Additionally it can do things like [optimize](https://webpack.js.org/configuration/optimization/) and [tree shake](https://webpack.js.org/guides/tree-shaking/#root) your source code.\n\n### Babel\n\n[Babel](https://babeljs.io/) is a JavaScript Compiler (or Transpiler). With a little configuration it can turn your source code into code that is compatible with your target browser(s) and alleviate the headache of having to write code that targets specific browsers.\n\n## Install\n\nFirstly lets install Webpack:\n\n```\nnpm install webpack webpack-cli --save-dev\n```\n\n_This installs the webpack module and it's command line interface_\n\nNext we'll install Babel:\n\n```\nnpm install @babel/core @babel/preset-env --save-dev\n```\n\n_This installs babel and a package of [presets](https://babeljs.io/docs/en/babel-preset-env) for the compiler._\n\nFinally we'll install the Babel Loader for Webpack and a TypeScript plugin for Babel:\n\n```\nnpm install babel-loader @babel/preset-TypeScript --save-dev\n```\n\n_babel-loader is used by webpack to preprocess (via babel) our source code before bundling and @babel/preset-TypeScript is a TypeScript compiler plugin for babel_\n\n## Config\n\nWe now need to configure both webpack and babel...\n\n### Webpack config\n\nCreate a file in the root folder called `webpack.config.js` and open the file, paste the following contents and save.\n\n```javascript\nmodule.exports = [\n  {\n    mode: \"development\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\"],\n    },\n    devtool: \"source-map\",\n  },\n  {\n    mode: \"production\",\n    entry: {\n      \"contact-main-form\": \"./src/contact-main-form\",\n    },\n    output: {\n      filename: \"[name].min.js\",\n    },\n    module: {\n      rules: [\n        {\n          test: /.tsx?$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n        },\n      ],\n    },\n    resolve: {\n      extensions: [\".ts\"],\n    },\n    devtool: \"source-map\",\n  },\n];\n```\n\nThe above sets up two configurations, one for development and one for production. The difference between the two is essentially the file name (production names files \\*.min.js) as by default the production mode optimizes the output.\n\n_Further reading on [webpack configuration](https://webpack.js.org/configuration/)_\n\n### Babel config\n\nCreate a file in the root folder called `babel.config.json` and open the file, paste the following contents and save.\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"ie\": \"11\"\n        }\n      }\n    ],\n    \"@babel/preset-TypeScript\"\n  ]\n}\n```\n\nThe above loads two babel presets. `preset-env` will ensure the outputted JavaScript is compatible with your target browser(s) via polyfills etc. `preset-TypeScript` will enable babel to compile our TypeScript into JavaScript.\n\n_Now we have switched to webpack and babel we aren't using the original TypeScript compiler `tsc` to compile our TypeScript into JavaScript. I'd advise reading the [following caveats](https://babeljs.io/docs/en/babel-plugin-transform-TypeScript#caveats) to help understand the differences._\n\n_Further reading on [babel configuration](https://babeljs.io/docs/en/configuration)_\n\n## Lets build!\n\nOpen a fresh terminal (`Ctrl+Shift+'`) in VS Code and run the following command to build the code:\n\n```\nnpx webpack\n```\n\nYou should now have 4 files in your `dist` folder. 2 JavaScript (1 optimized) and a source map for each.\n\n![](build-output.png)\n\nIf you take a look at the JavaScript you'll notice the non optimized version is bloated with some webpack bootstrap stuff (ES module loading, etc.), and the optimized version is broken because it has omitted (via tree shaking) our class `ContactMainForm`.\n\nWe just need to make a couple of simple changes to ensure it's included in the optimized code. Update the `contact-main-form.ts` as below:\n\n```TypeScript\nclass ContactMainForm {\n  public OnLoad(\n    executionContext: Xrm.ExecutionContext<Form.contact.Main.Contact, any>\n  ) {\n    const formContext = executionContext.getFormContext() as Form.contact.Main.Contact;\n    formContext.ui.setFormNotification(\n      \"TypeScript locked and loaded!\",\n      \"INFO\",\n      \"ts-msg\"\n    );\n    const parentCustomerAttribute = formContext.getAttribute(\n      \"parentcustomerid\"\n    );\n    const parentCustomerValue = parentCustomerAttribute.getValue();\n  }\n}\n(window as any).ContactMainForm = new ContactMainForm();\n```\n\nNow rebuild with `npx webpack` and our optimized code can be deployed and tested!\n\n## That's all folks!\n\nSo, hopefully this has helped kick start your use of TypeScript, Webpack and Babel to develop Web Resources.\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt3.zip)\n\nIn the next part we'll take a look at modules and debugging.\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-Webresources-Part-3","published":1,"updated":"2021-04-30T23:34:44.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cr0009xsum79xnf83z","content":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"What-the-amp\"><a href=\"#What-the-amp\" class=\"headerlink\" title=\"What the *&amp;^%\"></a>What the *&amp;^%</h2><p>Ok, so, err, where do we start! <a href=\"https://webpack.js.org/\">Webpack</a> and <a href=\"https://babeljs.io/\">Babel</a> are big. Too big for me to cover in one post. To be honest I don’t know everything about them and have only scratched the surface myself, so I’ll only cover a minimal config to get people started. I’ll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p><a href=\"https://webpack.js.org/\">Webpack</a> is a “bundler”. In basic terms it bundles/merges source files together into a single source file. Additionally it can do things like <a href=\"https://webpack.js.org/configuration/optimization/\">optimize</a> and <a href=\"https://webpack.js.org/guides/tree-shaking/#root\">tree shake</a> your source code.</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p><a href=\"https://babeljs.io/\">Babel</a> is a JavaScript Compiler (or Transpiler). With a little configuration it can turn your source code into code that is compatible with your target browser(s) and alleviate the headache of having to write code that targets specific browsers.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Firstly lets install Webpack:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>This installs the webpack module and it’s command line interface</em></p>\n<p>Next we’ll install Babel:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel&#x2F;core @babel&#x2F;preset-env --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>This installs babel and a package of <a href=\"https://babeljs.io/docs/en/babel-preset-env\">presets</a> for the compiler.</em></p>\n<p>Finally we’ll install the Babel Loader for Webpack and a TypeScript plugin for Babel:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-loader @babel&#x2F;preset-TypeScript --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>babel-loader is used by webpack to preprocess (via babel) our source code before bundling and @babel/preset-TypeScript is a TypeScript compiler plugin for babel</em></p>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>We now need to configure both webpack and babel…</p>\n<h3 id=\"Webpack-config\"><a href=\"#Webpack-config\" class=\"headerlink\" title=\"Webpack config\"></a>Webpack config</h3><p>Create a file in the root folder called <code>webpack.config.js</code> and open the file, paste the following contents and save.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].min.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>The above sets up two configurations, one for development and one for production. The difference between the two is essentially the file name (production names files *.min.js) as by default the production mode optimizes the output.</p>\n<p><em>Further reading on <a href=\"https://webpack.js.org/configuration/\">webpack configuration</a></em></p>\n<h3 id=\"Babel-config\"><a href=\"#Babel-config\" class=\"headerlink\" title=\"Babel config\"></a>Babel config</h3><p>Create a file in the root folder called <code>babel.config.json</code> and open the file, paste the following contents and save.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;ie&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/preset-TypeScript&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The above loads two babel presets. <code>preset-env</code> will ensure the outputted JavaScript is compatible with your target browser(s) via polyfills etc. <code>preset-TypeScript</code> will enable babel to compile our TypeScript into JavaScript.</p>\n<p><em>Now we have switched to webpack and babel we aren’t using the original TypeScript compiler <code>tsc</code> to compile our TypeScript into JavaScript. I’d advise reading the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-TypeScript#caveats\">following caveats</a> to help understand the differences.</em></p>\n<p><em>Further reading on <a href=\"https://babeljs.io/docs/en/configuration\">babel configuration</a></em></p>\n<h2 id=\"Lets-build\"><a href=\"#Lets-build\" class=\"headerlink\" title=\"Lets build!\"></a>Lets build!</h2><p>Open a fresh terminal (<code>Ctrl+Shift+&#39;</code>) in VS Code and run the following command to build the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>You should now have 4 files in your <code>dist</code> folder. 2 JavaScript (1 optimized) and a source map for each.</p>\n<p><img src=\"build-output.png\"></p>\n<p>If you take a look at the JavaScript you’ll notice the non optimized version is bloated with some webpack bootstrap stuff (ES module loading, etc.), and the optimized version is broken because it has omitted (via tree shaking) our class <code>ContactMainForm</code>.</p>\n<p>We just need to make a couple of simple changes to ensure it’s included in the optimized code. Update the <code>contact-main-form.ts</code> as below:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerAttribute = formContext.getAttribute(</span><br><span class=\"line\">      <span class=\"string\">&quot;parentcustomerid&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerValue = parentCustomerAttribute.getValue();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).ContactMainForm = <span class=\"keyword\">new</span> ContactMainForm();</span><br></pre></td></tr></table></figure>\n\n<p>Now rebuild with <code>npx webpack</code> and our optimized code can be deployed and tested!</p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>So, hopefully this has helped kick start your use of TypeScript, Webpack and Babel to develop Web Resources.</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt3.zip\">here</a></p>\n<p>In the next part we’ll take a look at modules and debugging.</p>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"What-the-amp\"><a href=\"#What-the-amp\" class=\"headerlink\" title=\"What the *&amp;^%\"></a>What the *&amp;^%</h2><p>Ok, so, err, where do we start! <a href=\"https://webpack.js.org/\">Webpack</a> and <a href=\"https://babeljs.io/\">Babel</a> are big. Too big for me to cover in one post. To be honest I don’t know everything about them and have only scratched the surface myself, so I’ll only cover a minimal config to get people started. I’ll leave it to you to read and experiment further. After all, the best way to learn is often to just throw yourself in the deep end!</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p><a href=\"https://webpack.js.org/\">Webpack</a> is a “bundler”. In basic terms it bundles/merges source files together into a single source file. Additionally it can do things like <a href=\"https://webpack.js.org/configuration/optimization/\">optimize</a> and <a href=\"https://webpack.js.org/guides/tree-shaking/#root\">tree shake</a> your source code.</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p><a href=\"https://babeljs.io/\">Babel</a> is a JavaScript Compiler (or Transpiler). With a little configuration it can turn your source code into code that is compatible with your target browser(s) and alleviate the headache of having to write code that targets specific browsers.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Firstly lets install Webpack:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>This installs the webpack module and it’s command line interface</em></p>\n<p>Next we’ll install Babel:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel&#x2F;core @babel&#x2F;preset-env --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>This installs babel and a package of <a href=\"https://babeljs.io/docs/en/babel-preset-env\">presets</a> for the compiler.</em></p>\n<p>Finally we’ll install the Babel Loader for Webpack and a TypeScript plugin for Babel:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-loader @babel&#x2F;preset-TypeScript --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><em>babel-loader is used by webpack to preprocess (via babel) our source code before bundling and @babel/preset-TypeScript is a TypeScript compiler plugin for babel</em></p>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>We now need to configure both webpack and babel…</p>\n<h3 id=\"Webpack-config\"><a href=\"#Webpack-config\" class=\"headerlink\" title=\"Webpack config\"></a>Webpack config</h3><p>Create a file in the root folder called <code>webpack.config.js</code> and open the file, paste the following contents and save.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;contact-main-form&quot;</span>: <span class=\"string\">&quot;./src/contact-main-form&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].min.js&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/.tsx?$/</span>,</span><br><span class=\"line\">          exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          loader: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      extensions: [<span class=\"string\">&quot;.ts&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devtool: <span class=\"string\">&quot;source-map&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>The above sets up two configurations, one for development and one for production. The difference between the two is essentially the file name (production names files *.min.js) as by default the production mode optimizes the output.</p>\n<p><em>Further reading on <a href=\"https://webpack.js.org/configuration/\">webpack configuration</a></em></p>\n<h3 id=\"Babel-config\"><a href=\"#Babel-config\" class=\"headerlink\" title=\"Babel config\"></a>Babel config</h3><p>Create a file in the root folder called <code>babel.config.json</code> and open the file, paste the following contents and save.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;ie&quot;</span>: <span class=\"string\">&quot;11&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/preset-TypeScript&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The above loads two babel presets. <code>preset-env</code> will ensure the outputted JavaScript is compatible with your target browser(s) via polyfills etc. <code>preset-TypeScript</code> will enable babel to compile our TypeScript into JavaScript.</p>\n<p><em>Now we have switched to webpack and babel we aren’t using the original TypeScript compiler <code>tsc</code> to compile our TypeScript into JavaScript. I’d advise reading the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-TypeScript#caveats\">following caveats</a> to help understand the differences.</em></p>\n<p><em>Further reading on <a href=\"https://babeljs.io/docs/en/configuration\">babel configuration</a></em></p>\n<h2 id=\"Lets-build\"><a href=\"#Lets-build\" class=\"headerlink\" title=\"Lets build!\"></a>Lets build!</h2><p>Open a fresh terminal (<code>Ctrl+Shift+&#39;</code>) in VS Code and run the following command to build the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>You should now have 4 files in your <code>dist</code> folder. 2 JavaScript (1 optimized) and a source map for each.</p>\n<p><img src=\"build-output.png\"></p>\n<p>If you take a look at the JavaScript you’ll notice the non optimized version is bloated with some webpack bootstrap stuff (ES module loading, etc.), and the optimized version is broken because it has omitted (via tree shaking) our class <code>ContactMainForm</code>.</p>\n<p>We just need to make a couple of simple changes to ensure it’s included in the optimized code. Update the <code>contact-main-form.ts</code> as below:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactMainForm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> OnLoad(</span><br><span class=\"line\">    executionContext: Xrm.ExecutionContext&lt;Form.contact.Main.Contact, <span class=\"built_in\">any</span>&gt;</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> formContext = executionContext.getFormContext() <span class=\"keyword\">as</span> Form.contact.Main.Contact;</span><br><span class=\"line\">    formContext.ui.setFormNotification(</span><br><span class=\"line\">      <span class=\"string\">&quot;TypeScript locked and loaded!&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;INFO&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-msg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerAttribute = formContext.getAttribute(</span><br><span class=\"line\">      <span class=\"string\">&quot;parentcustomerid&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentCustomerValue = parentCustomerAttribute.getValue();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).ContactMainForm = <span class=\"keyword\">new</span> ContactMainForm();</span><br></pre></td></tr></table></figure>\n\n<p>Now rebuild with <code>npx webpack</code> and our optimized code can be deployed and tested!</p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>So, hopefully this has helped kick start your use of TypeScript, Webpack and Babel to develop Web Resources.</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt3.zip\">here</a></p>\n<p>In the next part we’ll take a look at modules and debugging.</p>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"D365 TypeScript Web Resources - Part 5 - Unit Testing","date":"2021-01-22T00:12:23.000Z","description":"Nowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it! In this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!","excerpt":"Nowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it! In this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!","_content":"\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## Unit Tests? But my code is next level!\n\nNowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it!\n\nIn this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!\n\n## Configure Jest\n\nFirst of all lets install the jest npm packages we require:\n\n```\nnpm install jest @types/jest ts-jest --save-dev\n```\n\nNext we'll create a basic config via:\n\n```\nnpx ts-jest config:init\n```\n\nFinally we'll install xrm-mock and sinon to help us a little:\n\n```\nnpm install xrm-mock sinon @types/sinon --save-dev\n```\n\nEnsure your `package.json` is setup to run jest via `npm run test` makes sure you have the following script defined:\n\n```\n\"scripts\": {\n    \"test\": \"jest\",\n    ...\n```\n\nNow we are ready to write some tests! :-D\n\n## Writing our first test\n\nCreate a folder in the root of the project called \"tests\" and then create a new file called \"first.test.ts\".\n\nPaste the following into the new file:\n\n```TypeScript\nimport { NavigationStaticMock, XrmMockGenerator } from \"xrm-mock\";\nimport * as sinon from \"sinon\";\nimport { Pointless } from \"../src/sample\";\ndescribe(\"sample test\", () => {\n  describe(\"Pointless\", () => {\n    test(\"Should display alert\", () => {\n      XrmMockGenerator.initialise();\n      const stub = sinon.stub(\n        NavigationStaticMock.prototype,\n        \"openAlertDialog\"\n      );\n\n      const msg = \"a pointless test message\";\n      Pointless(msg);\n\n      expect(stub.called).toBeTruthy();\n      expect(stub.calledOnce).toBeTruthy();\n      expect(stub.firstCall.args[0].text).toBe(msg);\n      expect(stub.firstCall.args[0].title).toBe(\"A Pointless Message\");\n    });\n  });\n});\n```\n\n### Lets have a closer look at the test...\n\n_I'm not going to tell you how to use [jest](https://jestjs.io/) and [sinon](https://sinonjs.org/) as these already have great documentation of their own._\n\nFirst we'll \"Arrange\" our test...\nInitialise our global `Xrm` object:\n\n```TypeScript\nXrmMockGenerator.initialise();\n```\n\nStub `openAlertDialog()`. As I expect you know, `openAlertDialog()` displays a dialog in D365. Stubbing the function enables the code to execute without error given we don't have the UI and we can then test/assert the stubs properties etc.:\n\n```TypeScript\nconst stub = sinon.stub(NavigationStaticMock.prototype, \"openAlertDialog\");\n```\n\nNow lets \"Act\" by calling our function:\n\n```TypeScript\nconst msg = \"a pointless test message\";\nPointless(msg);\n```\n\nFinally we'll \"Assert\" our tests\nHas the `openAlertDialog()` stub been called?:\n\n```TypeScript\nexpect(stub.called).toBeTruthy();\n```\n\nThe `openAlertDialog()` stub should have only been called once:\n\n```TypeScript\nexpect(stub.calledOnce).toBeTruthy();\n```\n\nWas the `openAlertDialog()` stubs `alertStrings.text` parameter as expected?:\n\n```TypeScript\nexpect(stub.firstCall.args[0].text).toBe(msg);\n```\n\nWas the `openAlertDialog()` stubs `alertStrings.title` parameter as expected?:\n\n```TypeScript\nexpect(stub.firstCall.args[0].title).toBe(\"A Pointless Message\");\n```\n\nIt's quite a rudimentary test but it demonstrates the basics.\n\n### So, lets run the tests!\n\nExecute `npm run test`\n\nThe output should look something like this:\n\n```\n> jest\n\n PASS  tests/first.test.ts (10.199 s)\n  sample test\n    Pointless\n      √ Should display alert (34 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        10.811 s\nRan all test suites.\n```\n\n## Fancy a crack at mocking the WebApi?\n\nSo, we've written a function that calls Xrm.WebApi, but when we try to test that function it'll fail as the Api doesn't exist... We need to mock the Api call with a stub.\n\n### A function that calls Xrm.WebApi...\n\nFirst of all we'll create a function called `CreateAccount` (yep you guessed it, it'll create an account!)\n\n```TypeScript\nexport async function CreateAccount(account: any): Promise<Xrm.Lookup> {\n  const response = await Xrm.WebApi.createRecord(\"account\", account);\n  return response;\n}\n```\n\n_It's a simple example but it should get the point across._\n\n### Testing a function that calls Xrm.WebApi\n\nSo here's the test. This can be added to the `first.test.ts` inside `describe(\"sample test\", () => {`\n\n_It's not a great example, but it should demonstrate how we can stub the WebApi ;-)_\n\n```TypeScript\ndescribe(\"CallTheWebApi\", () => {\n  test(\"Should return a valid Xrm.Lookup\", async () => {\n    const stub = sinon\n      .stub(WebApiMock.prototype, \"createRecord\")\n      .withArgs(\"account\", sinon.match.object)\n      .resolves({\n        entityType: \"account\",\n        id: \"9bce6686-48d5-4d6f-85a2-da0eea30984d\",\n        name: \"Jest Account\",\n      } as LookupValueMock);\n\n    const result: LookupValueMock = await CreateAccount({\n      name: \"Jest Account\",\n      creditonhold: false,\n      address1_latitude: 47.639583,\n      description: \"This is the description of the sample account\",\n      revenue: 5000000,\n      accountcategorycode: 1,\n    });\n\n    expect(stub.calledOnce).toBeTruthy();\n    expect(result).toBeTruthy();\n    expect(result.name).toBe(\"Jest Account\");\n  });\n});\n```\n\nYou'll notice the absence of `XrmMockGenerator.initialise();`. I moved this to the `beforeEach` within `describe(\"sample test\", () => {` like so\n\n```TypeScript\ndescribe(\"sample test\", () => {\n  beforeEach(() => {\n    XrmMockGenerator.initialise();\n  });\n  ...\n```\n\n### Lets have a closer look again\n\nFirst we stub the `createRecord` function via the `WebApiMock` object provided by `xrm-mock`\n\n```TypeScript\nconst stub = sinon.stub(WebApiMock.prototype, \"createRecord\");\n```\n\nThen we define the arguments for that stub (optional). Notice the use of the `sinon.match` to match an object.\n\n```TypeScript\n  .withArgs(\"account\", sinon.match.object)\n```\n\n_NOTE If we didn't do the above the stub would be executed for all calls to `Xrm.WebApi.createRecord`_\n\nFinally we tell the stub what we would like it to return, or in this case as it's a async/promise we tell it what to resolve.\n\n```TypeScript\n  .resolves({\n    entityType: \"account\",\n    id: \"9bce6686-48d5-4d6f-85a2-da0eea30984d\",\n    name: \"Jest Account\",\n  } as LookupValueMock);\n```\n\n## OK OK! Lets run the bloody tests!\n\nExecute `npm run test` and you should now get something similar to the following output\n\n```\n> jest\n\n PASS  tests/first.test.ts\n  sample test\n    Pointless\n      √ Should display alert (7 ms)\n    CallTheWebApi\n      √ Should return a valid Xrm.Lookup (2 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        2.34 s, estimated 27 s\nRan all test suites.\n```\n\n## That's all folks!\n\nRemember to take a look at [jest](https://jestjs.io/), [sinon](https://sinonjs.org/), and [xrm-mock](https://github.com/camelCaseDave/xrm-mock)\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt5.zip)\n\nIn the next part we'll take a look at how we can integrate Azure Application Insights into the Webresources.\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-Webresources-Part-5.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 5 - Unit Testing\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\n  - Unit Testing\n  - Jest\n  - XrmMock\ncategories:\n  - D365 TypeScript\ndate: 2021-01-22 00:12:23\ndescription: Nowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it! In this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!\nexcerpt: Nowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it! In this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!\n---\n\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n## Unit Tests? But my code is next level!\n\nNowadays there is no excuse to not unit test your code. It's becoming easy and more valuable, so don't not do it!\n\nIn this post I'm going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365... err Dataverse... err Power Apps... or whatever we are calling it today!\n\n## Configure Jest\n\nFirst of all lets install the jest npm packages we require:\n\n```\nnpm install jest @types/jest ts-jest --save-dev\n```\n\nNext we'll create a basic config via:\n\n```\nnpx ts-jest config:init\n```\n\nFinally we'll install xrm-mock and sinon to help us a little:\n\n```\nnpm install xrm-mock sinon @types/sinon --save-dev\n```\n\nEnsure your `package.json` is setup to run jest via `npm run test` makes sure you have the following script defined:\n\n```\n\"scripts\": {\n    \"test\": \"jest\",\n    ...\n```\n\nNow we are ready to write some tests! :-D\n\n## Writing our first test\n\nCreate a folder in the root of the project called \"tests\" and then create a new file called \"first.test.ts\".\n\nPaste the following into the new file:\n\n```TypeScript\nimport { NavigationStaticMock, XrmMockGenerator } from \"xrm-mock\";\nimport * as sinon from \"sinon\";\nimport { Pointless } from \"../src/sample\";\ndescribe(\"sample test\", () => {\n  describe(\"Pointless\", () => {\n    test(\"Should display alert\", () => {\n      XrmMockGenerator.initialise();\n      const stub = sinon.stub(\n        NavigationStaticMock.prototype,\n        \"openAlertDialog\"\n      );\n\n      const msg = \"a pointless test message\";\n      Pointless(msg);\n\n      expect(stub.called).toBeTruthy();\n      expect(stub.calledOnce).toBeTruthy();\n      expect(stub.firstCall.args[0].text).toBe(msg);\n      expect(stub.firstCall.args[0].title).toBe(\"A Pointless Message\");\n    });\n  });\n});\n```\n\n### Lets have a closer look at the test...\n\n_I'm not going to tell you how to use [jest](https://jestjs.io/) and [sinon](https://sinonjs.org/) as these already have great documentation of their own._\n\nFirst we'll \"Arrange\" our test...\nInitialise our global `Xrm` object:\n\n```TypeScript\nXrmMockGenerator.initialise();\n```\n\nStub `openAlertDialog()`. As I expect you know, `openAlertDialog()` displays a dialog in D365. Stubbing the function enables the code to execute without error given we don't have the UI and we can then test/assert the stubs properties etc.:\n\n```TypeScript\nconst stub = sinon.stub(NavigationStaticMock.prototype, \"openAlertDialog\");\n```\n\nNow lets \"Act\" by calling our function:\n\n```TypeScript\nconst msg = \"a pointless test message\";\nPointless(msg);\n```\n\nFinally we'll \"Assert\" our tests\nHas the `openAlertDialog()` stub been called?:\n\n```TypeScript\nexpect(stub.called).toBeTruthy();\n```\n\nThe `openAlertDialog()` stub should have only been called once:\n\n```TypeScript\nexpect(stub.calledOnce).toBeTruthy();\n```\n\nWas the `openAlertDialog()` stubs `alertStrings.text` parameter as expected?:\n\n```TypeScript\nexpect(stub.firstCall.args[0].text).toBe(msg);\n```\n\nWas the `openAlertDialog()` stubs `alertStrings.title` parameter as expected?:\n\n```TypeScript\nexpect(stub.firstCall.args[0].title).toBe(\"A Pointless Message\");\n```\n\nIt's quite a rudimentary test but it demonstrates the basics.\n\n### So, lets run the tests!\n\nExecute `npm run test`\n\nThe output should look something like this:\n\n```\n> jest\n\n PASS  tests/first.test.ts (10.199 s)\n  sample test\n    Pointless\n      √ Should display alert (34 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        10.811 s\nRan all test suites.\n```\n\n## Fancy a crack at mocking the WebApi?\n\nSo, we've written a function that calls Xrm.WebApi, but when we try to test that function it'll fail as the Api doesn't exist... We need to mock the Api call with a stub.\n\n### A function that calls Xrm.WebApi...\n\nFirst of all we'll create a function called `CreateAccount` (yep you guessed it, it'll create an account!)\n\n```TypeScript\nexport async function CreateAccount(account: any): Promise<Xrm.Lookup> {\n  const response = await Xrm.WebApi.createRecord(\"account\", account);\n  return response;\n}\n```\n\n_It's a simple example but it should get the point across._\n\n### Testing a function that calls Xrm.WebApi\n\nSo here's the test. This can be added to the `first.test.ts` inside `describe(\"sample test\", () => {`\n\n_It's not a great example, but it should demonstrate how we can stub the WebApi ;-)_\n\n```TypeScript\ndescribe(\"CallTheWebApi\", () => {\n  test(\"Should return a valid Xrm.Lookup\", async () => {\n    const stub = sinon\n      .stub(WebApiMock.prototype, \"createRecord\")\n      .withArgs(\"account\", sinon.match.object)\n      .resolves({\n        entityType: \"account\",\n        id: \"9bce6686-48d5-4d6f-85a2-da0eea30984d\",\n        name: \"Jest Account\",\n      } as LookupValueMock);\n\n    const result: LookupValueMock = await CreateAccount({\n      name: \"Jest Account\",\n      creditonhold: false,\n      address1_latitude: 47.639583,\n      description: \"This is the description of the sample account\",\n      revenue: 5000000,\n      accountcategorycode: 1,\n    });\n\n    expect(stub.calledOnce).toBeTruthy();\n    expect(result).toBeTruthy();\n    expect(result.name).toBe(\"Jest Account\");\n  });\n});\n```\n\nYou'll notice the absence of `XrmMockGenerator.initialise();`. I moved this to the `beforeEach` within `describe(\"sample test\", () => {` like so\n\n```TypeScript\ndescribe(\"sample test\", () => {\n  beforeEach(() => {\n    XrmMockGenerator.initialise();\n  });\n  ...\n```\n\n### Lets have a closer look again\n\nFirst we stub the `createRecord` function via the `WebApiMock` object provided by `xrm-mock`\n\n```TypeScript\nconst stub = sinon.stub(WebApiMock.prototype, \"createRecord\");\n```\n\nThen we define the arguments for that stub (optional). Notice the use of the `sinon.match` to match an object.\n\n```TypeScript\n  .withArgs(\"account\", sinon.match.object)\n```\n\n_NOTE If we didn't do the above the stub would be executed for all calls to `Xrm.WebApi.createRecord`_\n\nFinally we tell the stub what we would like it to return, or in this case as it's a async/promise we tell it what to resolve.\n\n```TypeScript\n  .resolves({\n    entityType: \"account\",\n    id: \"9bce6686-48d5-4d6f-85a2-da0eea30984d\",\n    name: \"Jest Account\",\n  } as LookupValueMock);\n```\n\n## OK OK! Lets run the bloody tests!\n\nExecute `npm run test` and you should now get something similar to the following output\n\n```\n> jest\n\n PASS  tests/first.test.ts\n  sample test\n    Pointless\n      √ Should display alert (7 ms)\n    CallTheWebApi\n      √ Should return a valid Xrm.Lookup (2 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        2.34 s, estimated 27 s\nRan all test suites.\n```\n\n## That's all folks!\n\nRemember to take a look at [jest](https://jestjs.io/), [sinon](https://sinonjs.org/), and [xrm-mock](https://github.com/camelCaseDave/xrm-mock)\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt5.zip)\n\nIn the next part we'll take a look at how we can integrate Azure Application Insights into the Webresources.\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-Webresources-Part-5","published":1,"updated":"2021-04-30T23:34:44.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cu000bxsum5fncfjzx","content":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"Unit-Tests-But-my-code-is-next-level\"><a href=\"#Unit-Tests-But-my-code-is-next-level\" class=\"headerlink\" title=\"Unit Tests? But my code is next level!\"></a>Unit Tests? But my code is next level!</h2><p>Nowadays there is no excuse to not unit test your code. It’s becoming easy and more valuable, so don’t not do it!</p>\n<p>In this post I’m going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365… err Dataverse… err Power Apps… or whatever we are calling it today!</p>\n<h2 id=\"Configure-Jest\"><a href=\"#Configure-Jest\" class=\"headerlink\" title=\"Configure Jest\"></a>Configure Jest</h2><p>First of all lets install the jest npm packages we require:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jest @types&#x2F;jest ts-jest --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Next we’ll create a basic config via:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx ts-jest config:init</span><br></pre></td></tr></table></figure>\n\n<p>Finally we’ll install xrm-mock and sinon to help us a little:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install xrm-mock sinon @types&#x2F;sinon --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Ensure your <code>package.json</code> is setup to run jest via <code>npm run test</code> makes sure you have the following script defined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;jest&quot;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>Now we are ready to write some tests! :-D</p>\n<h2 id=\"Writing-our-first-test\"><a href=\"#Writing-our-first-test\" class=\"headerlink\" title=\"Writing our first test\"></a>Writing our first test</h2><p>Create a folder in the root of the project called “tests” and then create a new file called “first.test.ts”.</p>\n<p>Paste the following into the new file:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NavigationStaticMock, XrmMockGenerator &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;xrm-mock&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/sample&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;sample test&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">&quot;Pointless&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    test(<span class=\"string\">&quot;Should display alert&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      XrmMockGenerator.initialise();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> stub = sinon.stub(</span><br><span class=\"line\">        NavigationStaticMock.prototype,</span><br><span class=\"line\">        <span class=\"string\">&quot;openAlertDialog&quot;</span></span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;a pointless test message&quot;</span>;</span><br><span class=\"line\">      Pointless(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">      expect(stub.called).toBeTruthy();</span><br><span class=\"line\">      expect(stub.calledOnce).toBeTruthy();</span><br><span class=\"line\">      expect(stub.firstCall.args[<span class=\"number\">0</span>].text).toBe(msg);</span><br><span class=\"line\">      expect(stub.firstCall.args[<span class=\"number\">0</span>].title).toBe(<span class=\"string\">&quot;A Pointless Message&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lets-have-a-closer-look-at-the-test…\"><a href=\"#Lets-have-a-closer-look-at-the-test…\" class=\"headerlink\" title=\"Lets have a closer look at the test…\"></a>Lets have a closer look at the test…</h3><p><em>I’m not going to tell you how to use <a href=\"https://jestjs.io/\">jest</a> and <a href=\"https://sinonjs.org/\">sinon</a> as these already have great documentation of their own.</em></p>\n<p>First we’ll “Arrange” our test…<br>Initialise our global <code>Xrm</code> object:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XrmMockGenerator.initialise();</span><br></pre></td></tr></table></figure>\n\n<p>Stub <code>openAlertDialog()</code>. As I expect you know, <code>openAlertDialog()</code> displays a dialog in D365. Stubbing the function enables the code to execute without error given we don’t have the UI and we can then test/assert the stubs properties etc.:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stub = sinon.stub(NavigationStaticMock.prototype, <span class=\"string\">&quot;openAlertDialog&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Now lets “Act” by calling our function:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;a pointless test message&quot;</span>;</span><br><span class=\"line\">Pointless(msg);</span><br></pre></td></tr></table></figure>\n\n<p>Finally we’ll “Assert” our tests<br>Has the <code>openAlertDialog()</code> stub been called?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.called).toBeTruthy();</span><br></pre></td></tr></table></figure>\n\n<p>The <code>openAlertDialog()</code> stub should have only been called once:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.calledOnce).toBeTruthy();</span><br></pre></td></tr></table></figure>\n\n<p>Was the <code>openAlertDialog()</code> stubs <code>alertStrings.text</code> parameter as expected?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.firstCall.args[<span class=\"number\">0</span>].text).toBe(msg);</span><br></pre></td></tr></table></figure>\n\n<p>Was the <code>openAlertDialog()</code> stubs <code>alertStrings.title</code> parameter as expected?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.firstCall.args[<span class=\"number\">0</span>].title).toBe(<span class=\"string\">&quot;A Pointless Message&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>It’s quite a rudimentary test but it demonstrates the basics.</p>\n<h3 id=\"So-lets-run-the-tests\"><a href=\"#So-lets-run-the-tests\" class=\"headerlink\" title=\"So, lets run the tests!\"></a>So, lets run the tests!</h3><p>Execute <code>npm run test</code></p>\n<p>The output should look something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; jest</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  tests&#x2F;first.test.ts (10.199 s)</span><br><span class=\"line\">  sample test</span><br><span class=\"line\">    Pointless</span><br><span class=\"line\">      √ Should display alert (34 ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       1 passed, 1 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        10.811 s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fancy-a-crack-at-mocking-the-WebApi\"><a href=\"#Fancy-a-crack-at-mocking-the-WebApi\" class=\"headerlink\" title=\"Fancy a crack at mocking the WebApi?\"></a>Fancy a crack at mocking the WebApi?</h2><p>So, we’ve written a function that calls Xrm.WebApi, but when we try to test that function it’ll fail as the Api doesn’t exist… We need to mock the Api call with a stub.</p>\n<h3 id=\"A-function-that-calls-Xrm-WebApi…\"><a href=\"#A-function-that-calls-Xrm-WebApi…\" class=\"headerlink\" title=\"A function that calls Xrm.WebApi…\"></a>A function that calls Xrm.WebApi…</h3><p>First of all we’ll create a function called <code>CreateAccount</code> (yep you guessed it, it’ll create an account!)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateAccount</span>(<span class=\"params\">account: <span class=\"built_in\">any</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Xrm</span>.<span class=\"title\">Lookup</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> Xrm.WebApi.createRecord(<span class=\"string\">&quot;account&quot;</span>, account);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>It’s a simple example but it should get the point across.</em></p>\n<h3 id=\"Testing-a-function-that-calls-Xrm-WebApi\"><a href=\"#Testing-a-function-that-calls-Xrm-WebApi\" class=\"headerlink\" title=\"Testing a function that calls Xrm.WebApi\"></a>Testing a function that calls Xrm.WebApi</h3><p>So here’s the test. This can be added to the <code>first.test.ts</code> inside <code>describe(&quot;sample test&quot;, () =&gt; &#123;</code></p>\n<p><em>It’s not a great example, but it should demonstrate how we can stub the WebApi ;-)</em></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&quot;CallTheWebApi&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;Should return a valid Xrm.Lookup&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stub = sinon</span><br><span class=\"line\">      .stub(WebApiMock.prototype, <span class=\"string\">&quot;createRecord&quot;</span>)</span><br><span class=\"line\">      .withArgs(<span class=\"string\">&quot;account&quot;</span>, sinon.match.object)</span><br><span class=\"line\">      .resolves(&#123;</span><br><span class=\"line\">        entityType: <span class=\"string\">&quot;account&quot;</span>,</span><br><span class=\"line\">        id: <span class=\"string\">&quot;9bce6686-48d5-4d6f-85a2-da0eea30984d&quot;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">      &#125; <span class=\"keyword\">as</span> LookupValueMock);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result: LookupValueMock = <span class=\"keyword\">await</span> CreateAccount(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">      creditonhold: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      address1_latitude: <span class=\"number\">47.639583</span>,</span><br><span class=\"line\">      description: <span class=\"string\">&quot;This is the description of the sample account&quot;</span>,</span><br><span class=\"line\">      revenue: <span class=\"number\">5000000</span>,</span><br><span class=\"line\">      accountcategorycode: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(stub.calledOnce).toBeTruthy();</span><br><span class=\"line\">    expect(result).toBeTruthy();</span><br><span class=\"line\">    expect(result.name).toBe(<span class=\"string\">&quot;Jest Account&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice the absence of <code>XrmMockGenerator.initialise();</code>. I moved this to the <code>beforeEach</code> within <code>describe(&quot;sample test&quot;, () =&gt; &#123;</code> like so</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&quot;sample test&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    XrmMockGenerator.initialise();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lets-have-a-closer-look-again\"><a href=\"#Lets-have-a-closer-look-again\" class=\"headerlink\" title=\"Lets have a closer look again\"></a>Lets have a closer look again</h3><p>First we stub the <code>createRecord</code> function via the <code>WebApiMock</code> object provided by <code>xrm-mock</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stub = sinon.stub(WebApiMock.prototype, <span class=\"string\">&quot;createRecord&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Then we define the arguments for that stub (optional). Notice the use of the <code>sinon.match</code> to match an object.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.withArgs(<span class=\"string\">&quot;account&quot;</span>, sinon.match.object)</span><br></pre></td></tr></table></figure>\n\n<p><em>NOTE If we didn’t do the above the stub would be executed for all calls to <code>Xrm.WebApi.createRecord</code></em></p>\n<p>Finally we tell the stub what we would like it to return, or in this case as it’s a async/promise we tell it what to resolve.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.resolves(&#123;</span><br><span class=\"line\">  entityType: <span class=\"string\">&quot;account&quot;</span>,</span><br><span class=\"line\">  id: <span class=\"string\">&quot;9bce6686-48d5-4d6f-85a2-da0eea30984d&quot;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">as</span> LookupValueMock);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"OK-OK-Lets-run-the-bloody-tests\"><a href=\"#OK-OK-Lets-run-the-bloody-tests\" class=\"headerlink\" title=\"OK OK! Lets run the bloody tests!\"></a>OK OK! Lets run the bloody tests!</h2><p>Execute <code>npm run test</code> and you should now get something similar to the following output</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; jest</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  tests&#x2F;first.test.ts</span><br><span class=\"line\">  sample test</span><br><span class=\"line\">    Pointless</span><br><span class=\"line\">      √ Should display alert (7 ms)</span><br><span class=\"line\">    CallTheWebApi</span><br><span class=\"line\">      √ Should return a valid Xrm.Lookup (2 ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       2 passed, 2 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        2.34 s, estimated 27 s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>Remember to take a look at <a href=\"https://jestjs.io/\">jest</a>, <a href=\"https://sinonjs.org/\">sinon</a>, and <a href=\"https://github.com/camelCaseDave/xrm-mock\">xrm-mock</a></p>\n<p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt5.zip\">here</a></p>\n<p>In the next part we’ll take a look at how we can integrate Azure Application Insights into the Webresources.</p>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h2 id=\"Unit-Tests-But-my-code-is-next-level\"><a href=\"#Unit-Tests-But-my-code-is-next-level\" class=\"headerlink\" title=\"Unit Tests? But my code is next level!\"></a>Unit Tests? But my code is next level!</h2><p>Nowadays there is no excuse to not unit test your code. It’s becoming easy and more valuable, so don’t not do it!</p>\n<p>In this post I’m going to provide a basic guide to get you started with unit tests and TypeScript webresources for Dynamics 365… err Dataverse… err Power Apps… or whatever we are calling it today!</p>\n<h2 id=\"Configure-Jest\"><a href=\"#Configure-Jest\" class=\"headerlink\" title=\"Configure Jest\"></a>Configure Jest</h2><p>First of all lets install the jest npm packages we require:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jest @types&#x2F;jest ts-jest --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Next we’ll create a basic config via:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx ts-jest config:init</span><br></pre></td></tr></table></figure>\n\n<p>Finally we’ll install xrm-mock and sinon to help us a little:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install xrm-mock sinon @types&#x2F;sinon --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Ensure your <code>package.json</code> is setup to run jest via <code>npm run test</code> makes sure you have the following script defined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;jest&quot;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>Now we are ready to write some tests! :-D</p>\n<h2 id=\"Writing-our-first-test\"><a href=\"#Writing-our-first-test\" class=\"headerlink\" title=\"Writing our first test\"></a>Writing our first test</h2><p>Create a folder in the root of the project called “tests” and then create a new file called “first.test.ts”.</p>\n<p>Paste the following into the new file:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NavigationStaticMock, XrmMockGenerator &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;xrm-mock&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pointless &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/sample&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;sample test&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">&quot;Pointless&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    test(<span class=\"string\">&quot;Should display alert&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      XrmMockGenerator.initialise();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> stub = sinon.stub(</span><br><span class=\"line\">        NavigationStaticMock.prototype,</span><br><span class=\"line\">        <span class=\"string\">&quot;openAlertDialog&quot;</span></span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;a pointless test message&quot;</span>;</span><br><span class=\"line\">      Pointless(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">      expect(stub.called).toBeTruthy();</span><br><span class=\"line\">      expect(stub.calledOnce).toBeTruthy();</span><br><span class=\"line\">      expect(stub.firstCall.args[<span class=\"number\">0</span>].text).toBe(msg);</span><br><span class=\"line\">      expect(stub.firstCall.args[<span class=\"number\">0</span>].title).toBe(<span class=\"string\">&quot;A Pointless Message&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lets-have-a-closer-look-at-the-test…\"><a href=\"#Lets-have-a-closer-look-at-the-test…\" class=\"headerlink\" title=\"Lets have a closer look at the test…\"></a>Lets have a closer look at the test…</h3><p><em>I’m not going to tell you how to use <a href=\"https://jestjs.io/\">jest</a> and <a href=\"https://sinonjs.org/\">sinon</a> as these already have great documentation of their own.</em></p>\n<p>First we’ll “Arrange” our test…<br>Initialise our global <code>Xrm</code> object:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XrmMockGenerator.initialise();</span><br></pre></td></tr></table></figure>\n\n<p>Stub <code>openAlertDialog()</code>. As I expect you know, <code>openAlertDialog()</code> displays a dialog in D365. Stubbing the function enables the code to execute without error given we don’t have the UI and we can then test/assert the stubs properties etc.:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stub = sinon.stub(NavigationStaticMock.prototype, <span class=\"string\">&quot;openAlertDialog&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Now lets “Act” by calling our function:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;a pointless test message&quot;</span>;</span><br><span class=\"line\">Pointless(msg);</span><br></pre></td></tr></table></figure>\n\n<p>Finally we’ll “Assert” our tests<br>Has the <code>openAlertDialog()</code> stub been called?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.called).toBeTruthy();</span><br></pre></td></tr></table></figure>\n\n<p>The <code>openAlertDialog()</code> stub should have only been called once:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.calledOnce).toBeTruthy();</span><br></pre></td></tr></table></figure>\n\n<p>Was the <code>openAlertDialog()</code> stubs <code>alertStrings.text</code> parameter as expected?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.firstCall.args[<span class=\"number\">0</span>].text).toBe(msg);</span><br></pre></td></tr></table></figure>\n\n<p>Was the <code>openAlertDialog()</code> stubs <code>alertStrings.title</code> parameter as expected?:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(stub.firstCall.args[<span class=\"number\">0</span>].title).toBe(<span class=\"string\">&quot;A Pointless Message&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>It’s quite a rudimentary test but it demonstrates the basics.</p>\n<h3 id=\"So-lets-run-the-tests\"><a href=\"#So-lets-run-the-tests\" class=\"headerlink\" title=\"So, lets run the tests!\"></a>So, lets run the tests!</h3><p>Execute <code>npm run test</code></p>\n<p>The output should look something like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; jest</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  tests&#x2F;first.test.ts (10.199 s)</span><br><span class=\"line\">  sample test</span><br><span class=\"line\">    Pointless</span><br><span class=\"line\">      √ Should display alert (34 ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       1 passed, 1 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        10.811 s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fancy-a-crack-at-mocking-the-WebApi\"><a href=\"#Fancy-a-crack-at-mocking-the-WebApi\" class=\"headerlink\" title=\"Fancy a crack at mocking the WebApi?\"></a>Fancy a crack at mocking the WebApi?</h2><p>So, we’ve written a function that calls Xrm.WebApi, but when we try to test that function it’ll fail as the Api doesn’t exist… We need to mock the Api call with a stub.</p>\n<h3 id=\"A-function-that-calls-Xrm-WebApi…\"><a href=\"#A-function-that-calls-Xrm-WebApi…\" class=\"headerlink\" title=\"A function that calls Xrm.WebApi…\"></a>A function that calls Xrm.WebApi…</h3><p>First of all we’ll create a function called <code>CreateAccount</code> (yep you guessed it, it’ll create an account!)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateAccount</span>(<span class=\"params\">account: <span class=\"built_in\">any</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Xrm</span>.<span class=\"title\">Lookup</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> Xrm.WebApi.createRecord(<span class=\"string\">&quot;account&quot;</span>, account);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>It’s a simple example but it should get the point across.</em></p>\n<h3 id=\"Testing-a-function-that-calls-Xrm-WebApi\"><a href=\"#Testing-a-function-that-calls-Xrm-WebApi\" class=\"headerlink\" title=\"Testing a function that calls Xrm.WebApi\"></a>Testing a function that calls Xrm.WebApi</h3><p>So here’s the test. This can be added to the <code>first.test.ts</code> inside <code>describe(&quot;sample test&quot;, () =&gt; &#123;</code></p>\n<p><em>It’s not a great example, but it should demonstrate how we can stub the WebApi ;-)</em></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&quot;CallTheWebApi&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;Should return a valid Xrm.Lookup&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stub = sinon</span><br><span class=\"line\">      .stub(WebApiMock.prototype, <span class=\"string\">&quot;createRecord&quot;</span>)</span><br><span class=\"line\">      .withArgs(<span class=\"string\">&quot;account&quot;</span>, sinon.match.object)</span><br><span class=\"line\">      .resolves(&#123;</span><br><span class=\"line\">        entityType: <span class=\"string\">&quot;account&quot;</span>,</span><br><span class=\"line\">        id: <span class=\"string\">&quot;9bce6686-48d5-4d6f-85a2-da0eea30984d&quot;</span>,</span><br><span class=\"line\">        name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">      &#125; <span class=\"keyword\">as</span> LookupValueMock);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result: LookupValueMock = <span class=\"keyword\">await</span> CreateAccount(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">      creditonhold: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      address1_latitude: <span class=\"number\">47.639583</span>,</span><br><span class=\"line\">      description: <span class=\"string\">&quot;This is the description of the sample account&quot;</span>,</span><br><span class=\"line\">      revenue: <span class=\"number\">5000000</span>,</span><br><span class=\"line\">      accountcategorycode: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(stub.calledOnce).toBeTruthy();</span><br><span class=\"line\">    expect(result).toBeTruthy();</span><br><span class=\"line\">    expect(result.name).toBe(<span class=\"string\">&quot;Jest Account&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice the absence of <code>XrmMockGenerator.initialise();</code>. I moved this to the <code>beforeEach</code> within <code>describe(&quot;sample test&quot;, () =&gt; &#123;</code> like so</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&quot;sample test&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    XrmMockGenerator.initialise();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lets-have-a-closer-look-again\"><a href=\"#Lets-have-a-closer-look-again\" class=\"headerlink\" title=\"Lets have a closer look again\"></a>Lets have a closer look again</h3><p>First we stub the <code>createRecord</code> function via the <code>WebApiMock</code> object provided by <code>xrm-mock</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stub = sinon.stub(WebApiMock.prototype, <span class=\"string\">&quot;createRecord&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Then we define the arguments for that stub (optional). Notice the use of the <code>sinon.match</code> to match an object.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.withArgs(<span class=\"string\">&quot;account&quot;</span>, sinon.match.object)</span><br></pre></td></tr></table></figure>\n\n<p><em>NOTE If we didn’t do the above the stub would be executed for all calls to <code>Xrm.WebApi.createRecord</code></em></p>\n<p>Finally we tell the stub what we would like it to return, or in this case as it’s a async/promise we tell it what to resolve.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.resolves(&#123;</span><br><span class=\"line\">  entityType: <span class=\"string\">&quot;account&quot;</span>,</span><br><span class=\"line\">  id: <span class=\"string\">&quot;9bce6686-48d5-4d6f-85a2-da0eea30984d&quot;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Jest Account&quot;</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">as</span> LookupValueMock);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"OK-OK-Lets-run-the-bloody-tests\"><a href=\"#OK-OK-Lets-run-the-bloody-tests\" class=\"headerlink\" title=\"OK OK! Lets run the bloody tests!\"></a>OK OK! Lets run the bloody tests!</h2><p>Execute <code>npm run test</code> and you should now get something similar to the following output</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; jest</span><br><span class=\"line\"></span><br><span class=\"line\"> PASS  tests&#x2F;first.test.ts</span><br><span class=\"line\">  sample test</span><br><span class=\"line\">    Pointless</span><br><span class=\"line\">      √ Should display alert (7 ms)</span><br><span class=\"line\">    CallTheWebApi</span><br><span class=\"line\">      √ Should return a valid Xrm.Lookup (2 ms)</span><br><span class=\"line\"></span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       2 passed, 2 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        2.34 s, estimated 27 s</span><br><span class=\"line\">Ran all test suites.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>Remember to take a look at <a href=\"https://jestjs.io/\">jest</a>, <a href=\"https://sinonjs.org/\">sinon</a>, and <a href=\"https://github.com/camelCaseDave/xrm-mock\">xrm-mock</a></p>\n<p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt5.zip\">here</a></p>\n<p>In the next part we’ll take a look at how we can integrate Azure Application Insights into the Webresources.</p>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"D365 TypeScript Web Resources - Part 6 - Application Insights","date":"2021-04-30T22:00:00.000Z","description":"Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. In this post I'll go though the steps required to set it up in your TypeScript Webresources project.","excerpt":"Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. In this post I'll go though the steps required to set it up in your TypeScript Webresources project.","_content":"\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n# Application Insights\n\n## What is Application Insights?\n\n> Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. It will automatically detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It's designed to help you continuously improve performance and usability. It works for apps on a wide variety of platforms including .NET, Node.js, Java, and Python hosted on-premises, hybrid, or any public cloud. It integrates with your DevOps process, and has connection points to a variety of development tools. It can monitor and analyze telemetry from mobile apps by integrating with Visual Studio App Center.\n\n[https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)\n\n## Setup\n\nFirst lets install the npm package(s):\n\n```\nnpm install @microsoft/applicationinsights-web\n```\n\nNext we need to setup Application Insights in Azure. If you don't have an azure subscription you can signup for a free trial [here](https://azure.microsoft.com/en-gb/free/).\n\nCreate an Application Insights Resource in Azure by following the steps [here](https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource) (you can stop at the bit where you copy the instrumentation key)\n\nNow you have an app insights resource and the instrumentation key we are ready to go!\n\n## The Code\n\nFirst we'll put together a little module that encapsulates a minimal setup of Application Insights API\n\n```typescript\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-web\";\n\nconst init = () => {\n  const appins = new ApplicationInsights({\n    config: {\n      instrumentationKey: \"YOUR_KEY\",\n    },\n  });\n  appins.loadAppInsights();\n  (window as any).d365ts_appinsights = appins;\n  return appins;\n};\n\nexport const appInsights = (window as any).d365ts_appinsights\n  ? ((window as any).d365ts_appinsights as ApplicationInsights)\n  : init();\n```\n\nNow, we can simply import our module\n\n```typescript\nimport { appInsights } from \"./appinsights\";\n```\n\nAnd start tracking page views\n\n```typescript\nappInsights.trackPageView();\n```\n\nOr track exceptions\n\n```typescript\nappInsights.trackException({\n  exception: { message: \"This is an error\", name: \"Onload Error\" },\n});\n```\n\nThere are also other tracking functions `trackMetric`, `trackEvent`, `trackTrace`, etc.\n\n## Telemetry Initializer\n\nOne of the great things about the telemetry initializer is that it allow you to define some custom data/properties to include when tracking\n\n```typescript\nappins.addTelemetryInitializer((item) => {\n  const globalCtx = Xrm.Utility.getGlobalContext();\n  item.data.Username = globalCtx.userSettings?.userName;\n  item.data.UserId = globalCtx.userSettings?.userId;\n  item.data.SecurityRoles = (globalCtx.userSettings?.roles as any)\n    ?.getAll()\n    ?.map((item) => item.name)\n    ?.join(\"|\");\n  item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;\n  item.data.Client = globalCtx.client?.getClient();\n  item.data.ClientState = globalCtx.client?.getClientState();\n});\n```\n\nTo have this included in all tracking we can add it with the module...\n\n```typescript\nconst init = () => {\n  const appins = new ApplicationInsights({\n    config: {\n      instrumentationKey: \"d5656791-01e1-4d2e-9172-08fd79545a97\",\n    },\n  });\n  appins.loadAppInsights();\n  appins.addTelemetryInitializer((item) => {\n    const globalCtx = Xrm.Utility.getGlobalContext();\n    item.data.Username = globalCtx.userSettings?.userName;\n    item.data.UserId = globalCtx.userSettings?.userId;\n    item.data.SecurityRoles = (globalCtx.userSettings?.roles as any)\n      ?.getAll()\n      ?.map((item) => item.name)\n      ?.join(\"|\");\n    item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;\n    item.data.Client = globalCtx.client?.getClient();\n    item.data.ClientState = globalCtx.client?.getClientState();\n  });\n  (window as any).d365ts_appinsights = appins;\n  return appins;\n};\n```\n\nYou may even want to add a second telemetry initializer for adding some data from the form context\n\n```typescript\nexport const addFormContextTelemetryInitializer = (\n  formContext: Xrm.BasicPage\n) => {\n  appInsights.addTelemetryInitializer((item) => {\n    item.data.EntityName = formContext.data?.entity?.getEntityName();\n    item.data.EntityId = formContext.data?.entity?.getId();\n    item.data.FormName = formContext.ui?.formSelector\n      ?.getCurrentItem()\n      ?.getLabel();\n    item.data.FormType = formContext.ui?.getFormType();\n  });\n};\n```\n\nNow when the form loads we can add the form context initializer\n\n```typescript\naddFormContextTelemetryInitializer((formContext as unknown) as Xrm.BasicPage);\n```\n\n## What's it look like!?\n\nOk ok! Here is what all that lovely data will look like in Azure Application Insights...\n\nFirst we have the results in the transaction search:\n![transaction search](log.png)\n\nThen after selecting a result we can see the detail:\n![End-to-end transaction details](detail.png)\n\nAnd there we have it!\n\n## That's all folks!\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt6.zip)\n\nThanks for reading.\nOllie\n","source":"_posts/D365-Typescript-Webresources-Part-6.md","raw":"---\ntitle: D365 TypeScript Web Resources - Part 6 - Application Insights\ndate: 2021-04-30 22:00:00\ntags:\n  - D365\n  - Web Resources\n  - TypeScript\n  - JavaScript\ncategories:\n  - D365 TypeScript\ndescription: Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. In this post I'll go though the steps required to set it up in your TypeScript Webresources project.\nexcerpt: Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. In this post I'll go though the steps required to set it up in your TypeScript Webresources project.\n---\n\nBefore you get stuck into this make sure you've checked out any previous parts to the [series](/categories/D365-TypeScript/). Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven't been following.\n\n# Application Insights\n\n## What is Application Insights?\n\n> Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. It will automatically detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It's designed to help you continuously improve performance and usability. It works for apps on a wide variety of platforms including .NET, Node.js, Java, and Python hosted on-premises, hybrid, or any public cloud. It integrates with your DevOps process, and has connection points to a variety of development tools. It can monitor and analyze telemetry from mobile apps by integrating with Visual Studio App Center.\n\n[https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)\n\n## Setup\n\nFirst lets install the npm package(s):\n\n```\nnpm install @microsoft/applicationinsights-web\n```\n\nNext we need to setup Application Insights in Azure. If you don't have an azure subscription you can signup for a free trial [here](https://azure.microsoft.com/en-gb/free/).\n\nCreate an Application Insights Resource in Azure by following the steps [here](https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource) (you can stop at the bit where you copy the instrumentation key)\n\nNow you have an app insights resource and the instrumentation key we are ready to go!\n\n## The Code\n\nFirst we'll put together a little module that encapsulates a minimal setup of Application Insights API\n\n```typescript\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-web\";\n\nconst init = () => {\n  const appins = new ApplicationInsights({\n    config: {\n      instrumentationKey: \"YOUR_KEY\",\n    },\n  });\n  appins.loadAppInsights();\n  (window as any).d365ts_appinsights = appins;\n  return appins;\n};\n\nexport const appInsights = (window as any).d365ts_appinsights\n  ? ((window as any).d365ts_appinsights as ApplicationInsights)\n  : init();\n```\n\nNow, we can simply import our module\n\n```typescript\nimport { appInsights } from \"./appinsights\";\n```\n\nAnd start tracking page views\n\n```typescript\nappInsights.trackPageView();\n```\n\nOr track exceptions\n\n```typescript\nappInsights.trackException({\n  exception: { message: \"This is an error\", name: \"Onload Error\" },\n});\n```\n\nThere are also other tracking functions `trackMetric`, `trackEvent`, `trackTrace`, etc.\n\n## Telemetry Initializer\n\nOne of the great things about the telemetry initializer is that it allow you to define some custom data/properties to include when tracking\n\n```typescript\nappins.addTelemetryInitializer((item) => {\n  const globalCtx = Xrm.Utility.getGlobalContext();\n  item.data.Username = globalCtx.userSettings?.userName;\n  item.data.UserId = globalCtx.userSettings?.userId;\n  item.data.SecurityRoles = (globalCtx.userSettings?.roles as any)\n    ?.getAll()\n    ?.map((item) => item.name)\n    ?.join(\"|\");\n  item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;\n  item.data.Client = globalCtx.client?.getClient();\n  item.data.ClientState = globalCtx.client?.getClientState();\n});\n```\n\nTo have this included in all tracking we can add it with the module...\n\n```typescript\nconst init = () => {\n  const appins = new ApplicationInsights({\n    config: {\n      instrumentationKey: \"d5656791-01e1-4d2e-9172-08fd79545a97\",\n    },\n  });\n  appins.loadAppInsights();\n  appins.addTelemetryInitializer((item) => {\n    const globalCtx = Xrm.Utility.getGlobalContext();\n    item.data.Username = globalCtx.userSettings?.userName;\n    item.data.UserId = globalCtx.userSettings?.userId;\n    item.data.SecurityRoles = (globalCtx.userSettings?.roles as any)\n      ?.getAll()\n      ?.map((item) => item.name)\n      ?.join(\"|\");\n    item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;\n    item.data.Client = globalCtx.client?.getClient();\n    item.data.ClientState = globalCtx.client?.getClientState();\n  });\n  (window as any).d365ts_appinsights = appins;\n  return appins;\n};\n```\n\nYou may even want to add a second telemetry initializer for adding some data from the form context\n\n```typescript\nexport const addFormContextTelemetryInitializer = (\n  formContext: Xrm.BasicPage\n) => {\n  appInsights.addTelemetryInitializer((item) => {\n    item.data.EntityName = formContext.data?.entity?.getEntityName();\n    item.data.EntityId = formContext.data?.entity?.getId();\n    item.data.FormName = formContext.ui?.formSelector\n      ?.getCurrentItem()\n      ?.getLabel();\n    item.data.FormType = formContext.ui?.getFormType();\n  });\n};\n```\n\nNow when the form loads we can add the form context initializer\n\n```typescript\naddFormContextTelemetryInitializer((formContext as unknown) as Xrm.BasicPage);\n```\n\n## What's it look like!?\n\nOk ok! Here is what all that lovely data will look like in Azure Application Insights...\n\nFirst we have the results in the transaction search:\n![transaction search](log.png)\n\nThen after selecting a result we can see the detail:\n![End-to-end transaction details](detail.png)\n\nAnd there we have it!\n\n## That's all folks!\n\nI hope that has been useful!\n\nYou can download a copy of the source code for this blog post [here](d365ts-pt6.zip)\n\nThanks for reading.\nOllie\n","slug":"D365-Typescript-Webresources-Part-6","published":1,"updated":"2021-04-30T23:34:44.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cx000dxsum14hcf9yz","content":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h1 id=\"Application-Insights\"><a href=\"#Application-Insights\" class=\"headerlink\" title=\"Application Insights\"></a>Application Insights</h1><h2 id=\"What-is-Application-Insights\"><a href=\"#What-is-Application-Insights\" class=\"headerlink\" title=\"What is Application Insights?\"></a>What is Application Insights?</h2><blockquote>\n<p>Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. It will automatically detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It’s designed to help you continuously improve performance and usability. It works for apps on a wide variety of platforms including .NET, Node.js, Java, and Python hosted on-premises, hybrid, or any public cloud. It integrates with your DevOps process, and has connection points to a variety of development tools. It can monitor and analyze telemetry from mobile apps by integrating with Visual Studio App Center.</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview\">https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview</a></p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>First lets install the npm package(s):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @microsoft&#x2F;applicationinsights-web</span><br></pre></td></tr></table></figure>\n\n<p>Next we need to setup Application Insights in Azure. If you don’t have an azure subscription you can signup for a free trial <a href=\"https://azure.microsoft.com/en-gb/free/\">here</a>.</p>\n<p>Create an Application Insights Resource in Azure by following the steps <a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource\">here</a> (you can stop at the bit where you copy the instrumentation key)</p>\n<p>Now you have an app insights resource and the instrumentation key we are ready to go!</p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><p>First we’ll put together a little module that encapsulates a minimal setup of Application Insights API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApplicationInsights &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@microsoft/applicationinsights-web&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> appins = <span class=\"keyword\">new</span> ApplicationInsights(&#123;</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">      instrumentationKey: <span class=\"string\">&quot;YOUR_KEY&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  appins.loadAppInsights();</span><br><span class=\"line\">  (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights = appins;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> appins;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appInsights = (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights</span><br><span class=\"line\">  ? ((<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights <span class=\"keyword\">as</span> ApplicationInsights)</span><br><span class=\"line\">  : init();</span><br></pre></td></tr></table></figure>\n\n<p>Now, we can simply import our module</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; appInsights &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./appinsights&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And start tracking page views</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInsights.trackPageView();</span><br></pre></td></tr></table></figure>\n\n<p>Or track exceptions</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInsights.trackException(&#123;</span><br><span class=\"line\">  exception: &#123; <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is an error&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Onload Error&quot;</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>There are also other tracking functions <code>trackMetric</code>, <code>trackEvent</code>, <code>trackTrace</code>, etc.</p>\n<h2 id=\"Telemetry-Initializer\"><a href=\"#Telemetry-Initializer\" class=\"headerlink\" title=\"Telemetry Initializer\"></a>Telemetry Initializer</h2><p>One of the great things about the telemetry initializer is that it allow you to define some custom data/properties to include when tracking</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appins.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> globalCtx = Xrm.Utility.getGlobalContext();</span><br><span class=\"line\">  item.data.Username = globalCtx.userSettings?.userName;</span><br><span class=\"line\">  item.data.UserId = globalCtx.userSettings?.userId;</span><br><span class=\"line\">  item.data.SecurityRoles = (globalCtx.userSettings?.roles <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">    ?.getAll()</span><br><span class=\"line\">    ?.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.name)</span><br><span class=\"line\">    ?.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">  item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;</span><br><span class=\"line\">  item.data.Client = globalCtx.client?.getClient();</span><br><span class=\"line\">  item.data.ClientState = globalCtx.client?.getClientState();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>To have this included in all tracking we can add it with the module…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> appins = <span class=\"keyword\">new</span> ApplicationInsights(&#123;</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">      instrumentationKey: <span class=\"string\">&quot;d5656791-01e1-4d2e-9172-08fd79545a97&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  appins.loadAppInsights();</span><br><span class=\"line\">  appins.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> globalCtx = Xrm.Utility.getGlobalContext();</span><br><span class=\"line\">    item.data.Username = globalCtx.userSettings?.userName;</span><br><span class=\"line\">    item.data.UserId = globalCtx.userSettings?.userId;</span><br><span class=\"line\">    item.data.SecurityRoles = (globalCtx.userSettings?.roles <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">      ?.getAll()</span><br><span class=\"line\">      ?.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.name)</span><br><span class=\"line\">      ?.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">    item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;</span><br><span class=\"line\">    item.data.Client = globalCtx.client?.getClient();</span><br><span class=\"line\">    item.data.ClientState = globalCtx.client?.getClientState();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights = appins;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> appins;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You may even want to add a second telemetry initializer for adding some data from the form context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addFormContextTelemetryInitializer = (</span><br><span class=\"line\">  formContext: Xrm.BasicPage</span><br><span class=\"line\">) =&gt; &#123;</span><br><span class=\"line\">  appInsights.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item.data.EntityName = formContext.data?.entity?.getEntityName();</span><br><span class=\"line\">    item.data.EntityId = formContext.data?.entity?.getId();</span><br><span class=\"line\">    item.data.FormName = formContext.ui?.formSelector</span><br><span class=\"line\">      ?.getCurrentItem()</span><br><span class=\"line\">      ?.getLabel();</span><br><span class=\"line\">    item.data.FormType = formContext.ui?.getFormType();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Now when the form loads we can add the form context initializer</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addFormContextTelemetryInitializer((formContext <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> Xrm.BasicPage);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"What’s-it-look-like\"><a href=\"#What’s-it-look-like\" class=\"headerlink\" title=\"What’s it look like!?\"></a>What’s it look like!?</h2><p>Ok ok! Here is what all that lovely data will look like in Azure Application Insights…</p>\n<p>First we have the results in the transaction search:<br><img src=\"log.png\" alt=\"transaction search\"></p>\n<p>Then after selecting a result we can see the detail:<br><img src=\"detail.png\" alt=\"End-to-end transaction details\"></p>\n<p>And there we have it!</p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt6.zip\">here</a></p>\n<p>Thanks for reading.<br>Ollie</p>\n","site":{"data":{}},"more":"<p>Before you get stuck into this make sure you’ve checked out any previous parts to the <a href=\"/categories/D365-TypeScript/\">series</a>. Each part in this series follows on from the previous, so you may need to grab the code from the previous part if you haven’t been following.</p>\n<h1 id=\"Application-Insights\"><a href=\"#Application-Insights\" class=\"headerlink\" title=\"Application Insights\"></a>Application Insights</h1><h2 id=\"What-is-Application-Insights\"><a href=\"#What-is-Application-Insights\" class=\"headerlink\" title=\"What is Application Insights?\"></a>What is Application Insights?</h2><blockquote>\n<p>Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. It will automatically detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It’s designed to help you continuously improve performance and usability. It works for apps on a wide variety of platforms including .NET, Node.js, Java, and Python hosted on-premises, hybrid, or any public cloud. It integrates with your DevOps process, and has connection points to a variety of development tools. It can monitor and analyze telemetry from mobile apps by integrating with Visual Studio App Center.</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview\">https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview</a></p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>First lets install the npm package(s):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @microsoft&#x2F;applicationinsights-web</span><br></pre></td></tr></table></figure>\n\n<p>Next we need to setup Application Insights in Azure. If you don’t have an azure subscription you can signup for a free trial <a href=\"https://azure.microsoft.com/en-gb/free/\">here</a>.</p>\n<p>Create an Application Insights Resource in Azure by following the steps <a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/create-new-resource\">here</a> (you can stop at the bit where you copy the instrumentation key)</p>\n<p>Now you have an app insights resource and the instrumentation key we are ready to go!</p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><p>First we’ll put together a little module that encapsulates a minimal setup of Application Insights API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApplicationInsights &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@microsoft/applicationinsights-web&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> appins = <span class=\"keyword\">new</span> ApplicationInsights(&#123;</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">      instrumentationKey: <span class=\"string\">&quot;YOUR_KEY&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  appins.loadAppInsights();</span><br><span class=\"line\">  (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights = appins;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> appins;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appInsights = (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights</span><br><span class=\"line\">  ? ((<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights <span class=\"keyword\">as</span> ApplicationInsights)</span><br><span class=\"line\">  : init();</span><br></pre></td></tr></table></figure>\n\n<p>Now, we can simply import our module</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; appInsights &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./appinsights&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And start tracking page views</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInsights.trackPageView();</span><br></pre></td></tr></table></figure>\n\n<p>Or track exceptions</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInsights.trackException(&#123;</span><br><span class=\"line\">  exception: &#123; <span class=\"attr\">message</span>: <span class=\"string\">&quot;This is an error&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Onload Error&quot;</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>There are also other tracking functions <code>trackMetric</code>, <code>trackEvent</code>, <code>trackTrace</code>, etc.</p>\n<h2 id=\"Telemetry-Initializer\"><a href=\"#Telemetry-Initializer\" class=\"headerlink\" title=\"Telemetry Initializer\"></a>Telemetry Initializer</h2><p>One of the great things about the telemetry initializer is that it allow you to define some custom data/properties to include when tracking</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appins.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> globalCtx = Xrm.Utility.getGlobalContext();</span><br><span class=\"line\">  item.data.Username = globalCtx.userSettings?.userName;</span><br><span class=\"line\">  item.data.UserId = globalCtx.userSettings?.userId;</span><br><span class=\"line\">  item.data.SecurityRoles = (globalCtx.userSettings?.roles <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">    ?.getAll()</span><br><span class=\"line\">    ?.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.name)</span><br><span class=\"line\">    ?.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">  item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;</span><br><span class=\"line\">  item.data.Client = globalCtx.client?.getClient();</span><br><span class=\"line\">  item.data.ClientState = globalCtx.client?.getClientState();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>To have this included in all tracking we can add it with the module…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> appins = <span class=\"keyword\">new</span> ApplicationInsights(&#123;</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">      instrumentationKey: <span class=\"string\">&quot;d5656791-01e1-4d2e-9172-08fd79545a97&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  appins.loadAppInsights();</span><br><span class=\"line\">  appins.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> globalCtx = Xrm.Utility.getGlobalContext();</span><br><span class=\"line\">    item.data.Username = globalCtx.userSettings?.userName;</span><br><span class=\"line\">    item.data.UserId = globalCtx.userSettings?.userId;</span><br><span class=\"line\">    item.data.SecurityRoles = (globalCtx.userSettings?.roles <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">      ?.getAll()</span><br><span class=\"line\">      ?.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.name)</span><br><span class=\"line\">      ?.join(<span class=\"string\">&quot;|&quot;</span>);</span><br><span class=\"line\">    item.data.OrgUniqueName = globalCtx.organizationSettings?.uniqueName;</span><br><span class=\"line\">    item.data.Client = globalCtx.client?.getClient();</span><br><span class=\"line\">    item.data.ClientState = globalCtx.client?.getClientState();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  (<span class=\"built_in\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).d365ts_appinsights = appins;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> appins;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You may even want to add a second telemetry initializer for adding some data from the form context</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addFormContextTelemetryInitializer = (</span><br><span class=\"line\">  formContext: Xrm.BasicPage</span><br><span class=\"line\">) =&gt; &#123;</span><br><span class=\"line\">  appInsights.addTelemetryInitializer(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    item.data.EntityName = formContext.data?.entity?.getEntityName();</span><br><span class=\"line\">    item.data.EntityId = formContext.data?.entity?.getId();</span><br><span class=\"line\">    item.data.FormName = formContext.ui?.formSelector</span><br><span class=\"line\">      ?.getCurrentItem()</span><br><span class=\"line\">      ?.getLabel();</span><br><span class=\"line\">    item.data.FormType = formContext.ui?.getFormType();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Now when the form loads we can add the form context initializer</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addFormContextTelemetryInitializer((formContext <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> Xrm.BasicPage);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"What’s-it-look-like\"><a href=\"#What’s-it-look-like\" class=\"headerlink\" title=\"What’s it look like!?\"></a>What’s it look like!?</h2><p>Ok ok! Here is what all that lovely data will look like in Azure Application Insights…</p>\n<p>First we have the results in the transaction search:<br><img src=\"log.png\" alt=\"transaction search\"></p>\n<p>Then after selecting a result we can see the detail:<br><img src=\"detail.png\" alt=\"End-to-end transaction details\"></p>\n<p>And there we have it!</p>\n<h2 id=\"That’s-all-folks\"><a href=\"#That’s-all-folks\" class=\"headerlink\" title=\"That’s all folks!\"></a>That’s all folks!</h2><p>I hope that has been useful!</p>\n<p>You can download a copy of the source code for this blog post <a href=\"d365ts-pt6.zip\">here</a></p>\n<p>Thanks for reading.<br>Ollie</p>\n"},{"title":"PCF WebApi execute","date":"2020-06-10T23:05:42.000Z","description":"Yep, execute is missing from the docs and the type definitions but it's there and it works!","excerpt":"Yep, execute is missing from the docs and the type definitions but it's there and it works!","_content":"\n## The PCF WebApi execute method is lurking in the background!\n\nYep, missing from the [docs](https://docs.microsoft.com/en-us/powerapps/developer/component-framework/reference/webapi) and the type definitions but it's there and it works!\n\n![](pcf-webapi.png)\n\n### execute\n\n```TypeScript\n(context.webAPI as any).execute(request).then(successCallback, errorCallback);\n```\n\n_see the `execute` Client API [docs](https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute) for more info_\n\n### executeMultiple\n\n```TypeScript\n(context.webAPI as any)\n  .executeMultiple(requests)\n  .then(successCallback, errorCallback);\n```\n\n_see the `executeMultiple` Client API [docs](https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/executemultiple) for more info_\n\nEnjoy!\nOllie\n\n_Disclaimer!_\n_Some of the tips 'n' tricks in the [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/) category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft_\n","source":"_posts/PCF-WebApi-execute.md","raw":"---\ntitle: PCF WebApi execute\ndate: 2020-06-10 23:05:42\ntags:\n  - D365\n  - PCF\n  - Power Apps\n  - Power Apps Component Framework\ncategories:\n  - Power Apps Component Framework\n  - PCF Tips 'n' Tricks\ndescription: Yep, execute is missing from the docs and the type definitions but it's there and it works!\nexcerpt: Yep, execute is missing from the docs and the type definitions but it's there and it works!\n---\n\n## The PCF WebApi execute method is lurking in the background!\n\nYep, missing from the [docs](https://docs.microsoft.com/en-us/powerapps/developer/component-framework/reference/webapi) and the type definitions but it's there and it works!\n\n![](pcf-webapi.png)\n\n### execute\n\n```TypeScript\n(context.webAPI as any).execute(request).then(successCallback, errorCallback);\n```\n\n_see the `execute` Client API [docs](https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute) for more info_\n\n### executeMultiple\n\n```TypeScript\n(context.webAPI as any)\n  .executeMultiple(requests)\n  .then(successCallback, errorCallback);\n```\n\n_see the `executeMultiple` Client API [docs](https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/executemultiple) for more info_\n\nEnjoy!\nOllie\n\n_Disclaimer!_\n_Some of the tips 'n' tricks in the [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/) category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft_\n","slug":"PCF-WebApi-execute","published":1,"updated":"2021-04-30T23:34:44.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4cz000fxsum9hsh0iv6","content":"<h2 id=\"The-PCF-WebApi-execute-method-is-lurking-in-the-background\"><a href=\"#The-PCF-WebApi-execute-method-is-lurking-in-the-background\" class=\"headerlink\" title=\"The PCF WebApi execute method is lurking in the background!\"></a>The PCF WebApi execute method is lurking in the background!</h2><p>Yep, missing from the <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/component-framework/reference/webapi\">docs</a> and the type definitions but it’s there and it works!</p>\n<p><img src=\"pcf-webapi.png\"></p>\n<h3 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(context.webAPI <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).execute(request).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p><em>see the <code>execute</code> Client API <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute\">docs</a> for more info</em></p>\n<h3 id=\"executeMultiple\"><a href=\"#executeMultiple\" class=\"headerlink\" title=\"executeMultiple\"></a>executeMultiple</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(context.webAPI <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">  .executeMultiple(requests)</span><br><span class=\"line\">  .then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p><em>see the <code>executeMultiple</code> Client API <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/executemultiple\">docs</a> for more info</em></p>\n<p>Enjoy!<br>Ollie</p>\n<p><em>Disclaimer!</em><br><em>Some of the tips ‘n’ tricks in the <a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a> category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft</em></p>\n","site":{"data":{}},"more":"<h2 id=\"The-PCF-WebApi-execute-method-is-lurking-in-the-background\"><a href=\"#The-PCF-WebApi-execute-method-is-lurking-in-the-background\" class=\"headerlink\" title=\"The PCF WebApi execute method is lurking in the background!\"></a>The PCF WebApi execute method is lurking in the background!</h2><p>Yep, missing from the <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/component-framework/reference/webapi\">docs</a> and the type definitions but it’s there and it works!</p>\n<p><img src=\"pcf-webapi.png\"></p>\n<h3 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(context.webAPI <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).execute(request).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p><em>see the <code>execute</code> Client API <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute\">docs</a> for more info</em></p>\n<h3 id=\"executeMultiple\"><a href=\"#executeMultiple\" class=\"headerlink\" title=\"executeMultiple\"></a>executeMultiple</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(context.webAPI <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)</span><br><span class=\"line\">  .executeMultiple(requests)</span><br><span class=\"line\">  .then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure>\n\n<p><em>see the <code>executeMultiple</code> Client API <a href=\"https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/executemultiple\">docs</a> for more info</em></p>\n<p>Enjoy!<br>Ollie</p>\n<p><em>Disclaimer!</em><br><em>Some of the tips ‘n’ tricks in the <a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a> category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft</em></p>\n"},{"title":"PCF <-> Form Communication","date":"2020-06-06T02:12:12.000Z","description":"Communication, It's one of the single most important \"things\" in EVERYTHING! So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...? So, here is my alternative...","excerpt":"Communication, It's one of the single most important \"things\" in EVERYTHING! So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...? So, here is my alternative...","_content":"\n## Communication\n\nCommunication, It's one of the single most important \"things\" in EVERYTHING!\n\nSo why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...?\n\n## I want better comms!\n\nYep, I want a better way for my control and form to communicate without having to bind multiple fields and in some cases create new fields just to support this communication.\n\n## Here's what I came up with...\n\n### Custom Events\n\nUsing [custom events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events) we can send messages back a forth between the form and the PCF control.\n\n<img src=\"custom-events.svg\" width=\"50%\" class=\"mini-lightbox\" />\n\nThe basic example I'll be using for this blog post is linked to the issue where we are not able to bind to the OOTB address fields on entities like contact and account. Here's the [_Idea_](https://powerusers.microsoft.com/t5/Power-Apps-Ideas/Enable-binding-to-OOB-Address-Fields/idi-p/302387) I raised on the Power Apps community forums back in the summer of 2019 (a year ago!!!).\n\nI'll assume you already have the beginnings of a JavaScript web resource with the `OnLoad` form event wired up, and a PCF Control project.\n\nSo, it's all pretty simple really. Firstly we need to \"dispatch\" our event. I'll be doing this when a user selects an address from a `ComboBox` after searching by post code...\n\n```TypeScript\npublic addresslistComboBox_onChange(event: React.FormEvent<IComboBox>, option?: IComboBoxOption | undefined, index?: number | undefined, value?: string | undefined): void {\n    const selectedAddress = JSON.parse(option?.data);\n    const attributeName = this.props.context.parameters.postalcode.attributes?.LogicalName;\n    const customEvent = new CustomEvent(\"onReceiveAddress\", {\n        detail: {\n            Address: selectedAddress,\n            Attribute: attributeName\n        }\n    } as CustomEventInit<EventData>);\n    window.dispatchEvent(customEvent);\n    this.setState({\n        addresslistHidden: true\n    });\n}\n```\n\nThen all we need is to wire up a \"listener\" to listen within our form script for the event and handle it...\n\n```TypeScript\nwindow.parent.addEventListener(\n  \"onReceiveAddress\",\n  (ev: CustomEvent<EventData>) => {\n    if (ev.detail) {\n      if (ev.detail.Attribute === \"address1_postalcode\") {\n        const address = ev.detail.Address;\n        formContext.getAttribute(\"address1_line1\").setValue(address.line_1);\n        formContext.getAttribute(\"address1_line2\").setValue(address.line_2);\n        formContext.getAttribute(\"address1_line3\").setValue(address.line_3);\n        formContext\n          .getAttribute(\"address1_city\")\n          .setValue(address.town_or_city);\n        formContext.getAttribute(\"address1_county\").setValue(address.county);\n        formContext.getAttribute(\"address1_country\").setValue(address.country);\n      }\n    }\n  }\n);\n```\n\n_Note when adding the event listener in the form script we must use `window.parent`, this is because in the Unified Interface custom form script web resources are all loaded within an iframe. Whereas the PCF control is rendered directly in the main document._\n\nPretty neat! So no duplicate fields to allow me to bind my control and no WebApi Updates directly from the control. Using this method we can update any field from our control without the need to bind at design time.\n\nIf your interested in having a look at the full source code I've uploaded it to [github](https://github.com/OliverFlint/PCF-UK-Address-Lookup)\n\nSo Long, and Thanks for All the Fish\n","source":"_posts/PCF-and-Form-Communication.md","raw":"---\ntitle: PCF <-> Form Communication\ntags:\n  - D365\n  - PCF\n  - Power Apps\n  - Power Apps Component Framework\ncategories:\n  - Power Apps Component Framework\ndate: 2020-06-06 02:12:12\ndescription: Communication, It's one of the single most important \"things\" in EVERYTHING! So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...? So, here is my alternative...\nexcerpt: Communication, It's one of the single most important \"things\" in EVERYTHING! So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...? So, here is my alternative...\n---\n\n## Communication\n\nCommunication, It's one of the single most important \"things\" in EVERYTHING!\n\nSo why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only \"OOTB\" method for the two to communicate is via a bound field/control...?\n\n## I want better comms!\n\nYep, I want a better way for my control and form to communicate without having to bind multiple fields and in some cases create new fields just to support this communication.\n\n## Here's what I came up with...\n\n### Custom Events\n\nUsing [custom events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events) we can send messages back a forth between the form and the PCF control.\n\n<img src=\"custom-events.svg\" width=\"50%\" class=\"mini-lightbox\" />\n\nThe basic example I'll be using for this blog post is linked to the issue where we are not able to bind to the OOTB address fields on entities like contact and account. Here's the [_Idea_](https://powerusers.microsoft.com/t5/Power-Apps-Ideas/Enable-binding-to-OOB-Address-Fields/idi-p/302387) I raised on the Power Apps community forums back in the summer of 2019 (a year ago!!!).\n\nI'll assume you already have the beginnings of a JavaScript web resource with the `OnLoad` form event wired up, and a PCF Control project.\n\nSo, it's all pretty simple really. Firstly we need to \"dispatch\" our event. I'll be doing this when a user selects an address from a `ComboBox` after searching by post code...\n\n```TypeScript\npublic addresslistComboBox_onChange(event: React.FormEvent<IComboBox>, option?: IComboBoxOption | undefined, index?: number | undefined, value?: string | undefined): void {\n    const selectedAddress = JSON.parse(option?.data);\n    const attributeName = this.props.context.parameters.postalcode.attributes?.LogicalName;\n    const customEvent = new CustomEvent(\"onReceiveAddress\", {\n        detail: {\n            Address: selectedAddress,\n            Attribute: attributeName\n        }\n    } as CustomEventInit<EventData>);\n    window.dispatchEvent(customEvent);\n    this.setState({\n        addresslistHidden: true\n    });\n}\n```\n\nThen all we need is to wire up a \"listener\" to listen within our form script for the event and handle it...\n\n```TypeScript\nwindow.parent.addEventListener(\n  \"onReceiveAddress\",\n  (ev: CustomEvent<EventData>) => {\n    if (ev.detail) {\n      if (ev.detail.Attribute === \"address1_postalcode\") {\n        const address = ev.detail.Address;\n        formContext.getAttribute(\"address1_line1\").setValue(address.line_1);\n        formContext.getAttribute(\"address1_line2\").setValue(address.line_2);\n        formContext.getAttribute(\"address1_line3\").setValue(address.line_3);\n        formContext\n          .getAttribute(\"address1_city\")\n          .setValue(address.town_or_city);\n        formContext.getAttribute(\"address1_county\").setValue(address.county);\n        formContext.getAttribute(\"address1_country\").setValue(address.country);\n      }\n    }\n  }\n);\n```\n\n_Note when adding the event listener in the form script we must use `window.parent`, this is because in the Unified Interface custom form script web resources are all loaded within an iframe. Whereas the PCF control is rendered directly in the main document._\n\nPretty neat! So no duplicate fields to allow me to bind my control and no WebApi Updates directly from the control. Using this method we can update any field from our control without the need to bind at design time.\n\nIf your interested in having a look at the full source code I've uploaded it to [github](https://github.com/OliverFlint/PCF-UK-Address-Lookup)\n\nSo Long, and Thanks for All the Fish\n","slug":"PCF-and-Form-Communication","published":1,"updated":"2021-04-30T23:34:44.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4d2000ixsumfeij0h3j","content":"<h2 id=\"Communication\"><a href=\"#Communication\" class=\"headerlink\" title=\"Communication\"></a>Communication</h2><p>Communication, It’s one of the single most important “things” in EVERYTHING!</p>\n<p>So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only “OOTB” method for the two to communicate is via a bound field/control…?</p>\n<h2 id=\"I-want-better-comms\"><a href=\"#I-want-better-comms\" class=\"headerlink\" title=\"I want better comms!\"></a>I want better comms!</h2><p>Yep, I want a better way for my control and form to communicate without having to bind multiple fields and in some cases create new fields just to support this communication.</p>\n<h2 id=\"Here’s-what-I-came-up-with…\"><a href=\"#Here’s-what-I-came-up-with…\" class=\"headerlink\" title=\"Here’s what I came up with…\"></a>Here’s what I came up with…</h2><h3 id=\"Custom-Events\"><a href=\"#Custom-Events\" class=\"headerlink\" title=\"Custom Events\"></a>Custom Events</h3><p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">custom events</a> we can send messages back a forth between the form and the PCF control.</p>\n<img src=\"custom-events.svg\" width=\"50%\" class=\"mini-lightbox\" />\n\n<p>The basic example I’ll be using for this blog post is linked to the issue where we are not able to bind to the OOTB address fields on entities like contact and account. Here’s the <a href=\"https://powerusers.microsoft.com/t5/Power-Apps-Ideas/Enable-binding-to-OOB-Address-Fields/idi-p/302387\"><em>Idea</em></a> I raised on the Power Apps community forums back in the summer of 2019 (a year ago!!!).</p>\n<p>I’ll assume you already have the beginnings of a JavaScript web resource with the <code>OnLoad</code> form event wired up, and a PCF Control project.</p>\n<p>So, it’s all pretty simple really. Firstly we need to “dispatch” our event. I’ll be doing this when a user selects an address from a <code>ComboBox</code> after searching by post code…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> addresslistComboBox_onChange(event: React.FormEvent&lt;IComboBox&gt;, option?: IComboBoxOption | <span class=\"literal\">undefined</span>, index?: <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>, value?: <span class=\"built_in\">string</span> | <span class=\"literal\">undefined</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> selectedAddress = <span class=\"built_in\">JSON</span>.parse(option?.data);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attributeName = <span class=\"built_in\">this</span>.props.context.parameters.postalcode.attributes?.LogicalName;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> customEvent = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">&quot;onReceiveAddress&quot;</span>, &#123;</span><br><span class=\"line\">        detail: &#123;</span><br><span class=\"line\">            Address: selectedAddress,</span><br><span class=\"line\">            Attribute: attributeName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">as</span> CustomEventInit&lt;EventData&gt;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.dispatchEvent(customEvent);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">        addresslistHidden: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then all we need is to wire up a “listener” to listen within our form script for the event and handle it…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.parent.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;onReceiveAddress&quot;</span>,</span><br><span class=\"line\">  (ev: CustomEvent&lt;EventData&gt;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ev.detail) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ev.detail.Attribute === <span class=\"string\">&quot;address1_postalcode&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = ev.detail.Address;</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line1&quot;</span>).setValue(address.line_1);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line2&quot;</span>).setValue(address.line_2);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line3&quot;</span>).setValue(address.line_3);</span><br><span class=\"line\">        formContext</span><br><span class=\"line\">          .getAttribute(<span class=\"string\">&quot;address1_city&quot;</span>)</span><br><span class=\"line\">          .setValue(address.town_or_city);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_county&quot;</span>).setValue(address.county);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_country&quot;</span>).setValue(address.country);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><em>Note when adding the event listener in the form script we must use <code>window.parent</code>, this is because in the Unified Interface custom form script web resources are all loaded within an iframe. Whereas the PCF control is rendered directly in the main document.</em></p>\n<p>Pretty neat! So no duplicate fields to allow me to bind my control and no WebApi Updates directly from the control. Using this method we can update any field from our control without the need to bind at design time.</p>\n<p>If your interested in having a look at the full source code I’ve uploaded it to <a href=\"https://github.com/OliverFlint/PCF-UK-Address-Lookup\">github</a></p>\n<p>So Long, and Thanks for All the Fish</p>\n","site":{"data":{}},"more":"<h2 id=\"Communication\"><a href=\"#Communication\" class=\"headerlink\" title=\"Communication\"></a>Communication</h2><p>Communication, It’s one of the single most important “things” in EVERYTHING!</p>\n<p>So why am I finding it so difficult to have my PCF control and Form script talk to each other? Maybe I am missing something but I believe the only “OOTB” method for the two to communicate is via a bound field/control…?</p>\n<h2 id=\"I-want-better-comms\"><a href=\"#I-want-better-comms\" class=\"headerlink\" title=\"I want better comms!\"></a>I want better comms!</h2><p>Yep, I want a better way for my control and form to communicate without having to bind multiple fields and in some cases create new fields just to support this communication.</p>\n<h2 id=\"Here’s-what-I-came-up-with…\"><a href=\"#Here’s-what-I-came-up-with…\" class=\"headerlink\" title=\"Here’s what I came up with…\"></a>Here’s what I came up with…</h2><h3 id=\"Custom-Events\"><a href=\"#Custom-Events\" class=\"headerlink\" title=\"Custom Events\"></a>Custom Events</h3><p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">custom events</a> we can send messages back a forth between the form and the PCF control.</p>\n<img src=\"custom-events.svg\" width=\"50%\" class=\"mini-lightbox\" />\n\n<p>The basic example I’ll be using for this blog post is linked to the issue where we are not able to bind to the OOTB address fields on entities like contact and account. Here’s the <a href=\"https://powerusers.microsoft.com/t5/Power-Apps-Ideas/Enable-binding-to-OOB-Address-Fields/idi-p/302387\"><em>Idea</em></a> I raised on the Power Apps community forums back in the summer of 2019 (a year ago!!!).</p>\n<p>I’ll assume you already have the beginnings of a JavaScript web resource with the <code>OnLoad</code> form event wired up, and a PCF Control project.</p>\n<p>So, it’s all pretty simple really. Firstly we need to “dispatch” our event. I’ll be doing this when a user selects an address from a <code>ComboBox</code> after searching by post code…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> addresslistComboBox_onChange(event: React.FormEvent&lt;IComboBox&gt;, option?: IComboBoxOption | <span class=\"literal\">undefined</span>, index?: <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>, value?: <span class=\"built_in\">string</span> | <span class=\"literal\">undefined</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> selectedAddress = <span class=\"built_in\">JSON</span>.parse(option?.data);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attributeName = <span class=\"built_in\">this</span>.props.context.parameters.postalcode.attributes?.LogicalName;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> customEvent = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">&quot;onReceiveAddress&quot;</span>, &#123;</span><br><span class=\"line\">        detail: &#123;</span><br><span class=\"line\">            Address: selectedAddress,</span><br><span class=\"line\">            Attribute: attributeName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">as</span> CustomEventInit&lt;EventData&gt;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.dispatchEvent(customEvent);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">        addresslistHidden: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then all we need is to wire up a “listener” to listen within our form script for the event and handle it…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.parent.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">&quot;onReceiveAddress&quot;</span>,</span><br><span class=\"line\">  (ev: CustomEvent&lt;EventData&gt;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ev.detail) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ev.detail.Attribute === <span class=\"string\">&quot;address1_postalcode&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = ev.detail.Address;</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line1&quot;</span>).setValue(address.line_1);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line2&quot;</span>).setValue(address.line_2);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_line3&quot;</span>).setValue(address.line_3);</span><br><span class=\"line\">        formContext</span><br><span class=\"line\">          .getAttribute(<span class=\"string\">&quot;address1_city&quot;</span>)</span><br><span class=\"line\">          .setValue(address.town_or_city);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_county&quot;</span>).setValue(address.county);</span><br><span class=\"line\">        formContext.getAttribute(<span class=\"string\">&quot;address1_country&quot;</span>).setValue(address.country);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><em>Note when adding the event listener in the form script we must use <code>window.parent</code>, this is because in the Unified Interface custom form script web resources are all loaded within an iframe. Whereas the PCF control is rendered directly in the main document.</em></p>\n<p>Pretty neat! So no duplicate fields to allow me to bind my control and no WebApi Updates directly from the control. Using this method we can update any field from our control without the need to bind at design time.</p>\n<p>If your interested in having a look at the full source code I’ve uploaded it to <a href=\"https://github.com/OliverFlint/PCF-UK-Address-Lookup\">github</a></p>\n<p>So Long, and Thanks for All the Fish</p>\n"},{"title":"PCF primary entity info","date":"2020-06-10T18:59:36.000Z","description":"At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!","excerpt":"At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!","_content":"\n## Getting the primary entity info\n\nAt present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!\n\n![](pcf-entityinfo.png)\n\n### The entity id (guid)\n\n```TypeScript\nconst entityId = (context.mode as any).contextInfo.entityId;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityId = formContext.data.entity.getId();\n```\n\n### The entity type (entity logical name)\n\n```TypeScript\nconst entityTypeName = (context.mode as any).contextInfo.entityTypeName;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityTypeName = formContext.data.entity.getEntityName();\n```\n\n### The record name (primary attribute value)\n\n```TypeScript\nconst entityTypeName = (context.mode as any).contextInfo.entityRecordName;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityTypeName = formContext.data.entity.getPrimaryAttributeValue();\n```\n\nHopefully this will be helpful to some of you!\n\nThanks for reading\nOllie\n\n_Disclaimer!_\n_Some of the tips 'n' tricks in the [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/) category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft_\n","source":"_posts/PCF-primary-entity-info.md","raw":"---\ntitle: PCF primary entity info\ndate: 2020-06-10 18:59:36\ntags:\n  - D365\n  - PCF\n  - Power Apps\n  - Power Apps Component Framework\ncategories:\n  - Power Apps Component Framework\n  - PCF Tips 'n' Tricks\ndescription: At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!\nexcerpt: At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!\n---\n\n## Getting the primary entity info\n\nAt present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I'm a rogue so here is one I've already used a lot!\n\n![](pcf-entityinfo.png)\n\n### The entity id (guid)\n\n```TypeScript\nconst entityId = (context.mode as any).contextInfo.entityId;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityId = formContext.data.entity.getId();\n```\n\n### The entity type (entity logical name)\n\n```TypeScript\nconst entityTypeName = (context.mode as any).contextInfo.entityTypeName;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityTypeName = formContext.data.entity.getEntityName();\n```\n\n### The record name (primary attribute value)\n\n```TypeScript\nconst entityTypeName = (context.mode as any).contextInfo.entityRecordName;\n```\n\nThis is the equivalent of the following in the Client API\n\n```TypeScript\nconst entityTypeName = formContext.data.entity.getPrimaryAttributeValue();\n```\n\nHopefully this will be helpful to some of you!\n\nThanks for reading\nOllie\n\n_Disclaimer!_\n_Some of the tips 'n' tricks in the [PCF Tips 'n' Tricks](/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/) category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft_\n","slug":"PCF-primary-entity-info","published":1,"updated":"2021-04-30T23:34:44.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4d6000lxsumba790ocz","content":"<h2 id=\"Getting-the-primary-entity-info\"><a href=\"#Getting-the-primary-entity-info\" class=\"headerlink\" title=\"Getting the primary entity info\"></a>Getting the primary entity info</h2><p>At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I’m a rogue so here is one I’ve already used a lot!</p>\n<p><img src=\"pcf-entityinfo.png\"></p>\n<h3 id=\"The-entity-id-guid\"><a href=\"#The-entity-id-guid\" class=\"headerlink\" title=\"The entity id (guid)\"></a>The entity id (guid)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityId = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityId;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityId = formContext.data.entity.getId();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-entity-type-entity-logical-name\"><a href=\"#The-entity-type-entity-logical-name\" class=\"headerlink\" title=\"The entity type (entity logical name)\"></a>The entity type (entity logical name)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityTypeName;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = formContext.data.entity.getEntityName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-record-name-primary-attribute-value\"><a href=\"#The-record-name-primary-attribute-value\" class=\"headerlink\" title=\"The record name (primary attribute value)\"></a>The record name (primary attribute value)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityRecordName;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = formContext.data.entity.getPrimaryAttributeValue();</span><br></pre></td></tr></table></figure>\n\n<p>Hopefully this will be helpful to some of you!</p>\n<p>Thanks for reading<br>Ollie</p>\n<p><em>Disclaimer!</em><br><em>Some of the tips ‘n’ tricks in the <a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a> category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft</em></p>\n","site":{"data":{}},"more":"<h2 id=\"Getting-the-primary-entity-info\"><a href=\"#Getting-the-primary-entity-info\" class=\"headerlink\" title=\"Getting the primary entity info\"></a>Getting the primary entity info</h2><p>At present the PCF Template provided by the Power Apps Cli gives us lots of opportunity and scope to improve functionality, but the type definitions are missing some objects that are present api. Now this could be for many reasons, one being support. Anyway, I’m a rogue so here is one I’ve already used a lot!</p>\n<p><img src=\"pcf-entityinfo.png\"></p>\n<h3 id=\"The-entity-id-guid\"><a href=\"#The-entity-id-guid\" class=\"headerlink\" title=\"The entity id (guid)\"></a>The entity id (guid)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityId = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityId;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityId = formContext.data.entity.getId();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-entity-type-entity-logical-name\"><a href=\"#The-entity-type-entity-logical-name\" class=\"headerlink\" title=\"The entity type (entity logical name)\"></a>The entity type (entity logical name)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityTypeName;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = formContext.data.entity.getEntityName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-record-name-primary-attribute-value\"><a href=\"#The-record-name-primary-attribute-value\" class=\"headerlink\" title=\"The record name (primary attribute value)\"></a>The record name (primary attribute value)</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = (context.mode <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).contextInfo.entityRecordName;</span><br></pre></td></tr></table></figure>\n\n<p>This is the equivalent of the following in the Client API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entityTypeName = formContext.data.entity.getPrimaryAttributeValue();</span><br></pre></td></tr></table></figure>\n\n<p>Hopefully this will be helpful to some of you!</p>\n<p>Thanks for reading<br>Ollie</p>\n<p><em>Disclaimer!</em><br><em>Some of the tips ‘n’ tricks in the <a href=\"/categories/Power-Apps-Component-Framework/PCF-Tips-n-Tricks/\">PCF Tips ‘n’ Tricks</a> category are to be used with caution. Although they may work at the time of writing, they may or may not be officially supported by Microsoft</em></p>\n"},{"title":"Welcome","date":"2020-03-06T23:00:43.000Z","_content":"\n## Hello\n\nSo here I am with a new website. The site is built with Hexo.io. I chose Hexo.io because I love the simplicity of Markdown. Check it out [Hexo.io](https://www.hexo.io)\n","source":"_posts/Welcome.md","raw":"---\ntitle: Welcome\ndate: 2020-03-06 23:00:43\ntags:\n  - welcome\n  - oliver flint\n---\n\n## Hello\n\nSo here I am with a new website. The site is built with Hexo.io. I chose Hexo.io because I love the simplicity of Markdown. Check it out [Hexo.io](https://www.hexo.io)\n","slug":"Welcome","published":1,"updated":"2021-04-30T23:34:44.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyhky4d9000pxsumai47d1to","content":"<h2 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h2><p>So here I am with a new website. The site is built with Hexo.io. I chose Hexo.io because I love the simplicity of Markdown. Check it out <a href=\"https://www.hexo.io/\">Hexo.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hello\"><a href=\"#Hello\" class=\"headerlink\" title=\"Hello\"></a>Hello</h2><p>So here I am with a new website. The site is built with Hexo.io. I chose Hexo.io because I love the simplicity of Markdown. Check it out <a href=\"https://www.hexo.io/\">Hexo.io</a></p>\n"},{"title":"Deleting stale branches in Azure DevOps Git Repositories with Azure Logic Apps","date":"2022-12-06T00:00:00.000Z","description":"Azure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as it's reference. Pretty simple really! Unfortunatly Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.","excerpt":"Azure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as it's reference. Pretty simple really! Unfortunatly Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.","_content":"\n## Stale Branch... Huh?\n\nAzure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as its reference. Pretty simple really! Unfortunately Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.\n\n## Why delete your stale branches?\n\nAgain, it's pretty simple really. Having multiple branches of the same code base at different states or moments in time will likely cause confusion (and potentially problems!). If a branch has been released it should be merged to the master branch, if it's unreleased it \"could\" be discarded. If you want the ability to restore the branch at any point you can simply tag the most recent commit! Git's garbage collector prunes \"unreachable\" commits (essentially those not part of a branch or tags \"tree\").\n\n## My Solution\n\nSo, I wanted to automate the process of deleting stale branches and make it a team activity. To achieve this I wanted the following key points in the process:\n\n- To check all repositories within the project\n- To ignore the `master` and `main` branch\n- An approval process\n\nAs with most challenges I opened up google and had a look what I could see... mmmm plenty of options... but being a dev at heart and wanting to know how it works, so I set about crafting my own solution.\n\nI started to look at what I could do with Azure Pipelines and the Azure CLI, but decided against that as I felt the approval process would be a little clunky. Next port of call was Logic Apps and Power Automate, and this is where I stayed.\n\nFortunately Azure Logic Apps has a [connector](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/) that provides an [action](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#list-git-repositories) to list all repositories within an Azure DevOps project, unfortunately that is where the specific actions stop and you have to use the [HTTP request](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#send-an-http-request-to-azure-devops) action to query the api from then on to get the branch information.\n\nIn summary the solution contains the following:\n\n- A parent logic app...\n  - that executes on a schedule (once every week)\n  - iterates refs (branches) with all the repositories with my project\n  - ignores any ref named master or main\n  - determines if the branch is stale\n  - call a child logic app that manages the approval and delete\n- A child logic app...\n  - sends an approval request to a teams channel\n  - if approved, deletes the ref (branch)\n\n## Child Logic App\n\n### Create a new logic app\n\nWe need a child logic app to handle the approval process and delete of stale branches. We are doing this in a child logic app so we can introduce an asynchronous pattern to our flow and not have the main process wait for each approval in sequence.\n\nCreate a new logic app, give it a suitable name and select When a HTTP request is received trigger.\n\n### Configure the trigger\n\n1. Set the triggers Request Body JSON Schema with the following:\n\n```json\n{\n  \"properties\": {\n    \"branchId\": {\n      \"type\": \"string\"\n    },\n    \"branchName\": {\n      \"type\": \"string\"\n    },\n    \"repoId\": {\n      \"type\": \"string\"\n    },\n    \"repoName\": {\n      \"type\": \"string\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n2. Set the Method to `POST`\n\n### Respond and get branch stats\n\n![respond and get branch stats](image004.png)\n\n1. Add a Response action and set the Status Code to `202 ` (Accepted).\n2. Add a Send an HTTP request to Azure DevOps action and configure as follows:\n   a. Set the organization as required\n   b. Set the method to GET\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{triggerBody()?['repoId']}/stats/branches?name=@{triggerBody()?['branchName']}&api-version=7.1-preview.1`, replace `{project}` with the name of your Azure DevOps project.\n\n### Parse the branch stats response\n\n![parse branch stats json](image005.png)\n\n1. Add a Parse JSON action, set the Content to the body of the Send an HTTP request to Azure DevOps action response (e.g. `@body('Get_Ref_Stats')`), and the Schema to the below:\n\n```json\n{\n  \"properties\": {\n    \"aheadCount\": {\n      \"type\": \"integer\"\n    },\n    \"behindCount\": {\n      \"type\": \"integer\"\n    },\n    \"commit\": {\n      \"properties\": {\n        \"author\": {\n          \"properties\": {\n            \"date\": {\n              \"type\": \"string\"\n            },\n            \"email\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"comment\": {\n          \"type\": \"string\"\n        },\n        \"commitId\": {\n          \"type\": \"string\"\n        },\n        \"committer\": {\n          \"properties\": {\n            \"date\": {\n              \"type\": \"string\"\n            },\n            \"email\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"isBaseVersion\": {\n      \"type\": \"boolean\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n### Post adaptive card to teams channel\n\nThis step might need a bit of blurb to help explain it... I'm using an adaptive card to get a response from a user via MS Teams. You could do the same via email, but I like the idea of posting this to a channel for my dev teams to action together, using the chat to discuss it when required.\n\n![post adaptive card to teams channel](image006a.png)\n![post adaptive card to teams channel](image006b.png)\n\n1. Add a Post adaptive card and wait for a response action and configure as required for your MS Teams service. Set the message as below (making sure to configure the expressions correctly) or you could even use the [adaptive card designer](https://adaptivecards.io/designer/) to design you own card\n\n```json\n{\n  \"type\": \"AdaptiveCard\",\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"version\": \"1.4\",\n  \"body\": [\n    {\n      \"type\": \"TextBlock\",\n      \"text\": \"Approve Stale Branch Deletion\",\n      \"wrap\": true,\n      \"weight\": \"Bolder\",\n      \"size\": \"ExtraLarge\"\n    },\n    {\n      \"type\": \"ColumnSet\",\n      \"columns\": [\n        {\n          \"type\": \"Column\",\n          \"width\": \"auto\",\n          \"items\": [\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Repository:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Branch:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Committer:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Commit Date:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Commit Message:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Owner:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Created On:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            }\n          ]\n        },\n        {\n          \"type\": \"Column\",\n          \"width\": \"stretch\",\n          \"items\": [\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{triggerBody()?['repoName']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{triggerBody()?['branchName']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['committer']?['name']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['committer']?['date']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['comment']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['author']?['name']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['author']?['date']}\",\n              \"wrap\": true\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"actions\": [\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Approve\",\n      \"data\": \"approved\"\n    },\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Reject\",\n      \"data\": \"rejected\"\n    }\n  ]\n}\n```\n\n### Check adaptive card response\n\n![check adaptive card response](image007.png)\n\n1. Add a Condition action\n2. Set the condition `body('Send_Delete_Approval')?['submitActionId']` is equal to \"Approve\"\n\n### When response is NOT \"Approve\"\n\nWithin the \"False\" branch of the condition:\n\n![not approved](image008.png)\n\n1. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n2. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n3. Set the Message as desired (e.g. `Thanks @{body('Send_Delete_Approval')?['responder/displayName']}. You have rejected the deletion of the stale branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}'.`).\n4. Add a Terminate action after the Reply with a message in a channel action. I have this set to Cancelled, but I'll leave you to decide what status you'd prefer.\n\n### When response IS \"Approve\"\n\nWithin the \"True\" branch of the condition:\n\n![approved](image009.png)\n\n1. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n2. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n3. Set the Message as desired (e.g. `Thanks @{body('Send_Delete_Approval')?['responder/displayName']}. You have approved the deletion of the stale branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}'. It will be deleted in @{parameters('DelayCount')} @{parameters('DelayUnit')}(s).`). I've used two logic app parameters here to store the delay and units of delay (days/hours/etc.).\n\n![approved](image010.png)\n\n4. Add a Delay action, and set the count and delay to the parameters used in step 3. This delay is to give dev teams the time to lock the branch if it decided that it need to be retained.\n5. Add a Send an HTTP request to Azure DevOps action and configure as follows:\n   a. Set the organization as required\n   b. Set the method to POST\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{triggerBody()?['repoId']}/refs?api-version=7.1-preview.1`, replace `{project}` with the name of your Azure DevOps project.\n   d. Set the body to:\n   ```json\n   [\n     {\n       \"name\": \"refs/heads/@{triggerBody()?['branchName']}\",\n       \"oldObjectId\": \"@{triggerBody()?['branchId']}\",\n       \"newObjectId\": \"0000000000000000000000000000000000000000\"\n     }\n   ]\n   ```\n\n![reply once deleted](image011.png)\n\n6. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n7. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n8. Set the Message as desired (e.g. `The branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}' has now been deleted.`).\n\n## Parent Logic App\n\n### Create a new logic app\n\nNow we can create the parent logic app using the blank logic app option (no template). Give it a suitable name and select the Recurrence trigger.\n\n_Note: If you're not familiar with logic apps, I would suggest you read the [following tutorial](https://learn.microsoft.com/en-us/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow) before continuing with this article._\n\n### Trigger and iterate repositories\n\n![iterate repositories](image001.png)\n\n1. Set the trigger interval and frequency as required.\n2. Add an Azure Devops List Git repositories action, sign in (setup the connection), then select the DevOps organization and project.\n3. Add a For Each action and select the value output from the List Git repositories action (e.g. `@body('List_Git_repositories')?['value']`).\n4. Add a Send an HTTP request to Azure DevOps action within the For Each action added in step 3. Configure as follows:\n   a. Set the organization as required\n   b. Set the method to GET\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{items('{For_each_Repo}')?['id']}/stats/branches?api-version=7.1-preview.1`, replace `{project}` with the name of you Azure DevOps project and `{For_each_Repo}` with the handle of the For Each action created in step 3 (Don't forget the \\_ instead of a space).\n\n### Parse the branch stats response\n\n![get branch stats](image002.png)\n\n1. Add a Parse JSON action after the Send an HTTP request to Azure DevOps action (still within the for each), set the content to the body of the Send an HTTP request to Azure DevOps action (e.g. `@{body('Get_Refs_stats')}`) and set the schema (example below)\n\n```json\n{\n  \"properties\": {\n    \"count\": {\n      \"type\": \"integer\"\n    },\n    \"value\": {\n      \"items\": {\n        \"properties\": {\n          \"aheadCount\": {\n            \"type\": \"integer\"\n          },\n          \"behindCount\": {\n            \"type\": \"integer\"\n          },\n          \"commit\": {\n            \"properties\": {\n              \"author\": {\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"comment\": {\n                \"type\": \"string\"\n              },\n              \"commitId\": {\n                \"type\": \"string\"\n              },\n              \"committer\": {\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parents\": {\n                \"type\": \"array\"\n              },\n              \"treeId\": {\n                \"type\": \"string\"\n              },\n              \"url\": {\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          },\n          \"isBaseVersion\": {\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"commit\",\n          \"name\",\n          \"aheadCount\",\n          \"behindCount\",\n          \"isBaseVersion\"\n        ],\n        \"type\": \"object\"\n      },\n      \"type\": \"array\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n### Validate each branch\n\n![validate branch is stale](image003.png)\n\n1. Add a For Each action after the Parse JSON action added above. Set the input to the value (e.g. `body('Parse_JSON_for_Refs')?['value']`) of the Parse JSON action added above.\n2. Add a Condition action. Add two conditions to evaluate name (e.g. `items('For_each_Ref')?['name']`), one to equal 'master' and one to equal 'main'. Change the condition to a 'Or'.\n3. Add a Condition action to the success branch of the above Condition action. Add a condition to evaluate the commit author date (e.g. `parseDateTime(items('For_each_Ref')?['commit']?['committer']?['date'])`) is less than today date minus 90 days (e.g. `addDays(utcNow(),-90)`). You can change the number of days to suit your needs.\n\n### Call the child logic app\n\n![call child logic app](image012.png)\n\nWithin the \"True\" branch of the above condition action:\n\n1. Add a Logic Apps action and select the child app created above.\n2. Configure the child app:\n   a. branchId: `@{items('For_each_Ref')?['commit']?['commitId']}`\n   b. branchName: `@{items('For_each_Ref')?['name']}`\n   c. repoId: `@{items('For_each_Repo')?['id']}`\n   d. repoName `@{items('For_each_Repo')?['name']}`\n   _note: Trigger Name and Workflow should be set automatically when adding the action._\n\n## The End\n\nAnd that should be it! Your logic app should now run on your schedule and prompt your team to approve the deletion of a stale branch, helping you keep your Azure DevOps repositories tidy.\n\nHave a nice day. Bye!\n","source":"_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories.md","raw":"---\ntitle: Deleting stale branches in Azure DevOps Git Repositories with Azure Logic Apps\ndate: 2022-12-06\ntags:\n  - Azure\n  - DevOps\n  - Stale\n  - Branches\n  - Power Automate\n  - Flow\n  - Logic Apps\ncategories:\n  - Azure\n  - DevOps\ndescription: Azure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as it's reference. Pretty simple really! Unfortunatly Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.\nexcerpt: Azure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as it's reference. Pretty simple really! Unfortunatly Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.\n---\n\n## Stale Branch... Huh?\n\nAzure DevOps, GitHub, etc. refer to a branch as being \"stale\" when it has no new commits within a certain number of days. I believe Azure uses 90 days as its reference. Pretty simple really! Unfortunately Azure DevOps doesn't automatically delete/archive stale branches. In this article I'm going to describe a solution to that problem.\n\n## Why delete your stale branches?\n\nAgain, it's pretty simple really. Having multiple branches of the same code base at different states or moments in time will likely cause confusion (and potentially problems!). If a branch has been released it should be merged to the master branch, if it's unreleased it \"could\" be discarded. If you want the ability to restore the branch at any point you can simply tag the most recent commit! Git's garbage collector prunes \"unreachable\" commits (essentially those not part of a branch or tags \"tree\").\n\n## My Solution\n\nSo, I wanted to automate the process of deleting stale branches and make it a team activity. To achieve this I wanted the following key points in the process:\n\n- To check all repositories within the project\n- To ignore the `master` and `main` branch\n- An approval process\n\nAs with most challenges I opened up google and had a look what I could see... mmmm plenty of options... but being a dev at heart and wanting to know how it works, so I set about crafting my own solution.\n\nI started to look at what I could do with Azure Pipelines and the Azure CLI, but decided against that as I felt the approval process would be a little clunky. Next port of call was Logic Apps and Power Automate, and this is where I stayed.\n\nFortunately Azure Logic Apps has a [connector](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/) that provides an [action](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#list-git-repositories) to list all repositories within an Azure DevOps project, unfortunately that is where the specific actions stop and you have to use the [HTTP request](https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#send-an-http-request-to-azure-devops) action to query the api from then on to get the branch information.\n\nIn summary the solution contains the following:\n\n- A parent logic app...\n  - that executes on a schedule (once every week)\n  - iterates refs (branches) with all the repositories with my project\n  - ignores any ref named master or main\n  - determines if the branch is stale\n  - call a child logic app that manages the approval and delete\n- A child logic app...\n  - sends an approval request to a teams channel\n  - if approved, deletes the ref (branch)\n\n## Child Logic App\n\n### Create a new logic app\n\nWe need a child logic app to handle the approval process and delete of stale branches. We are doing this in a child logic app so we can introduce an asynchronous pattern to our flow and not have the main process wait for each approval in sequence.\n\nCreate a new logic app, give it a suitable name and select When a HTTP request is received trigger.\n\n### Configure the trigger\n\n1. Set the triggers Request Body JSON Schema with the following:\n\n```json\n{\n  \"properties\": {\n    \"branchId\": {\n      \"type\": \"string\"\n    },\n    \"branchName\": {\n      \"type\": \"string\"\n    },\n    \"repoId\": {\n      \"type\": \"string\"\n    },\n    \"repoName\": {\n      \"type\": \"string\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n2. Set the Method to `POST`\n\n### Respond and get branch stats\n\n![respond and get branch stats](image004.png)\n\n1. Add a Response action and set the Status Code to `202 ` (Accepted).\n2. Add a Send an HTTP request to Azure DevOps action and configure as follows:\n   a. Set the organization as required\n   b. Set the method to GET\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{triggerBody()?['repoId']}/stats/branches?name=@{triggerBody()?['branchName']}&api-version=7.1-preview.1`, replace `{project}` with the name of your Azure DevOps project.\n\n### Parse the branch stats response\n\n![parse branch stats json](image005.png)\n\n1. Add a Parse JSON action, set the Content to the body of the Send an HTTP request to Azure DevOps action response (e.g. `@body('Get_Ref_Stats')`), and the Schema to the below:\n\n```json\n{\n  \"properties\": {\n    \"aheadCount\": {\n      \"type\": \"integer\"\n    },\n    \"behindCount\": {\n      \"type\": \"integer\"\n    },\n    \"commit\": {\n      \"properties\": {\n        \"author\": {\n          \"properties\": {\n            \"date\": {\n              \"type\": \"string\"\n            },\n            \"email\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"comment\": {\n          \"type\": \"string\"\n        },\n        \"commitId\": {\n          \"type\": \"string\"\n        },\n        \"committer\": {\n          \"properties\": {\n            \"date\": {\n              \"type\": \"string\"\n            },\n            \"email\": {\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"type\": \"object\"\n    },\n    \"isBaseVersion\": {\n      \"type\": \"boolean\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n### Post adaptive card to teams channel\n\nThis step might need a bit of blurb to help explain it... I'm using an adaptive card to get a response from a user via MS Teams. You could do the same via email, but I like the idea of posting this to a channel for my dev teams to action together, using the chat to discuss it when required.\n\n![post adaptive card to teams channel](image006a.png)\n![post adaptive card to teams channel](image006b.png)\n\n1. Add a Post adaptive card and wait for a response action and configure as required for your MS Teams service. Set the message as below (making sure to configure the expressions correctly) or you could even use the [adaptive card designer](https://adaptivecards.io/designer/) to design you own card\n\n```json\n{\n  \"type\": \"AdaptiveCard\",\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"version\": \"1.4\",\n  \"body\": [\n    {\n      \"type\": \"TextBlock\",\n      \"text\": \"Approve Stale Branch Deletion\",\n      \"wrap\": true,\n      \"weight\": \"Bolder\",\n      \"size\": \"ExtraLarge\"\n    },\n    {\n      \"type\": \"ColumnSet\",\n      \"columns\": [\n        {\n          \"type\": \"Column\",\n          \"width\": \"auto\",\n          \"items\": [\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Repository:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Branch:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Committer:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Commit Date:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Commit Message:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Owner:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"Created On:\",\n              \"wrap\": true,\n              \"weight\": \"Bolder\"\n            }\n          ]\n        },\n        {\n          \"type\": \"Column\",\n          \"width\": \"stretch\",\n          \"items\": [\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{triggerBody()?['repoName']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{triggerBody()?['branchName']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['committer']?['name']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['committer']?['date']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['comment']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['author']?['name']}\",\n              \"wrap\": true\n            },\n            {\n              \"type\": \"TextBlock\",\n              \"text\": \"@{body('Parse_JSON_for_Ref_Stats')?['commit']?['author']?['date']}\",\n              \"wrap\": true\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"actions\": [\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Approve\",\n      \"data\": \"approved\"\n    },\n    {\n      \"type\": \"Action.Submit\",\n      \"title\": \"Reject\",\n      \"data\": \"rejected\"\n    }\n  ]\n}\n```\n\n### Check adaptive card response\n\n![check adaptive card response](image007.png)\n\n1. Add a Condition action\n2. Set the condition `body('Send_Delete_Approval')?['submitActionId']` is equal to \"Approve\"\n\n### When response is NOT \"Approve\"\n\nWithin the \"False\" branch of the condition:\n\n![not approved](image008.png)\n\n1. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n2. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n3. Set the Message as desired (e.g. `Thanks @{body('Send_Delete_Approval')?['responder/displayName']}. You have rejected the deletion of the stale branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}'.`).\n4. Add a Terminate action after the Reply with a message in a channel action. I have this set to Cancelled, but I'll leave you to decide what status you'd prefer.\n\n### When response IS \"Approve\"\n\nWithin the \"True\" branch of the condition:\n\n![approved](image009.png)\n\n1. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n2. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n3. Set the Message as desired (e.g. `Thanks @{body('Send_Delete_Approval')?['responder/displayName']}. You have approved the deletion of the stale branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}'. It will be deleted in @{parameters('DelayCount')} @{parameters('DelayUnit')}(s).`). I've used two logic app parameters here to store the delay and units of delay (days/hours/etc.).\n\n![approved](image010.png)\n\n4. Add a Delay action, and set the count and delay to the parameters used in step 3. This delay is to give dev teams the time to lock the branch if it decided that it need to be retained.\n5. Add a Send an HTTP request to Azure DevOps action and configure as follows:\n   a. Set the organization as required\n   b. Set the method to POST\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{triggerBody()?['repoId']}/refs?api-version=7.1-preview.1`, replace `{project}` with the name of your Azure DevOps project.\n   d. Set the body to:\n   ```json\n   [\n     {\n       \"name\": \"refs/heads/@{triggerBody()?['branchName']}\",\n       \"oldObjectId\": \"@{triggerBody()?['branchId']}\",\n       \"newObjectId\": \"0000000000000000000000000000000000000000\"\n     }\n   ]\n   ```\n\n![reply once deleted](image011.png)\n\n6. Add a Reply with a message in a channel action and configure as required for your MS Teams service.\n7. Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. `body('Send_Delete_Approval')?['messageId']`).\n8. Set the Message as desired (e.g. `The branch '@{triggerBody()?['branchName']}' in repository '@{triggerBody()?['repoName']}' has now been deleted.`).\n\n## Parent Logic App\n\n### Create a new logic app\n\nNow we can create the parent logic app using the blank logic app option (no template). Give it a suitable name and select the Recurrence trigger.\n\n_Note: If you're not familiar with logic apps, I would suggest you read the [following tutorial](https://learn.microsoft.com/en-us/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow) before continuing with this article._\n\n### Trigger and iterate repositories\n\n![iterate repositories](image001.png)\n\n1. Set the trigger interval and frequency as required.\n2. Add an Azure Devops List Git repositories action, sign in (setup the connection), then select the DevOps organization and project.\n3. Add a For Each action and select the value output from the List Git repositories action (e.g. `@body('List_Git_repositories')?['value']`).\n4. Add a Send an HTTP request to Azure DevOps action within the For Each action added in step 3. Configure as follows:\n   a. Set the organization as required\n   b. Set the method to GET\n   c. Set the retieve uri to `{project}/_apis/git/repositories/@{items('{For_each_Repo}')?['id']}/stats/branches?api-version=7.1-preview.1`, replace `{project}` with the name of you Azure DevOps project and `{For_each_Repo}` with the handle of the For Each action created in step 3 (Don't forget the \\_ instead of a space).\n\n### Parse the branch stats response\n\n![get branch stats](image002.png)\n\n1. Add a Parse JSON action after the Send an HTTP request to Azure DevOps action (still within the for each), set the content to the body of the Send an HTTP request to Azure DevOps action (e.g. `@{body('Get_Refs_stats')}`) and set the schema (example below)\n\n```json\n{\n  \"properties\": {\n    \"count\": {\n      \"type\": \"integer\"\n    },\n    \"value\": {\n      \"items\": {\n        \"properties\": {\n          \"aheadCount\": {\n            \"type\": \"integer\"\n          },\n          \"behindCount\": {\n            \"type\": \"integer\"\n          },\n          \"commit\": {\n            \"properties\": {\n              \"author\": {\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"comment\": {\n                \"type\": \"string\"\n              },\n              \"commitId\": {\n                \"type\": \"string\"\n              },\n              \"committer\": {\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\"\n                  },\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              },\n              \"parents\": {\n                \"type\": \"array\"\n              },\n              \"treeId\": {\n                \"type\": \"string\"\n              },\n              \"url\": {\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          },\n          \"isBaseVersion\": {\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"commit\",\n          \"name\",\n          \"aheadCount\",\n          \"behindCount\",\n          \"isBaseVersion\"\n        ],\n        \"type\": \"object\"\n      },\n      \"type\": \"array\"\n    }\n  },\n  \"type\": \"object\"\n}\n```\n\n### Validate each branch\n\n![validate branch is stale](image003.png)\n\n1. Add a For Each action after the Parse JSON action added above. Set the input to the value (e.g. `body('Parse_JSON_for_Refs')?['value']`) of the Parse JSON action added above.\n2. Add a Condition action. Add two conditions to evaluate name (e.g. `items('For_each_Ref')?['name']`), one to equal 'master' and one to equal 'main'. Change the condition to a 'Or'.\n3. Add a Condition action to the success branch of the above Condition action. Add a condition to evaluate the commit author date (e.g. `parseDateTime(items('For_each_Ref')?['commit']?['committer']?['date'])`) is less than today date minus 90 days (e.g. `addDays(utcNow(),-90)`). You can change the number of days to suit your needs.\n\n### Call the child logic app\n\n![call child logic app](image012.png)\n\nWithin the \"True\" branch of the above condition action:\n\n1. Add a Logic Apps action and select the child app created above.\n2. Configure the child app:\n   a. branchId: `@{items('For_each_Ref')?['commit']?['commitId']}`\n   b. branchName: `@{items('For_each_Ref')?['name']}`\n   c. repoId: `@{items('For_each_Repo')?['id']}`\n   d. repoName `@{items('For_each_Repo')?['name']}`\n   _note: Trigger Name and Workflow should be set automatically when adding the action._\n\n## The End\n\nAnd that should be it! Your logic app should now run on your schedule and prompt your team to approve the deletion of a stale branch, helping you keep your Azure DevOps repositories tidy.\n\nHave a nice day. Bye!\n","slug":"Deleting-stale-branches-in-Azure-DevOps-Git-Repositories","published":1,"updated":"2022-12-06T23:49:25.365Z","_id":"clavk80dt000060um03hy2dv8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Stale-Branch…-Huh\"><a href=\"#Stale-Branch…-Huh\" class=\"headerlink\" title=\"Stale Branch… Huh?\"></a>Stale Branch… Huh?</h2><p>Azure DevOps, GitHub, etc. refer to a branch as being “stale” when it has no new commits within a certain number of days. I believe Azure uses 90 days as its reference. Pretty simple really! Unfortunately Azure DevOps doesn’t automatically delete&#x2F;archive stale branches. In this article I’m going to describe a solution to that problem.</p>\n<h2 id=\"Why-delete-your-stale-branches\"><a href=\"#Why-delete-your-stale-branches\" class=\"headerlink\" title=\"Why delete your stale branches?\"></a>Why delete your stale branches?</h2><p>Again, it’s pretty simple really. Having multiple branches of the same code base at different states or moments in time will likely cause confusion (and potentially problems!). If a branch has been released it should be merged to the master branch, if it’s unreleased it “could” be discarded. If you want the ability to restore the branch at any point you can simply tag the most recent commit! Git’s garbage collector prunes “unreachable” commits (essentially those not part of a branch or tags “tree”).</p>\n<h2 id=\"My-Solution\"><a href=\"#My-Solution\" class=\"headerlink\" title=\"My Solution\"></a>My Solution</h2><p>So, I wanted to automate the process of deleting stale branches and make it a team activity. To achieve this I wanted the following key points in the process:</p>\n<ul>\n<li>To check all repositories within the project</li>\n<li>To ignore the <code>master</code> and <code>main</code> branch</li>\n<li>An approval process</li>\n</ul>\n<p>As with most challenges I opened up google and had a look what I could see… mmmm plenty of options… but being a dev at heart and wanting to know how it works, so I set about crafting my own solution.</p>\n<p>I started to look at what I could do with Azure Pipelines and the Azure CLI, but decided against that as I felt the approval process would be a little clunky. Next port of call was Logic Apps and Power Automate, and this is where I stayed.</p>\n<p>Fortunately Azure Logic Apps has a <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/\">connector</a> that provides an <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#list-git-repositories\">action</a> to list all repositories within an Azure DevOps project, unfortunately that is where the specific actions stop and you have to use the <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#send-an-http-request-to-azure-devops\">HTTP request</a> action to query the api from then on to get the branch information.</p>\n<p>In summary the solution contains the following:</p>\n<ul>\n<li>A parent logic app…<ul>\n<li>that executes on a schedule (once every week)</li>\n<li>iterates refs (branches) with all the repositories with my project</li>\n<li>ignores any ref named master or main</li>\n<li>determines if the branch is stale</li>\n<li>call a child logic app that manages the approval and delete</li>\n</ul>\n</li>\n<li>A child logic app…<ul>\n<li>sends an approval request to a teams channel</li>\n<li>if approved, deletes the ref (branch)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Child-Logic-App\"><a href=\"#Child-Logic-App\" class=\"headerlink\" title=\"Child Logic App\"></a>Child Logic App</h2><h3 id=\"Create-a-new-logic-app\"><a href=\"#Create-a-new-logic-app\" class=\"headerlink\" title=\"Create a new logic app\"></a>Create a new logic app</h3><p>We need a child logic app to handle the approval process and delete of stale branches. We are doing this in a child logic app so we can introduce an asynchronous pattern to our flow and not have the main process wait for each approval in sequence.</p>\n<p>Create a new logic app, give it a suitable name and select When a HTTP request is received trigger.</p>\n<h3 id=\"Configure-the-trigger\"><a href=\"#Configure-the-trigger\" class=\"headerlink\" title=\"Configure the trigger\"></a>Configure the trigger</h3><ol>\n<li>Set the triggers Request Body JSON Schema with the following:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;branchId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;branchName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;repoId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;repoName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Set the Method to <code>POST</code></li>\n</ol>\n<h3 id=\"Respond-and-get-branch-stats\"><a href=\"#Respond-and-get-branch-stats\" class=\"headerlink\" title=\"Respond and get branch stats\"></a>Respond and get branch stats</h3><p><img src=\"/image004.png\" alt=\"respond and get branch stats\"></p>\n<ol>\n<li>Add a Response action and set the Status Code to <code>202 </code> (Accepted).</li>\n<li>Add a Send an HTTP request to Azure DevOps action and configure as follows:<br>a. Set the organization as required<br>b. Set the method to GET<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;triggerBody()?[&#39;repoId&#39;]&#125;/stats/branches?name=@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&amp;api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of your Azure DevOps project.</li>\n</ol>\n<h3 id=\"Parse-the-branch-stats-response\"><a href=\"#Parse-the-branch-stats-response\" class=\"headerlink\" title=\"Parse the branch stats response\"></a>Parse the branch stats response</h3><p><img src=\"/image005.png\" alt=\"parse branch stats json\"></p>\n<ol>\n<li>Add a Parse JSON action, set the Content to the body of the Send an HTTP request to Azure DevOps action response (e.g. <code>@body(&#39;Get_Ref_Stats&#39;)</code>), and the Schema to the below:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;aheadCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;behindCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commitId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;committer&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isBaseVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Post-adaptive-card-to-teams-channel\"><a href=\"#Post-adaptive-card-to-teams-channel\" class=\"headerlink\" title=\"Post adaptive card to teams channel\"></a>Post adaptive card to teams channel</h3><p>This step might need a bit of blurb to help explain it… I’m using an adaptive card to get a response from a user via MS Teams. You could do the same via email, but I like the idea of posting this to a channel for my dev teams to action together, using the chat to discuss it when required.</p>\n<p><img src=\"/image006a.png\" alt=\"post adaptive card to teams channel\"><br><img src=\"/image006b.png\" alt=\"post adaptive card to teams channel\"></p>\n<ol>\n<li>Add a Post adaptive card and wait for a response action and configure as required for your MS Teams service. Set the message as below (making sure to configure the expressions correctly) or you could even use the <a href=\"https://adaptivecards.io/designer/\">adaptive card designer</a> to design you own card</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AdaptiveCard&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Approve Stale Branch Deletion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ExtraLarge&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ColumnSet&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;columns&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Column&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;width&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;auto&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Repository:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Branch:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Committer:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Commit Date:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Commit Message:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Owner:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Created On:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Column&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;width&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stretch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;repoName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;branchName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;committer&#x27;]?[&#x27;name&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;committer&#x27;]?[&#x27;date&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;comment&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;author&#x27;]?[&#x27;name&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;author&#x27;]?[&#x27;date&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;actions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Action.Submit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Approve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;approved&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Action.Submit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Reject&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Check-adaptive-card-response\"><a href=\"#Check-adaptive-card-response\" class=\"headerlink\" title=\"Check adaptive card response\"></a>Check adaptive card response</h3><p><img src=\"/image007.png\" alt=\"check adaptive card response\"></p>\n<ol>\n<li>Add a Condition action</li>\n<li>Set the condition <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;submitActionId&#39;]</code> is equal to “Approve”</li>\n</ol>\n<h3 id=\"When-response-is-NOT-“Approve”\"><a href=\"#When-response-is-NOT-“Approve”\" class=\"headerlink\" title=\"When response is NOT “Approve”\"></a>When response is NOT “Approve”</h3><p>Within the “False” branch of the condition:</p>\n<p><img src=\"/image008.png\" alt=\"not approved\"></p>\n<ol>\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>Thanks @&#123;body(&#39;Send_Delete_Approval&#39;)?[&#39;responder/displayName&#39;]&#125;. You have rejected the deletion of the stale branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39;.</code>).</li>\n<li>Add a Terminate action after the Reply with a message in a channel action. I have this set to Cancelled, but I’ll leave you to decide what status you’d prefer.</li>\n</ol>\n<h3 id=\"When-response-IS-“Approve”\"><a href=\"#When-response-IS-“Approve”\" class=\"headerlink\" title=\"When response IS “Approve”\"></a>When response IS “Approve”</h3><p>Within the “True” branch of the condition:</p>\n<p><img src=\"/image009.png\" alt=\"approved\"></p>\n<ol>\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>Thanks @&#123;body(&#39;Send_Delete_Approval&#39;)?[&#39;responder/displayName&#39;]&#125;. You have approved the deletion of the stale branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39;. It will be deleted in @&#123;parameters(&#39;DelayCount&#39;)&#125; @&#123;parameters(&#39;DelayUnit&#39;)&#125;(s).</code>). I’ve used two logic app parameters here to store the delay and units of delay (days&#x2F;hours&#x2F;etc.).</li>\n</ol>\n<p><img src=\"/image010.png\" alt=\"approved\"></p>\n<ol start=\"4\">\n<li>Add a Delay action, and set the count and delay to the parameters used in step 3. This delay is to give dev teams the time to lock the branch if it decided that it need to be retained.</li>\n<li>Add a Send an HTTP request to Azure DevOps action and configure as follows:<br>a. Set the organization as required<br>b. Set the method to POST<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;triggerBody()?[&#39;repoId&#39;]&#125;/refs?api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of your Azure DevOps project.<br>d. Set the body to:<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;refs/heads/@&#123;triggerBody()?[&#x27;branchName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;oldObjectId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;branchId&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;newObjectId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0000000000000000000000000000000000000000&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"/image011.png\" alt=\"reply once deleted\"></p>\n<ol start=\"6\">\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>The branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39; has now been deleted.</code>).</li>\n</ol>\n<h2 id=\"Parent-Logic-App\"><a href=\"#Parent-Logic-App\" class=\"headerlink\" title=\"Parent Logic App\"></a>Parent Logic App</h2><h3 id=\"Create-a-new-logic-app-1\"><a href=\"#Create-a-new-logic-app-1\" class=\"headerlink\" title=\"Create a new logic app\"></a>Create a new logic app</h3><p>Now we can create the parent logic app using the blank logic app option (no template). Give it a suitable name and select the Recurrence trigger.</p>\n<p><em>Note: If you’re not familiar with logic apps, I would suggest you read the <a href=\"https://learn.microsoft.com/en-us/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow\">following tutorial</a> before continuing with this article.</em></p>\n<h3 id=\"Trigger-and-iterate-repositories\"><a href=\"#Trigger-and-iterate-repositories\" class=\"headerlink\" title=\"Trigger and iterate repositories\"></a>Trigger and iterate repositories</h3><p><img src=\"/image001.png\" alt=\"iterate repositories\"></p>\n<ol>\n<li>Set the trigger interval and frequency as required.</li>\n<li>Add an Azure Devops List Git repositories action, sign in (setup the connection), then select the DevOps organization and project.</li>\n<li>Add a For Each action and select the value output from the List Git repositories action (e.g. <code>@body(&#39;List_Git_repositories&#39;)?[&#39;value&#39;]</code>).</li>\n<li>Add a Send an HTTP request to Azure DevOps action within the For Each action added in step 3. Configure as follows:<br>a. Set the organization as required<br>b. Set the method to GET<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;items(&#39;&#123;For_each_Repo&#125;&#39;)?[&#39;id&#39;]&#125;/stats/branches?api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of you Azure DevOps project and <code>&#123;For_each_Repo&#125;</code> with the handle of the For Each action created in step 3 (Don’t forget the _ instead of a space).</li>\n</ol>\n<h3 id=\"Parse-the-branch-stats-response-1\"><a href=\"#Parse-the-branch-stats-response-1\" class=\"headerlink\" title=\"Parse the branch stats response\"></a>Parse the branch stats response</h3><p><img src=\"/image002.png\" alt=\"get branch stats\"></p>\n<ol>\n<li>Add a Parse JSON action after the Send an HTTP request to Azure DevOps action (still within the for each), set the content to the body of the Send an HTTP request to Azure DevOps action (e.g. <code>@&#123;body(&#39;Get_Refs_stats&#39;)&#125;</code>) and set the schema (example below)</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;aheadCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;behindCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;commitId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;committer&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;parents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;array&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;treeId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;isBaseVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;commit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;aheadCount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;behindCount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;isBaseVersion&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;array&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validate-each-branch\"><a href=\"#Validate-each-branch\" class=\"headerlink\" title=\"Validate each branch\"></a>Validate each branch</h3><p><img src=\"/image003.png\" alt=\"validate branch is stale\"></p>\n<ol>\n<li>Add a For Each action after the Parse JSON action added above. Set the input to the value (e.g. <code>body(&#39;Parse_JSON_for_Refs&#39;)?[&#39;value&#39;]</code>) of the Parse JSON action added above.</li>\n<li>Add a Condition action. Add two conditions to evaluate name (e.g. <code>items(&#39;For_each_Ref&#39;)?[&#39;name&#39;]</code>), one to equal ‘master’ and one to equal ‘main’. Change the condition to a ‘Or’.</li>\n<li>Add a Condition action to the success branch of the above Condition action. Add a condition to evaluate the commit author date (e.g. <code>parseDateTime(items(&#39;For_each_Ref&#39;)?[&#39;commit&#39;]?[&#39;committer&#39;]?[&#39;date&#39;])</code>) is less than today date minus 90 days (e.g. <code>addDays(utcNow(),-90)</code>). You can change the number of days to suit your needs.</li>\n</ol>\n<h3 id=\"Call-the-child-logic-app\"><a href=\"#Call-the-child-logic-app\" class=\"headerlink\" title=\"Call the child logic app\"></a>Call the child logic app</h3><p><img src=\"/image012.png\" alt=\"call child logic app\"></p>\n<p>Within the “True” branch of the above condition action:</p>\n<ol>\n<li>Add a Logic Apps action and select the child app created above.</li>\n<li>Configure the child app:<br>a. branchId: <code>@&#123;items(&#39;For_each_Ref&#39;)?[&#39;commit&#39;]?[&#39;commitId&#39;]&#125;</code><br>b. branchName: <code>@&#123;items(&#39;For_each_Ref&#39;)?[&#39;name&#39;]&#125;</code><br>c. repoId: <code>@&#123;items(&#39;For_each_Repo&#39;)?[&#39;id&#39;]&#125;</code><br>d. repoName <code>@&#123;items(&#39;For_each_Repo&#39;)?[&#39;name&#39;]&#125;</code><br><em>note: Trigger Name and Workflow should be set automatically when adding the action.</em></li>\n</ol>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2><p>And that should be it! Your logic app should now run on your schedule and prompt your team to approve the deletion of a stale branch, helping you keep your Azure DevOps repositories tidy.</p>\n<p>Have a nice day. Bye!</p>\n","site":{"data":{}},"more":"<h2 id=\"Stale-Branch…-Huh\"><a href=\"#Stale-Branch…-Huh\" class=\"headerlink\" title=\"Stale Branch… Huh?\"></a>Stale Branch… Huh?</h2><p>Azure DevOps, GitHub, etc. refer to a branch as being “stale” when it has no new commits within a certain number of days. I believe Azure uses 90 days as its reference. Pretty simple really! Unfortunately Azure DevOps doesn’t automatically delete&#x2F;archive stale branches. In this article I’m going to describe a solution to that problem.</p>\n<h2 id=\"Why-delete-your-stale-branches\"><a href=\"#Why-delete-your-stale-branches\" class=\"headerlink\" title=\"Why delete your stale branches?\"></a>Why delete your stale branches?</h2><p>Again, it’s pretty simple really. Having multiple branches of the same code base at different states or moments in time will likely cause confusion (and potentially problems!). If a branch has been released it should be merged to the master branch, if it’s unreleased it “could” be discarded. If you want the ability to restore the branch at any point you can simply tag the most recent commit! Git’s garbage collector prunes “unreachable” commits (essentially those not part of a branch or tags “tree”).</p>\n<h2 id=\"My-Solution\"><a href=\"#My-Solution\" class=\"headerlink\" title=\"My Solution\"></a>My Solution</h2><p>So, I wanted to automate the process of deleting stale branches and make it a team activity. To achieve this I wanted the following key points in the process:</p>\n<ul>\n<li>To check all repositories within the project</li>\n<li>To ignore the <code>master</code> and <code>main</code> branch</li>\n<li>An approval process</li>\n</ul>\n<p>As with most challenges I opened up google and had a look what I could see… mmmm plenty of options… but being a dev at heart and wanting to know how it works, so I set about crafting my own solution.</p>\n<p>I started to look at what I could do with Azure Pipelines and the Azure CLI, but decided against that as I felt the approval process would be a little clunky. Next port of call was Logic Apps and Power Automate, and this is where I stayed.</p>\n<p>Fortunately Azure Logic Apps has a <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/\">connector</a> that provides an <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#list-git-repositories\">action</a> to list all repositories within an Azure DevOps project, unfortunately that is where the specific actions stop and you have to use the <a href=\"https://learn.microsoft.com/en-us/connectors/visualstudioteamservices/#send-an-http-request-to-azure-devops\">HTTP request</a> action to query the api from then on to get the branch information.</p>\n<p>In summary the solution contains the following:</p>\n<ul>\n<li>A parent logic app…<ul>\n<li>that executes on a schedule (once every week)</li>\n<li>iterates refs (branches) with all the repositories with my project</li>\n<li>ignores any ref named master or main</li>\n<li>determines if the branch is stale</li>\n<li>call a child logic app that manages the approval and delete</li>\n</ul>\n</li>\n<li>A child logic app…<ul>\n<li>sends an approval request to a teams channel</li>\n<li>if approved, deletes the ref (branch)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Child-Logic-App\"><a href=\"#Child-Logic-App\" class=\"headerlink\" title=\"Child Logic App\"></a>Child Logic App</h2><h3 id=\"Create-a-new-logic-app\"><a href=\"#Create-a-new-logic-app\" class=\"headerlink\" title=\"Create a new logic app\"></a>Create a new logic app</h3><p>We need a child logic app to handle the approval process and delete of stale branches. We are doing this in a child logic app so we can introduce an asynchronous pattern to our flow and not have the main process wait for each approval in sequence.</p>\n<p>Create a new logic app, give it a suitable name and select When a HTTP request is received trigger.</p>\n<h3 id=\"Configure-the-trigger\"><a href=\"#Configure-the-trigger\" class=\"headerlink\" title=\"Configure the trigger\"></a>Configure the trigger</h3><ol>\n<li>Set the triggers Request Body JSON Schema with the following:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;branchId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;branchName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;repoId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;repoName&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Set the Method to <code>POST</code></li>\n</ol>\n<h3 id=\"Respond-and-get-branch-stats\"><a href=\"#Respond-and-get-branch-stats\" class=\"headerlink\" title=\"Respond and get branch stats\"></a>Respond and get branch stats</h3><p><img src=\"/image004.png\" alt=\"respond and get branch stats\"></p>\n<ol>\n<li>Add a Response action and set the Status Code to <code>202 </code> (Accepted).</li>\n<li>Add a Send an HTTP request to Azure DevOps action and configure as follows:<br>a. Set the organization as required<br>b. Set the method to GET<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;triggerBody()?[&#39;repoId&#39;]&#125;/stats/branches?name=@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&amp;api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of your Azure DevOps project.</li>\n</ol>\n<h3 id=\"Parse-the-branch-stats-response\"><a href=\"#Parse-the-branch-stats-response\" class=\"headerlink\" title=\"Parse the branch stats response\"></a>Parse the branch stats response</h3><p><img src=\"/image005.png\" alt=\"parse branch stats json\"></p>\n<ol>\n<li>Add a Parse JSON action, set the Content to the body of the Send an HTTP request to Azure DevOps action response (e.g. <code>@body(&#39;Get_Ref_Stats&#39;)</code>), and the Schema to the below:</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;aheadCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;behindCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commitId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;committer&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;isBaseVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Post-adaptive-card-to-teams-channel\"><a href=\"#Post-adaptive-card-to-teams-channel\" class=\"headerlink\" title=\"Post adaptive card to teams channel\"></a>Post adaptive card to teams channel</h3><p>This step might need a bit of blurb to help explain it… I’m using an adaptive card to get a response from a user via MS Teams. You could do the same via email, but I like the idea of posting this to a channel for my dev teams to action together, using the chat to discuss it when required.</p>\n<p><img src=\"/image006a.png\" alt=\"post adaptive card to teams channel\"><br><img src=\"/image006b.png\" alt=\"post adaptive card to teams channel\"></p>\n<ol>\n<li>Add a Post adaptive card and wait for a response action and configure as required for your MS Teams service. Set the message as below (making sure to configure the expressions correctly) or you could even use the <a href=\"https://adaptivecards.io/designer/\">adaptive card designer</a> to design you own card</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AdaptiveCard&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Approve Stale Branch Deletion&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ExtraLarge&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ColumnSet&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;columns&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Column&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;width&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;auto&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Repository:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Branch:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Committer:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Commit Date:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Commit Message:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Owner:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Created On:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;weight&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Bolder&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Column&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;width&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stretch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;repoName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;branchName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;committer&#x27;]?[&#x27;name&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;committer&#x27;]?[&#x27;date&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;comment&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;author&#x27;]?[&#x27;name&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TextBlock&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;body(&#x27;Parse_JSON_for_Ref_Stats&#x27;)?[&#x27;commit&#x27;]?[&#x27;author&#x27;]?[&#x27;date&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;wrap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;actions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Action.Submit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Approve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;approved&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Action.Submit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Reject&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Check-adaptive-card-response\"><a href=\"#Check-adaptive-card-response\" class=\"headerlink\" title=\"Check adaptive card response\"></a>Check adaptive card response</h3><p><img src=\"/image007.png\" alt=\"check adaptive card response\"></p>\n<ol>\n<li>Add a Condition action</li>\n<li>Set the condition <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;submitActionId&#39;]</code> is equal to “Approve”</li>\n</ol>\n<h3 id=\"When-response-is-NOT-“Approve”\"><a href=\"#When-response-is-NOT-“Approve”\" class=\"headerlink\" title=\"When response is NOT “Approve”\"></a>When response is NOT “Approve”</h3><p>Within the “False” branch of the condition:</p>\n<p><img src=\"/image008.png\" alt=\"not approved\"></p>\n<ol>\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>Thanks @&#123;body(&#39;Send_Delete_Approval&#39;)?[&#39;responder/displayName&#39;]&#125;. You have rejected the deletion of the stale branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39;.</code>).</li>\n<li>Add a Terminate action after the Reply with a message in a channel action. I have this set to Cancelled, but I’ll leave you to decide what status you’d prefer.</li>\n</ol>\n<h3 id=\"When-response-IS-“Approve”\"><a href=\"#When-response-IS-“Approve”\" class=\"headerlink\" title=\"When response IS “Approve”\"></a>When response IS “Approve”</h3><p>Within the “True” branch of the condition:</p>\n<p><img src=\"/image009.png\" alt=\"approved\"></p>\n<ol>\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>Thanks @&#123;body(&#39;Send_Delete_Approval&#39;)?[&#39;responder/displayName&#39;]&#125;. You have approved the deletion of the stale branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39;. It will be deleted in @&#123;parameters(&#39;DelayCount&#39;)&#125; @&#123;parameters(&#39;DelayUnit&#39;)&#125;(s).</code>). I’ve used two logic app parameters here to store the delay and units of delay (days&#x2F;hours&#x2F;etc.).</li>\n</ol>\n<p><img src=\"/image010.png\" alt=\"approved\"></p>\n<ol start=\"4\">\n<li>Add a Delay action, and set the count and delay to the parameters used in step 3. This delay is to give dev teams the time to lock the branch if it decided that it need to be retained.</li>\n<li>Add a Send an HTTP request to Azure DevOps action and configure as follows:<br>a. Set the organization as required<br>b. Set the method to POST<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;triggerBody()?[&#39;repoId&#39;]&#125;/refs?api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of your Azure DevOps project.<br>d. Set the body to:<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;refs/heads/@&#123;triggerBody()?[&#x27;branchName&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;oldObjectId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@&#123;triggerBody()?[&#x27;branchId&#x27;]&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;newObjectId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0000000000000000000000000000000000000000&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"/image011.png\" alt=\"reply once deleted\"></p>\n<ol start=\"6\">\n<li>Add a Reply with a message in a channel action and configure as required for your MS Teams service.</li>\n<li>Set the Message Id to the message id of the Post adaptive card and wait for a response action (e.g. <code>body(&#39;Send_Delete_Approval&#39;)?[&#39;messageId&#39;]</code>).</li>\n<li>Set the Message as desired (e.g. <code>The branch &#39;@&#123;triggerBody()?[&#39;branchName&#39;]&#125;&#39; in repository &#39;@&#123;triggerBody()?[&#39;repoName&#39;]&#125;&#39; has now been deleted.</code>).</li>\n</ol>\n<h2 id=\"Parent-Logic-App\"><a href=\"#Parent-Logic-App\" class=\"headerlink\" title=\"Parent Logic App\"></a>Parent Logic App</h2><h3 id=\"Create-a-new-logic-app-1\"><a href=\"#Create-a-new-logic-app-1\" class=\"headerlink\" title=\"Create a new logic app\"></a>Create a new logic app</h3><p>Now we can create the parent logic app using the blank logic app option (no template). Give it a suitable name and select the Recurrence trigger.</p>\n<p><em>Note: If you’re not familiar with logic apps, I would suggest you read the <a href=\"https://learn.microsoft.com/en-us/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow\">following tutorial</a> before continuing with this article.</em></p>\n<h3 id=\"Trigger-and-iterate-repositories\"><a href=\"#Trigger-and-iterate-repositories\" class=\"headerlink\" title=\"Trigger and iterate repositories\"></a>Trigger and iterate repositories</h3><p><img src=\"/image001.png\" alt=\"iterate repositories\"></p>\n<ol>\n<li>Set the trigger interval and frequency as required.</li>\n<li>Add an Azure Devops List Git repositories action, sign in (setup the connection), then select the DevOps organization and project.</li>\n<li>Add a For Each action and select the value output from the List Git repositories action (e.g. <code>@body(&#39;List_Git_repositories&#39;)?[&#39;value&#39;]</code>).</li>\n<li>Add a Send an HTTP request to Azure DevOps action within the For Each action added in step 3. Configure as follows:<br>a. Set the organization as required<br>b. Set the method to GET<br>c. Set the retieve uri to <code>&#123;project&#125;/_apis/git/repositories/@&#123;items(&#39;&#123;For_each_Repo&#125;&#39;)?[&#39;id&#39;]&#125;/stats/branches?api-version=7.1-preview.1</code>, replace <code>&#123;project&#125;</code> with the name of you Azure DevOps project and <code>&#123;For_each_Repo&#125;</code> with the handle of the For Each action created in step 3 (Don’t forget the _ instead of a space).</li>\n</ol>\n<h3 id=\"Parse-the-branch-stats-response-1\"><a href=\"#Parse-the-branch-stats-response-1\" class=\"headerlink\" title=\"Parse the branch stats response\"></a>Parse the branch stats response</h3><p><img src=\"/image002.png\" alt=\"get branch stats\"></p>\n<ol>\n<li>Add a Parse JSON action after the Send an HTTP request to Azure DevOps action (still within the for each), set the content to the body of the Send an HTTP request to Azure DevOps action (e.g. <code>@&#123;body(&#39;Get_Refs_stats&#39;)&#125;</code>) and set the schema (example below)</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;aheadCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;behindCount&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;integer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;commitId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;committer&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">                  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;parents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;array&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;treeId&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;isBaseVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;commit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;aheadCount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;behindCount&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"string\">&quot;isBaseVersion&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;array&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Validate-each-branch\"><a href=\"#Validate-each-branch\" class=\"headerlink\" title=\"Validate each branch\"></a>Validate each branch</h3><p><img src=\"/image003.png\" alt=\"validate branch is stale\"></p>\n<ol>\n<li>Add a For Each action after the Parse JSON action added above. Set the input to the value (e.g. <code>body(&#39;Parse_JSON_for_Refs&#39;)?[&#39;value&#39;]</code>) of the Parse JSON action added above.</li>\n<li>Add a Condition action. Add two conditions to evaluate name (e.g. <code>items(&#39;For_each_Ref&#39;)?[&#39;name&#39;]</code>), one to equal ‘master’ and one to equal ‘main’. Change the condition to a ‘Or’.</li>\n<li>Add a Condition action to the success branch of the above Condition action. Add a condition to evaluate the commit author date (e.g. <code>parseDateTime(items(&#39;For_each_Ref&#39;)?[&#39;commit&#39;]?[&#39;committer&#39;]?[&#39;date&#39;])</code>) is less than today date minus 90 days (e.g. <code>addDays(utcNow(),-90)</code>). You can change the number of days to suit your needs.</li>\n</ol>\n<h3 id=\"Call-the-child-logic-app\"><a href=\"#Call-the-child-logic-app\" class=\"headerlink\" title=\"Call the child logic app\"></a>Call the child logic app</h3><p><img src=\"/image012.png\" alt=\"call child logic app\"></p>\n<p>Within the “True” branch of the above condition action:</p>\n<ol>\n<li>Add a Logic Apps action and select the child app created above.</li>\n<li>Configure the child app:<br>a. branchId: <code>@&#123;items(&#39;For_each_Ref&#39;)?[&#39;commit&#39;]?[&#39;commitId&#39;]&#125;</code><br>b. branchName: <code>@&#123;items(&#39;For_each_Ref&#39;)?[&#39;name&#39;]&#125;</code><br>c. repoId: <code>@&#123;items(&#39;For_each_Repo&#39;)?[&#39;id&#39;]&#125;</code><br>d. repoName <code>@&#123;items(&#39;For_each_Repo&#39;)?[&#39;name&#39;]&#125;</code><br><em>note: Trigger Name and Workflow should be set automatically when adding the action.</em></li>\n</ol>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2><p>And that should be it! Your logic app should now run on your schedule and prompt your team to approve the deletion of a stale branch, helping you keep your Azure DevOps repositories tidy.</p>\n<p>Have a nice day. Bye!</p>\n"}],"PostAsset":[{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/AutoResponderRule.png","slug":"AutoResponderRule.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/AutoResponderTab.png","slug":"AutoResponderTab.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ChromeBreakpoint.png","slug":"ChromeBreakpoint.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ChromeOpenFile.png","slug":"ChromeOpenFile.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/d365ts-pt4.zip","slug":"d365ts-pt4.zip","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/DebugSampleModule.png","slug":"DebugSampleModule.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/ReallyPointless.png","slug":"ReallyPointless.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-WebResources-Part-4/StepInto.png","slug":"StepInto.png","post":"ckyhky4cf0003xsumg1czhhon","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/d365ts-pt1.zip","slug":"d365ts-pt1.zip","post":"ckyhky4cl0006xsumd9z9buri","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/files1.png","slug":"files1.png","post":"ckyhky4cl0006xsumd9z9buri","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/form-event.png","slug":"form-event.png","post":"ckyhky4cl0006xsumd9z9buri","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-1/formnotification.png","slug":"formnotification.png","post":"ckyhky4cl0006xsumd9z9buri","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/d365ts-pt2.zip","slug":"d365ts-pt2.zip","post":"ckyhky4cp0008xsum90dx0xvt","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/type-infer-1.png","slug":"type-infer-1.png","post":"ckyhky4cp0008xsum90dx0xvt","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-2/type-infer-2.png","slug":"type-infer-2.png","post":"ckyhky4cp0008xsum90dx0xvt","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-3/build-output.png","slug":"build-output.png","post":"ckyhky4cr0009xsum79xnf83z","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-3/d365ts-pt3.zip","slug":"d365ts-pt3.zip","post":"ckyhky4cr0009xsum79xnf83z","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-5/d365ts-pt5.zip","slug":"d365ts-pt5.zip","post":"ckyhky4cu000bxsum5fncfjzx","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/d365ts-pt6.zip","slug":"d365ts-pt6.zip","post":"ckyhky4cx000dxsum14hcf9yz","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/detail.png","slug":"detail.png","post":"ckyhky4cx000dxsum14hcf9yz","modified":0,"renderable":0},{"_id":"source/_posts/D365-Typescript-Webresources-Part-6/log.png","slug":"log.png","post":"ckyhky4cx000dxsum14hcf9yz","modified":0,"renderable":0},{"_id":"source/_posts/PCF-WebApi-execute/pcf-webapi.png","slug":"pcf-webapi.png","post":"ckyhky4cz000fxsum9hsh0iv6","modified":0,"renderable":0},{"_id":"source/_posts/PCF-and-Form-Communication/custom-events.svg","slug":"custom-events.svg","post":"ckyhky4d2000ixsumfeij0h3j","modified":0,"renderable":0},{"_id":"source/_posts/PCF-and-Form-Communication/custom-events.yuml","slug":"custom-events.yuml","post":"ckyhky4d2000ixsumfeij0h3j","modified":0,"renderable":0},{"_id":"source/_posts/PCF-primary-entity-info/pcf-entityinfo.png","slug":"pcf-entityinfo.png","post":"ckyhky4d6000lxsumba790ocz","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image001.png","slug":"image001.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image002.png","slug":"image002.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image003.png","slug":"image003.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image004.png","slug":"image004.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image005.png","slug":"image005.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006a.png","slug":"image006a.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image006b.png","slug":"image006b.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image007.png","slug":"image007.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image008.png","slug":"image008.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image009.png","slug":"image009.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image010.png","slug":"image010.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image011.png","slug":"image011.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0},{"_id":"source/_posts/Deleting-stale-branches-in-Azure-DevOps-Git-Repositories/image012.png","slug":"image012.png","post":"clavk80dt000060um03hy2dv8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckyhky4cr0009xsum79xnf83z","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4d1000gxsum3d6o88ux"},{"post_id":"ckyhky4cf0003xsumg1czhhon","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4d5000jxsum9ylg1py0"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4d8000mxsumd4xd8bjy"},{"post_id":"ckyhky4cx000dxsum14hcf9yz","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4da000qxsum9nd46cxr"},{"post_id":"ckyhky4cl0006xsumd9z9buri","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4db000txsum6eip2g5y"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","category_id":"ckyhky4co0007xsum3am5ahq9","_id":"ckyhky4dc000wxsuma0czhccb"},{"post_id":"ckyhky4d2000ixsumfeij0h3j","category_id":"ckyhky4d8000nxsumhnyy8fn1","_id":"ckyhky4dg0011xsum7068hcks"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","category_id":"ckyhky4d8000nxsumhnyy8fn1","_id":"ckyhky4di0014xsumcq6pfykv"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","category_id":"ckyhky4de0010xsum70y27ty9","_id":"ckyhky4dk0016xsumhubh72ym"},{"post_id":"ckyhky4d6000lxsumba790ocz","category_id":"ckyhky4d8000nxsumhnyy8fn1","_id":"ckyhky4dl0017xsum27mtg3y9"},{"post_id":"ckyhky4d6000lxsumba790ocz","category_id":"ckyhky4de0010xsum70y27ty9","_id":"ckyhky4dn0019xsum4ldw3tuu"},{"post_id":"clavk80dt000060um03hy2dv8","category_id":"clan3oevt0001f8umg990f9wj","_id":"clavk80e5000360umaz76fq4h"},{"post_id":"clavk80dt000060um03hy2dv8","category_id":"clan3oew80004f8umf5xl2vvx","_id":"clavk80e5000560um52n4dgsq"}],"PostTag":[{"post_id":"ckyhky4c90001xsumdenm299c","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4d9000oxsumangx7rdt"},{"post_id":"ckyhky4c90001xsumdenm299c","tag_id":"ckyhky4cs000axsum7vfp33ft","_id":"ckyhky4da000rxsum1zecgyv8"},{"post_id":"ckyhky4c90001xsumdenm299c","tag_id":"ckyhky4cy000exsumdv2d9g7t","_id":"ckyhky4dc000vxsumh3snaggc"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4dr001cxsum00f0383a"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4dr001dxsumbgtf46eh"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4ds001fxsum3uksdv21"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4dt001gxsum5kmv0i5z"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4dh0012xsum58zpe5lu","_id":"ckyhky4du001ixsum419h0n9x"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4di0015xsumb3437ngu","_id":"ckyhky4du001jxsum5t3n5kv1"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4dl0018xsum6x64f4g2","_id":"ckyhky4dv001lxsumar9rdwya"},{"post_id":"ckyhky4cf0003xsumg1czhhon","tag_id":"ckyhky4do001axsumdvvnaa3g","_id":"ckyhky4dv001mxsum60excyqv"},{"post_id":"ckyhky4cl0006xsumd9z9buri","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4dx001oxsumcjqv9vzz"},{"post_id":"ckyhky4cl0006xsumd9z9buri","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4dx001pxsum7evffhvz"},{"post_id":"ckyhky4cl0006xsumd9z9buri","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4dy001rxsum716o522w"},{"post_id":"ckyhky4cl0006xsumd9z9buri","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4dy001sxsum1rngggv5"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4e1001wxsume7t90ivv"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4e1001xxsum60r7d7j1"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4e2001zxsum67qv8g3i"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4e20020xsumhrwz0nng"},{"post_id":"ckyhky4cp0008xsum90dx0xvt","tag_id":"ckyhky4dz001uxsum9hpy4da0","_id":"ckyhky4e30022xsumgx8ce182"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4e40026xsum33uz54fr"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4e50027xsum3xuj02qg"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4e50029xsumbph1cf8r"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4e5002axsuma152by7f"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4dh0012xsum58zpe5lu","_id":"ckyhky4e6002cxsum3lyyctxv"},{"post_id":"ckyhky4cr0009xsum79xnf83z","tag_id":"ckyhky4di0015xsumb3437ngu","_id":"ckyhky4e6002dxsum3fpyajet"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4e9002ixsumgq226dag"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4ea002jxsum3d2gbq2d"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4eb002lxsumg4vfddh6"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4eb002mxsumdtpbazy9"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4e6002exsum71f1ay7i","_id":"ckyhky4ec002oxsum7u4w6eop"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4e7002fxsum21cc559f","_id":"ckyhky4ec002pxsum99vg2uix"},{"post_id":"ckyhky4cu000bxsum5fncfjzx","tag_id":"ckyhky4e8002gxsumdd634q10","_id":"ckyhky4ed002rxsum21rnbfjx"},{"post_id":"ckyhky4cx000dxsum14hcf9yz","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4ed002sxsum0gnpdi19"},{"post_id":"ckyhky4cx000dxsum14hcf9yz","tag_id":"ckyhky4da000sxsumb6wr5ih8","_id":"ckyhky4ee002uxsum45uqeara"},{"post_id":"ckyhky4cx000dxsum14hcf9yz","tag_id":"ckyhky4dc000xxsum7tjh2zw0","_id":"ckyhky4ee002vxsum8slmbsga"},{"post_id":"ckyhky4cx000dxsum14hcf9yz","tag_id":"ckyhky4dd000zxsumerx5fzk8","_id":"ckyhky4ee002xxsumauyq7i4q"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4ef002zxsum2x29c2oc"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","tag_id":"ckyhky4ec002qxsumavws4kat","_id":"ckyhky4ef0030xsumg08f95z1"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","tag_id":"ckyhky4ed002txsumddna07vz","_id":"ckyhky4eg0032xsum7ovlcr4x"},{"post_id":"ckyhky4cz000fxsum9hsh0iv6","tag_id":"ckyhky4ee002wxsum9z4j9q6s","_id":"ckyhky4eg0033xsum1vi9d9zm"},{"post_id":"ckyhky4d2000ixsumfeij0h3j","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4eh0036xsum69xg2k2n"},{"post_id":"ckyhky4d2000ixsumfeij0h3j","tag_id":"ckyhky4ec002qxsumavws4kat","_id":"ckyhky4eh0037xsumg1l5fv55"},{"post_id":"ckyhky4d2000ixsumfeij0h3j","tag_id":"ckyhky4ed002txsumddna07vz","_id":"ckyhky4ei0039xsum0cbb7voq"},{"post_id":"ckyhky4d2000ixsumfeij0h3j","tag_id":"ckyhky4ee002wxsum9z4j9q6s","_id":"ckyhky4ei003axsum703o39m3"},{"post_id":"ckyhky4d6000lxsumba790ocz","tag_id":"ckyhky4ci0004xsum4k744j3l","_id":"ckyhky4ej003dxsumhnw4f2l0"},{"post_id":"ckyhky4d6000lxsumba790ocz","tag_id":"ckyhky4ec002qxsumavws4kat","_id":"ckyhky4ek003exsum9vdw8kra"},{"post_id":"ckyhky4d6000lxsumba790ocz","tag_id":"ckyhky4ed002txsumddna07vz","_id":"ckyhky4ek003gxsum9q6e2bwr"},{"post_id":"ckyhky4d6000lxsumba790ocz","tag_id":"ckyhky4ee002wxsum9z4j9q6s","_id":"ckyhky4ek003hxsumgrkyb82p"},{"post_id":"ckyhky4d9000pxsumai47d1to","tag_id":"ckyhky4ej003cxsumedwk5c34","_id":"ckyhky4el003ixsum8y1ld3l3"},{"post_id":"ckyhky4d9000pxsumai47d1to","tag_id":"ckyhky4ek003fxsum243p7c97","_id":"ckyhky4el003jxsumdvz8e3b1"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oew30002f8umcsgebhzl","_id":"clavk80e4000160um2rj3gfha"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oew70003f8um7gjpem9y","_id":"clavk80e5000260um5ja5em48"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oew90005f8um0xpkgqk7","_id":"clavk80e5000460umeqxm7njz"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oewa0006f8umbnywbqc2","_id":"clavk80e6000660umhldt3e0q"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oewc0009f8um8zal70b6","_id":"clavk80e6000760um006s5jeb"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clan3oewd000af8um3vumf44s","_id":"clavk80e6000860umgz7f6lay"},{"post_id":"clavk80dt000060um03hy2dv8","tag_id":"clbcvh7tz0000fwum23qacx1r","_id":"clbcvh7ud0001fwumeoc9ajjj"}],"Tag":[{"name":"D365","_id":"ckyhky4ci0004xsum4k744j3l"},{"name":"Dataverse","_id":"ckyhky4cs000axsum7vfp33ft"},{"name":"WebApi","_id":"ckyhky4cy000exsumdv2d9g7t"},{"name":"Web Resources","_id":"ckyhky4da000sxsumb6wr5ih8"},{"name":"TypeScript","_id":"ckyhky4dc000xxsum7tjh2zw0"},{"name":"JavaScript","_id":"ckyhky4dd000zxsumerx5fzk8"},{"name":"Webpack","_id":"ckyhky4dh0012xsum58zpe5lu"},{"name":"Babel","_id":"ckyhky4di0015xsumb3437ngu"},{"name":"ES Modules","_id":"ckyhky4dl0018xsum6x64f4g2"},{"name":"Debugging","_id":"ckyhky4do001axsumdvvnaa3g"},{"name":"XrmDefinitelyTyped","_id":"ckyhky4dz001uxsum9hpy4da0"},{"name":"Unit Testing","_id":"ckyhky4e6002exsum71f1ay7i"},{"name":"Jest","_id":"ckyhky4e7002fxsum21cc559f"},{"name":"XrmMock","_id":"ckyhky4e8002gxsumdd634q10"},{"name":"PCF","_id":"ckyhky4ec002qxsumavws4kat"},{"name":"Power Apps","_id":"ckyhky4ed002txsumddna07vz"},{"name":"Power Apps Component Framework","_id":"ckyhky4ee002wxsum9z4j9q6s"},{"name":"welcome","_id":"ckyhky4ej003cxsumedwk5c34"},{"name":"oliver flint","_id":"ckyhky4ek003fxsum243p7c97"},{"name":"Azure","_id":"clan3oew30002f8umcsgebhzl"},{"name":"DevOps","_id":"clan3oew70003f8um7gjpem9y"},{"name":"Stale","_id":"clan3oew90005f8um0xpkgqk7"},{"name":"Branches","_id":"clan3oewa0006f8umbnywbqc2"},{"name":"Power Automate","_id":"clan3oewc0009f8um8zal70b6"},{"name":"Flow","_id":"clan3oewd000af8um3vumf44s"},{"name":"Logic Apps","_id":"clbcvh7tz0000fwum23qacx1r"}]}}